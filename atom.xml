<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Rouleur]]></title>
  
  <link href="/pages/atom.xml" rel="self"/>
  <link href="http://yenjoji.github.io/pages/pages//"/>
  <updated>2016-03-05T18:06:20.000Z</updated>
  <id>http://yenjoji.github.io/pages/pages//</id>
  
  <author>
    <name><![CDATA[yenjoji]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[「佐藤可士和のクリエイティブシンキング」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/27/20160227-read-creative-thinking/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/27/20160227-read-creative-thinking/</id>
    <published>2016-02-26T16:13:14.000Z</published>
    <updated>2016-03-05T18:06:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4532490960/" target="_blank" rel="external">佐藤可士和のクリエイティブシンキング</a></li>
<li>読み終わった日<br>2016/2/27</li>
<li>所要時間<br>10時間くらい？（のべ14日間）</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥200</li>
</ul>
<h1 id="感想">感想</h1><p>佐藤可士和氏が、「クリエイティブ・シンキング」をテーマに、どのようにすればクリエイティブな思考ができるかのエッセンスをまとめた本です。</p>
<p>そこかしこにいい感じのヒントになるような言葉が散りばめられています。<br>それぞれのエッセンスを<br>”お茶の間目線”<br>など、佐藤可士和氏の言葉で綴られています。</p>
<p>私のクリエイティビティに音大があるのか、文体の相性とかがあるのかもしれませんが、私にはちょっと読みにくかったです。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4532490960/" target="_blank" rel="external">佐藤可士和のクリエイティブシンキング</a>]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/2/26 アジャイルひよこクラブ 「今年のTryプレゼン＆現場のProblem相談＆Keep事例発表大会」に参加してきました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/26/20160226-agile-hiyoko/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/26/20160226-agile-hiyoko/</id>
    <published>2016-02-26T10:41:19.000Z</published>
    <updated>2016-02-27T08:23:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="感想">感想</h1><p>渋谷のヒカリエ31階にある株式会社medibaで開催された<a href="https://agile-hiyoko-club.doorkeeper.jp/events/38245" target="_blank" rel="external">アジャイルひよこクラブ「今年のTryプレゼン＆現場のProblem相談＆Keep事例発表大会」</a>に参加しました。</p>
<p>最近めっきり数が減った定期的に行われているアジャイル開発のコミュニティです。<br>昨年横浜道場のスタッフの永井さんとてらひでさんが登壇したのをきっかけに存在を知りました。</p>
<p>今回予定があったので、初参加してきました。</p>
<p>参加した感想としては、</p>
<ul>
<li>最近では数少ない定期的に活動しているアジャイルコミュニティであり</li>
<li>質問しやすい雰囲気からくる活発な質疑応答＆議論が行われており<br>初心者にとっては疑問をぶつけられる場であり、それなりに経験している人には質問に答えたり、質疑を聞くことにより理解をより一層深められる場でいいと感じました。</li>
</ul>
<p>デブラブでいろんな有名人に声をかけまくったので、しばらくビックタレントの公園が続くそうなので、今後も期待できそうです。</p>
<p>偶数月に開催しているそうで、次回は4月でPO Studyの関さんがメインスピーカーだそうです。</p>
<h1 id="内容">内容</h1><h2 id="イントロ">イントロ</h2><p>ちょっと遅れて到着したので、最初の説明は聞けませんでした。<br>開いている席に着席すると、まずは周りの参加者と3人から4人でグループを作って</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#31169;&#12399;&#10;&#20170;&#12399;XX&#12375;&#12390;&#12414;&#12377;&#10;&#12450;&#12472;&#12515;&#12452;&#12523;&#32076;&#39443;&#12399;XX&#24180;&#12391;&#12377;&#10;&#10;&#24471;&#24847;&#12394;&#35328;&#35486;&#12399;XX&#12391;&#12377;&#10;&#20170;&#24745;&#12435;&#12391;&#12427;&#12371;&#12392;&#12399;XX&#12391;&#12377;</span><br></pre></td></tr></table></figure>
<p>のフォーマットに合わせて自己紹介をしました。</p>
<p>自己紹介後はまずLTタイムです。</p>
<h2 id="LT">LT</h2><h3 id="LT1:_たじさん_「俺がKen_Rubinから学んだこと：SM研修報告〜たじ編〜」">LT1: たじさん 「俺がKen Rubinから学んだこと：SM研修報告〜たじ編〜」</h3><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/yXJsEdUSwvxFEm" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/masayataji/certified-scrummasterlt-ver" title="Certified scrummaster研修について(LT ver.)" target="_blank">Certified scrummaster研修について(LT ver.)</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/masayataji">Masaya Taji</a></strong> </div></p>
<p>RSGT2016で基調講演を行ったKen Rubin氏による認定スクラムマスター研修に参加し（うらやまし）そこで学んだことのお話。</p>
<p>印象に残ったのは Ken Rubinが<br><strong>テストやってないとスクラムできないよ</strong><br>と言ったというところ。</p>
<p>言葉の裏にはたくさんの意図があるんだろうけど、とりあえず<a href="https://tddbc.doorkeeper.jp/events/38369" target="_blank" rel="external">TDDブートキャンプ</a>に次回は参加しようと思いました。</p>
<h3 id="LT2:_橘_周世さん_「俺がKen_Rubinから学んだこと：SM研修報告〜周生編〜」">LT2: 橘 周世さん 「俺がKen Rubinから学んだこと：SM研修報告〜周生編〜」</h3><p>同じくKen Rubinの認定スクラムマスター研修に参加し、学んだことの話。<br>橘さんは「プロダクトオーナーに求められること」という切り口での発表でした。</p>
<p>プロダクトオーナーのことがわからんから、自分でやってみたというお話。<br>その行動力と、実現できるチームがあるということがすごいと思いました。</p>
<h3 id="LT3:_出口達也さん「ペアプロはリモートでもできる」">LT3: 出口達也さん「ペアプロはリモートでもできる」</h3><p>次はリモートでもペアプロができるというお話。<br>私もその昔リモートペアプロを試したことを思い出しました。</p>
<p>以外にもその時使ったツールと似たようなツールでペアプロしていました。<br>やり方として違ったのは、ディスプレイを2つ用意し、自分の画面と相手の画面を同時に出すということでした。</p>
<p>ツールは appear.in で画面共有して、Slackでチャットしていたそうですが、私達がぶつかったのと同じく画面共有のクオリティが問題になったそうです。</p>
<p>今後はSlackが買収した画面共有サービスのScreenheroを使って見たいとおっしゃってました。</p>
<h3 id="LT4:_川鯉光起さん_「営業活動のふりかえり共有」">LT4: 川鯉光起さん 「営業活動のふりかえり共有」</h3><p>週末起業したビジネスで、苦労したところと対応したことの発表でした。</p>
<p>仮設と懸賞をショートスパンで繰り返すことで見えてくることがあるよ的な話でした。</p>
<h2 id="発表">発表</h2><h3 id="発表1:_坂本直樹「リモート開発におけるチームビルディング」">発表1: 坂本直樹「リモート開発におけるチームビルディング」</h3><p><a href="http://www.yell4u.jp/" target="_blank" rel="external">YeLL</a>という、世界初クラウド型チームビルディングサービスでリモートチーム開発を行った時のチームビルディングのお話でした。</p>
<p>YeLLではクラウドソーシングを利用して、エンジニアを集めているため<br>エンジニアが地理的に分散しているそうです（遠いところでは台湾とかっていってたような）。</p>
<p>そんな状況で、工夫している（た）ことの事例紹介でした。</p>
<ul>
<li>やっていること<ul>
<li>リモート振り返り</li>
<li><a href="https://hackpad.com/" target="_blank" rel="external">hackpad</a>というサービスを使ってKPT形式で行っている</li>
</ul>
</li>
<li><p>やったこと</p>
<ul>
<li>ストレングスファインダー</li>
<li>インタビューシート</li>
<li>ペアを組んでインタビューシート（権利の関係で社外秘）をベースに appear.inでインタビューをおこない、その後10分くらいで相手を紹介する<br>行った結果雑談が増えたて、Slackでの質問が活発になったそうです。</li>
</ul>
</li>
<li><p>顧客との対話</p>
<ul>
<li>お客さんにオフィスに来てもらってサービスを使う上での問題意識などの話を聞く、リモートメンバーはSkypeで参加する</li>
</ul>
</li>
</ul>
<h3 id="発表2:_野村_敏昭「ぼくのスクラム」">発表2: 野村 敏昭「ぼくのスクラム」</h3><p>アジャイルサムライ横浜道場で面識のある、野村さんによる社内にいる「スクラムとかよくわからんという人向けに作った資料」（の抜粋）でした。</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/KDdOesv0HRoqsn" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/toshiaki0315/ss-58775040" title="僕のスクラム" target="_blank">僕のスクラム</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/toshiaki0315">Toshiaki Nomura</a></strong> </div></p>
<p>@ebacky さんの認定スクラムマスター研修に参加した方からよく聞くのですが。ワーキングアグリーメントを最初に決めるのは定番みたいですね。</p>
<p>スプリントレビューの後にプロダクトバックログリファインメントをおこなうというのもタイミングとしてはいいかもしれないですね。</p>
<p>「ふつうのことをふつうに継続することはとてもむずかしい」はそうだなと思いました。</p>
<h3 id="発表3:_横沢_佑輔「HCDの学びから見えたアジャイルとのシナジー、そしてリーンアジャイルHCD元年へ」">発表3: 横沢 佑輔「HCDの学びから見えたアジャイルとのシナジー、そしてリーンアジャイルHCD元年へ」</h3><p>HCDというのを初めて効いたので後で調べて見ようと思いました。</p>
<h2 id="質問タイム">質問タイム</h2><h3 id="タスクをサインアップする環境を作るのはどうやりました">タスクをサインアップする環境を作るのはどうやりました</h3><ul>
<li>ホワイトボードの前でやると自発的にやります</li>
<li>動かないタスクは気を使ってあげる</li>
</ul>
<h3 id="HCDをやるのはエンジニアですか？">HCDをやるのはエンジニアですか？</h3><ul>
<li>誰でもOKです。学校では３０人中５人位しかエンジニアがいないです</li>
</ul>
<h3 id="エンジニアがユーザーインタビューするとかそういうふうにするには">エンジニアがユーザーインタビューするとかそういうふうにするには</h3><ul>
<li>自分が積極的にやること</li>
<li>結果的にエンジニアが動くようになった</li>
</ul>
<h3 id="プロダクマネージャーって採用できますか？育てたほうがいいですか？">プロダクマネージャーって採用できますか？育てたほうがいいですか？</h3><ul>
<li>ビジネスドメインを理解するのは難しいので、育てる方が早いと思う</li>
</ul>
<h3 id="タスクはチームによって違いますという話ですが、複数チームでスクラム舌ってことですか？">タスクはチームによって違いますという話ですが、複数チームでスクラム舌ってことですか？</h3><ul>
<li>いろいろなチームで、チームメンバーが仕事できることが大切</li>
<li>誰かが休んでも他の人ができる粒度が</li>
</ul>
<h3 id="ビジネスまでスコープにするおｔバックログが変わってしまうのでそこはどうか空風してますか">ビジネスまでスコープにするおｔバックログが変わってしまうのでそこはどうか空風してますか</h3><ul>
<li>ウォーターフォールでやってます</li>
<li>コンサルはアジャイルでやってるみたいです</li>
<li>ソニーとかもやってるので、できるとおもいます。  </li>
</ul>
<h3 id="朝会で３つの質問してる時に、進捗があまりないタスクは要注意という話でしたが、進捗がないのに問題ないっていう人にはどうアプローチしますか">朝会で３つの質問してる時に、進捗があまりないタスクは要注意という話でしたが、進捗がないのに問題ないっていう人にはどうアプローチしますか</h3><ul>
<li>５時間見積もりで、しばらく動いていないタスクがあったら「どうなってるか」確認する</li>
<li>見積もりを書くことによってチームが気づけるようにする</li>
</ul>
<h3 id="見積もりの付箋ってどのくらいの大きさでやってますか？">見積もりの付箋ってどのくらいの大きさでやってますか？</h3><ul>
<li><p>サブタスクに見積もりを入れてない</p>
</li>
<li><p>親タスクが終わらない</p>
<ul>
<li>→サブタスクは進んでるけど粒度がわからないので状況がわからない</li>
<li>→サブタスクも見積もったほうがいい</li>
</ul>
</li>
</ul>
<h3 id="タスクの粒度ってどれくらいですか">タスクの粒度ってどれくらいですか</h3><ul>
<li>コード書くじゃなくて、具体的にタスクに落とす</li>
<li>タスクの時間は一番デキる人で決める<br>→なんでデキる人と同じ時間でできないかと改善のきっかけになる by kiro</li>
<li>デキる人に追いつかない時に精神的にきつくならないですか<br>→ドーナツをだします<br>→ロケーションが一緒じゃないときついです</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="感想">感想</h1><p>渋谷のヒカリエ31階にある株式会社medibaで開催された<a href="https://agile-hiyoko-club.doorkeeper.jp/events/38245" target="_blank" rel="exter]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「ここらで広告コピーの本当の話をします。」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/26/20160225-reading-to-tell-the-truth-of-copy/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/26/20160225-reading-to-tell-the-truth-of-copy/</id>
    <published>2016-02-25T17:28:12.000Z</published>
    <updated>2016-02-27T15:44:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B00PCJEB86/" target="_blank" rel="external">ここらで広告コピーの本当の話をします。</a></li>
<li>読み終わった日<br>2016/2/25</li>
<li>所要時間<br>２週間</li>
<li>購入元<br>図書館で借りてきた</li>
<li>価格<br>¥0</li>
</ul>
<h1 id="感想">感想</h1><p>今年に入ってから個人的に開催している技術書じゃない本を読もうキャンペーンの一環で読んでみました。<br>広告や、マーケティングの話と言うのはいままでほとんど触れてこなかったので、新しい発見があるかなと期待して読んでみました。</p>
<p>この直前に読んだ <a href="http://www.amazon.co.jp/dp/404602836X/" target="_blank" rel="external">100円のコーラを1000円で売る方法 コミック版</a> や <a href="http://www.amazon.co.jp/dp/4492502130/" target="_blank" rel="external">ラーメン二郎にまなぶ経営学 ―大行列をつくる26（ジロー）の秘訣</a> は、マーケティングの考え方や手法を軸に、それぞれをどういった局面でどう使うかについてカタログ的に書かれていましたが、<br>この書籍はちょっと違い、どうしたら顧客（の製品）の価値を高めることができるかということについてを主題に書かれています。</p>
<p>競合優位性、ターゲット設定など、語られている手法は多くないものの、どのように考え、組み合わせれば、より価値を高められるかということが筆者の体験を元に書かれているため、非常に読み応えがありました。</p>
<p>文体も自分の好みに合っていたのか、ぐんぐん読み進められる読みやすさと、今までの自分のが上辺をなぞってるだけだったなぁと認識させてくれる内容で、おすすめできる一冊です。</p>
<p><strong><em>クライアントの要望に応えられないのは三流、クライアントの要望にしか応えられないのは二流、クライアントの要望以上を出すのが一流</em></strong></p>
<p>これは著者の先輩クリエイティブディレクターの言葉だ層ですが、エンジニアにもそのまま当てはまると思います。私も速く一流になりたいものです。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B00PCJEB86/" target="_blank" rel="external">ここらで広告コピーの本当の話をします。</a]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/2/15 【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Java EE 7特集 に参加しました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/15/20160215-jjug-javaee7/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/15/20160215-jjug-javaee7/</id>
    <published>2016-02-15T10:02:01.000Z</published>
    <updated>2016-03-01T02:39:57.000Z</updated>
    <content type="html"><![CDATA[<p>2016/2/15 に開催された<br><a href="http://www.java-users.jp/?p=2350" target="_blank" rel="external">【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Java EE 7特集</a><br>に参加してきました。</p>
<h1 id="感想">感想</h1><p>仕事でSpringBatchを使っていたので、JBatchとSpringBatchの差分を知りたくて参加してみました。</p>
<p>結果的には、申し訳ないですがワタシ的にはSpringでいいかなと思いました。<br>機能的にはJBatch,SpringBatchどっちを選んでも大差無いように思えましたが、</p>
<ul>
<li>JBatchは設定がXML一択</li>
<li>JavaEEを使う積極的なモチベーションがわかなかった<br>という2点で、現段階ではまだSpringの方がいいかなと思いました。</li>
</ul>
<p>久しぶりにJavaEEの話を聞いた感想としては<br>「JavaEEも仕事で使ってもいいかな」<br>と思える様になったというところでしょうか。</p>
<p>自分の JavaEE = 地雷源 というステレオタイプを改めてくれるきっかけになったのは嬉しかったです。</p>
<p>登壇者の方が、中の方だったので、Springと比べた時の長所短所など、Java全体で見たところのJavaEEという感じの話があまりなかったのは残念でした。</p>
<hr>
<p>以下、当日のメモです</p>
<h2 id="Java_EE_7徹底入門_概要説明_(猪瀬さん)">Java EE 7徹底入門 概要説明 (猪瀬さん)</h2><h3 id="書籍で目指したこと">書籍で目指したこと</h3><p>自然な日本語で実践的な機能に絞って完全に動作するサンプルを<br>→職場でJavaEE使おうと思った時に使える本にする</p>
<h3 id="出版してみて">出版してみて</h3><p>誤記が多い<br>→誤記は正誤表を確認してね。<br>→積極的にこっちを更新しているので</p>
<p>JavaEE日本語情報が増えてきた<br>→採用される候補になり訳すなった</p>
<h3 id="事件">事件</h3><p><strong>てらだよしお退職</strong></p>
<h3 id="白猫本と読んでね">白猫本と読んでね</h3><p>→スマホゲームとかぶる問題<br>→ググラビリティ低い！</p>
<h2 id="プレゼンテーション層の開発_JSF_(加藤田さん)">プレゼンテーション層の開発 JSF (加藤田さん)</h2><h3 id="JSF使ったことある人">JSF使ったことある人</h3><p>→4割→浸透してきた？</p>
<h3 id="書籍用のサンプルアプリケーション">書籍用のサンプルアプリケーション</h3><p>ナレッジシェア</p>
<h3 id="JSF_フェースレット">JSF フェースレット</h3><ul>
<li><p>XHTMLベース?！ だと?！</p>
</li>
<li><p>スクリプトレットが記述できない<br>→ロジックが強制的に分離される</p>
</li>
</ul>
<h3 id="書籍ではふれなかったこと">書籍ではふれなかったこと</h3><h4 id="JSFのより詳細なこと">JSFのより詳細なこと</h4><ul>
<li>カスタムコンポーネント<ul>
<li>独自のタグライブラリを作る</li>
</ul>
</li>
<li>イベント<ul>
<li>ValueChangeイベントとか<br>→ 値を変更してボタンを押したタイミングで発火<br>→イマイチつかえない</li>
</ul>
</li>
<li>BeanValdation<ul>
<li>グループ機能<br>→ 登録画面と変更画面でちょっと違うとかに対応</li>
</ul>
</li>
<li>EL<ul>
<li>lambda式とか<br>→EL3.0 で追加された機能とか</li>
</ul>
</li>
</ul>
<h4 id="JavaEE8">JavaEE8</h4><p>どうなるJSF2.3?</p>
<ul>
<li>WebSocket対応 → これが目玉！<ul>
<li>JSF = なるべくJavaScriptを使わないで開発しようというポリシー</li>
</ul>
</li>
<li>マルチフィールドバリデーション<ul>
<li>関連チェックができるようになる</li>
</ul>
</li>
<li>あと改善系少々。。。</li>
</ul>
<h4 id="MVC1-0">MVC1.0</h4><ul>
<li>StrutsみたいなAction機構で開発するフレームワーク<br>→ JAX-RSベース → 基本的にアノーテーションは同じ<br>→ ビューはfacelet,JSP</li>
</ul>
<h5 id="今後のプレゼンテーション">今後のプレゼンテーション</h5><ul>
<li>JSF</li>
<li>JAX-RS + Client MVC</li>
<li>MVC 1.0 + WebComponents?<br>になってくんじゃないかとおもいます。<br>→どれに行ってもコンポーネント指向に収束していく。（のか？）</li>
</ul>
<h4 id="JSF関連ライブラリ">JSF関連ライブラリ</h4><ul>
<li>コンポーネント系<br>→ 画面をリッチに<br>→ PrimeFaces</li>
<li><p>ライブラリ系<br>→ 開発を容易に<br>→ OmniFaces PrettyFaces</p>
</li>
<li><p>PrimeFaces<br>→画面系最有力</p>
</li>
<li><p>OmniFaces<br>→個人ベースだから使用する際は注意（とはこれいかに？）</p>
</li>
</ul>
<h3 id="まとめ">まとめ</h3><ul>
<li>JSFは成熟している</li>
</ul>
<h2 id="ビジネスロジック層の開発_CDI,EJB_(羽生田さん)">ビジネスロジック層の開発 CDI,EJB (羽生田さん)</h2><p>CDI, EJB 排他的な関係ではない→組み合わせて解決するのが良いとおもってる</p>
<h3 id="CDI">CDI</h3><p>POJOにスコープ定義さえあれば@Injectで好きにInjectionできる！</p>
<ul>
<li>@ConversationScoped<br>→好きにライフサイクルが定義できる</li>
</ul>
<h4 id="CDI-1">CDI</h4><ul>
<li>簡単便利</li>
<li>スコープ定義だけ覚えれば使える</li>
</ul>
<h4 id="CDI_コンテナ">CDI コンテナ</h4><ul>
<li>Weld<br>→Weldのバージョンが何かを把握していないと死ねる<br>→APサーバーのバグより前にWeldのバグを調べたほうがいいくらいの勢い</li>
</ul>
<h5 id="アクセス用API">アクセス用API</h5><ul>
<li><p>CDI</p>
<ul>
<li>CDI.current()　でとれる</li>
<li>CDI.select(MyBean.class).get(); とかできる</li>
</ul>
</li>
<li><p>CDIProvider</p>
</li>
<li><p>BeanManager</p>
<ul>
<li>Portable Extensionを担う<br>→いろいろできるけど使いすぎに注意→障害時におえなくなる？</li>
</ul>
</li>
<li><p>LifecycleEvents<br>→コンテナ周りのイベントをフックできる</p>
</li>
</ul>
<h4 id="どんな人むけ？">どんな人むけ？</h4><p>→APサーバーとかコンテナに任せておけない</p>
<p>→Weldの実装が変わったら死ねるので気をつけよう</p>
<h4 id="雑感">雑感</h4><ul>
<li>CDIコンテナの動きとか、インジェクションどの位しているのかとかを制御したい（時があるらしい）<br>→CDIビーンのライフサイクルウォッチするようなものが作りたい</li>
</ul>
<h4 id="@ConversationScoped">@ConversationScoped</h4><h3 id="CDIとトランザクション">CDIとトランザクション</h3><ul>
<li>@Transactional<ul>
<li>トランザクション境界</li>
</ul>
</li>
<li>@TransactionScoped<br>いま有効なJTAトランザクションの実行に合わせたライフサイクル<br>→トランザクションに合わせたビーンがほしい時とか</li>
</ul>
<p>(JavaEEをずっとやってきた感じでSpringと比べてどうとかそういうのはやっぱりないんだねぇ)</p>
<h2 id="バッチアプリケーションの開発_jBatch_(猪瀬さん)">バッチアプリケーションの開発 jBatch (猪瀬さん)</h2><h3 id="JBatchとは">JBatchとは</h3><p>→JSR-352<br>→SpringBatchから多くを継承<br>→SpringBatchの方が高機能<br>→SpringBatchの一般的なところを拾って標準化したもの</p>
<h3 id="Why_JBatch">Why JBatch</h3><ul>
<li>スレッドで軽量</li>
<li>ライブラリ共用できる</li>
<li>開始停止の仕組みが用意されている</li>
</ul>
<p>###ジョブとステップ<br>Jobの中にステップがある<br>→設定は <strong>XML</strong> <strong>XML</strong> <strong>XML</strong></p>
<h3 id="ジョブとステップの分離">ジョブとステップの分離</h3><ul>
<li>古くはホスト時代に遡る <strong>JCL</strong></li>
</ul>
<h3 id="ステップの種類">ステップの種類</h3><ul>
<li>チャンク型<br>→Reader/Processor/Writer形式</li>
<li>バッチレット型<br>→シンプルなやつ<br>→ SpringBatchとおなじ</li>
</ul>
<h3 id="補助機能">補助機能</h3><h4 id="ジョブリポジトリ">ジョブリポジトリ</h4><p>→Glassfishには管理画面があって、一覧で見えるとか！</p>
<h4 id="リスナ">リスナ</h4><p>→SpringBatchとおなじ</p>
<h4 id="コンテキスト">コンテキスト</h4><ul>
<li>JobContext<br>→永続化されない</li>
<li>StepContext<br>→永続化される</li>
</ul>
<h4 id="メトリック">メトリック</h4><p>→ステップの統計を取れるAPI<br>→APサーバーでも確認できる</p>
<h3 id="本に書いていない">本に書いていない</h3><ul>
<li>ステップパーティショニングという機能があるよ！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016/2/15 に開催された<br><a href="http://www.java-users.jp/?p=2350" target="_blank" rel="external">【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Ja]]>
    </summary>
    
      <category term="JJUG" scheme="http://yenjoji.github.io/pages/pages/tags/JJUG/"/>
    
      <category term="java" scheme="http://yenjoji.github.io/pages/pages/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「伝える力」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/07/20160207-read-power-of-inform/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/07/20160207-read-power-of-inform/</id>
    <published>2016-02-06T16:14:42.000Z</published>
    <updated>2016-03-05T18:04:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4569690815/" target="_blank" rel="external">伝える力</a></li>
<li>読み終わった日<br>2016/2/7</li>
<li>所要時間<br>3時間くらい？</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥100</li>
</ul>
<h1 id="感想">感想</h1><p>テレビなどでお馴染みの池上彰さんの著書です。</p>
<p>池上さんの実体験に基づく、人に物事を伝える伝え方、と伝えるための力の鍛え方が書かれています。</p>
<p>”まず「自分は何も知らない」ことを知り、他人から謙虚に学ぶことです。この姿勢さえ持ち続けていれば、コミュニケーション能力は確実に向上していきます”<br>”「利便性」という言葉は便利ですが（中略）便利な言葉を使っていると、使う人が思考停止になってしまう恐れがあることを、知っておきましょう。”</p>
<p>など、心構えから、具体的な注意しなければいけないポイントなど「伝える力」を高めるためのプラクティス、エッセンスが詰まっています。<br>さすがと言うか文章も読みやすいですし、ボリュームも新書サイズなので、サラッと読んで見ることをおすすめします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4569690815/" target="_blank" rel="external">伝える力</a></li>
<li>読み終わ]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「ラーメン二郎にまなぶ経営学 ―大行列をつくる26（ジロー）の秘訣」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/24/20160124-business-management-learned-from-jiro/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/24/20160124-business-management-learned-from-jiro/</id>
    <published>2016-01-24T03:38:51.000Z</published>
    <updated>2016-02-27T15:33:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4492502130/" target="_blank" rel="external">ラーメン二郎にまなぶ経営学 ―大行列をつくる26（ジロー）の秘訣</a></li>
<li>読み終わった日<br>2016/1/24</li>
<li>所要時間<br>12時間くらい？（のべ14日間）</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥200</li>
</ul>
<h1 id="感想">感想</h1><p><a href="http://www.amazon.co.jp/dp/4492502130/" target="_blank" rel="external">ラーメン二郎にまなぶ経営学 ―大行列をつくる26（ジロー）の秘訣</a></p>
<p>昨年の6月に職場の先輩ジロリアンにエスコートしてもらい、ラーメン二郎目黒店を経験してよりラーメン二郎がちょっとしたブームになっていた事もあり手にとってみました。</p>
<p>内容としては、マーケティングの基本的な考え方が時に自然に、時に若干強引にラーメン二郎と絡めて解説されています。</p>
<p>ラーメン二郎が好きでマーケティングに初心者の私のような方にはおすすめです。<br>楽しく読めると思います。（私は楽しかったです）</p>
<p>著者の二郎への愛情と、時に自然に時に強引に二郎と経営学（マーケティング）的な考え方を解説いく方式は、二郎好きな私にとっては飽きずに楽しく読めて良かったです。<br>肝心の内容も、マーケティングに用いる様々な考え方が解説されており、初心者の私でも特に挫折することなく読めました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4492502130/" target="_blank" rel="external">ラーメン二郎にまなぶ経営学 ―大行列をつくる]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/1/19 Regional SCRUM GATHERING® Tokyo 2016 に参加しました（二日目）]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/19/20160119-rsgt2016-day2/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/19/20160119-rsgt2016-day2/</id>
    <published>2016-01-19T01:03:26.000Z</published>
    <updated>2016-01-27T05:11:32.000Z</updated>
    <content type="html"><![CDATA[<p>1/18,19の二日間にわたって開催された <a href="http://2016.scrumgatheringtokyo.org/#top" target="_blank" rel="external">Regional SCRUM GATHERING® Tokyo 2016</a>に参加してきました。<br>一日目に降った雪は残っているものの、2日目はとくに遅延もなく会場に着けました。</p>
<p><a href="http://togetter.com/li/927646" target="_blank" rel="external">togetter</a> はこちら</p>
<h1 id="Economically_Sensible_Scrum">Economically Sensible Scrum</h1><p><a href="http://www.amazon.co.jp/dp/4798130508/）の著者である、[Kenneth Rubin](http://www.innolution.com/" target="_blank" rel="external">エッセンシャルスクラム</a>氏によるKeyNote</p>
<p><strong>経済合理的性</strong> を何度も強調していました。<br>Scrumのベストプラクティスや、こうすべきという話はもちろん根拠があって参考にすべきだが、<br>結局儲かってなんぼなので、そういう観点であえてベストプラクティスに沿わない選択をするケースもある。</p>
<p>大事なのは <strong>経済合理的性</strong> ということでした。</p>
<p>例えば、一日目のキーノートではフィーチャーチームがいいよという話だったそうですが、<br>経済的合理性がコンポーネントチームにあれば、コンポーネントチームと言う選択肢も取るべきだろうといったことも言及されていました。</p>
<p>確かに、儲からないことにはどんなに理想的なプラクティス、プロセス出会っても事業が継続できないですよねぇ。</p>
<p>「Scrumに従う必要はあるがそれだけでは十分ではない、経済合理性のあるScrumをする必要がある」</p>
<h1 id="レゴスクラムの覚醒_/_The_Lego_Scrum_Awakens">レゴスクラムの覚醒 / The Lego Scrum Awakens</h1><p><a href="http://www.slideshare.net/kdmsnr/legoscrumawakens20160119" target="_blank" rel="external">スライド</a></p>
<p>XP祭り2015の基調講演や、XPの第二版を始め様々な良書の翻訳もされている角さんによるセッション。<br>度々有償でセミナーが開催されているレゴスクラムは<br>「全体性」があり「経験学習モデル」で効果的に学習でき「開発者以外も参加」できる。<br>この点からスクラムの学習に最適という解説でした。</p>
<h2 id="レゴスクラム">レゴスクラム</h2><p><a href="http://www.lego4scrum.com/translations/" target="_blank" rel="external">レゴスクラムのマニュアルは翻訳されている</a>のでぜひやってみてくださいとのことでした。</p>
<p>印象に残ったのは「みうらじゅん＆タモリ理論」からのワークショップ疲れ→もはや「ゲームしかない！」の流れです。</p>
<p>セッションを聞いて思ったのは、初期投資は必要な物の、紙飛行機ワークショップの代わりにでもぜひやってみたいと感じ米sた。</p>
<h1 id="フィリピンのスタートアップにスクラムを導入しようとしてみたお話">フィリピンのスタートアップにスクラムを導入しようとしてみたお話</h1><p>アジア圏に可能性を感じた！と言っていたと思っていたらほんとにそっちの会社に転職して、来月からダナンに行くという藤村さんのセッション。</p>
<p>内容は<a href="http://www.slideshare.net/aratafuji/ss-57219506" target="_blank" rel="external">スライド</a>を見ていただくとして。</p>
<p>非常にアツく面白いセッションでした。</p>
<h1 id="金融系ＩＴ企業におけるスクラムへの挑戦">金融系ＩＴ企業におけるスクラムへの挑戦</h1><p>ニッセイ情報テクノロジー株式会社の社内でのScrum導入のお話。</p>
<p>publickeyで記事になってました<a href="http://www.publickey1.jp/blog/16/itregional_scrum_gathering.html" target="_blank" rel="external">前編</a><a href="http://www.publickey1.jp/blog/16/itregional_scrum_gathering1.html" target="_blank" rel="external">後編</a></p>
<h5 id="チームがScrumを導入するときに組織としてのサポートは重要">チームがScrumを導入するときに組織としてのサポートは重要</h5><ul>
<li>今までのウォータフォールベースの社内標準プロセスから逸脱する許可を得た</li>
<li>看板などの掲示物はセキュリティ的に問題ないと説得した</li>
</ul>
<h5 id="立ち上がりをスムーズにする試み">立ち上がりをスムーズにする試み</h5><ul>
<li>アジャイルコーチをおねがいした</li>
</ul>
<h5 id="周りからみて楽しく見えるような工夫をした">周りからみて楽しく見えるような工夫をした</h5><ul>
<li>スプリントごとにスローガンを決めた</li>
<li>プロジェクト公式キャラクターを作った</li>
<li>お菓子神社をつくった</li>
</ul>
<h5 id="報告に工夫をした">報告に工夫をした</h5><ul>
<li>WBSなどの旧来の報告方式から</li>
<li>プロダクトバーンアップチャート</li>
<li>スプリントバーンダウンチャート</li>
</ul>
<h5 id="やってみて">やってみて</h5><ul>
<li>価値のあるものに注力</li>
<li>フィードバック</li>
<li>テストツールが充実した</li>
<li>自主的な行動</li>
<li>コミュニケーションの活性化</li>
<li>モチベーションUP</li>
<li>自分たちでやってる感</li>
</ul>
<h1 id="People_As_the_Conveyer_of_Knowledge_(知識は人が運ぶ)">People As the Conveyer of Knowledge (知識は人が運ぶ)</h1><p>平鍋さんによるおはなし。</p>
<p>当日のスライドの日本語版の<a href="http://www.slideshare.net/hiranabe/nonakas-scrum-phronetic-leadership-and-requirements-development" target="_blank" rel="external">スライド</a></p>
<ul>
<li>スクラムは海外発祥と思っているかもしれませんが、その源流は日本人が発表した<a href="https://hbr.org/1986/01/the-new-new-product-development-game" target="_blank" rel="external">論文</a></li>
<li>SECIモデルを利用してのプロダクト開発には暗黙知の共有が重要である。</li>
<li>それ故プロダクト開発は（角さんのセッションでもあった）「経験学習モデル」と学びが重要。<ul>
<li>松下電器がホームベーカリーを開発した時はエンジニアが一番好きなパンを作っている職人に弟子入りした<ul>
<li>知識は暗黙知が多く、ドキュメントだけでは伝えられない</li>
<li>ソフトウェアは共感で繋いでいく</li>
</ul>
</li>
</ul>
</li>
<li>究極のプロダクトオーナーは何を作るのかを共感</li>
</ul>
<h3 id="野中先生はヨーダ"><strong>野中先生はヨーダ</strong></h3><ul>
<li><p>とあるセミナーでの質問「ステークホルダーが多くて調整が大変です、どうすればいいでしょう」</p>
<ul>
<li>合宿をしなさい</li>
</ul>
</li>
<li><p>合宿をすると一日目で形式知ができる</p>
<ul>
<li>食事して、メンバーのバックグラウンドがわかり</li>
<li>なぜここにいるのかというはなしになり</li>
<li><strong>そこからプロダクト開発の話が始まる</strong></li>
</ul>
</li>
</ul>
<hr>
<h1 id="以下メモ。">以下メモ。</h1><h1 id="RSGT2016_Day_2_Scrum_alliance_talk">RSGT2016 Day 2 Scrum alliance talk</h1><p>Forbs 100 -&gt; 今は一社しか残っていない→変化に適用できていない→変化に適用することが必要</p>
<h1 id="Economically_Sensible_Scrum-1">Economically Sensible Scrum</h1><p>大きな組織ではチームレベルではScrumがうまく行っているが、収益ができてない<br>→経済的合理性がないから<br>→阻害要因<br><strong>経済合理性のあるスクラムをやってほしい</strong></p>
<h3 id="Scrumの概要説明">Scrumの概要説明</h3><p>→ Scrumは成功に必要だが、十分ではない</p>
<p>Scrumに違反しない＝Scrumで成功 とはいえない</p>
<h2 id="4つの阻害要因">4つの阻害要因</h2><ul>
<li>アジャイル原則に沿ってない</li>
<li>アジャイルの原則を社内に適用できていない</li>
<li><p>経済合理性が考慮されていない？</p>
</li>
<li><p>経済合理性の中でアジャイル原則を適当できていない</p>
</li>
</ul>
<p>→ スクラムとその原則を理解する必要がある</p>
<h2 id="経済合理性のあるScrum">経済合理性のあるScrum</h2><p>ライフサイクルプロフィット<br>→違った変数で表現されるプロダクトの価値を比べる時の尺度？</p>
<h3 id="遅延">遅延</h3><h3 id="変更コスト">変更コスト</h3><h3 id="JITの誤解">JITの誤解</h3><p>ScrumなのでJITでやるます→見通しは立てません は間違い→バランスが必要<br>→見通ししすぎ→推測しすぎ沼<br>→すべてをJITで→Sprint1に入ってストーリー作るの？<br>→事前作業は必要なやる、だがやり過ぎない</p>
<h3 id="WIPの問題">WIPの問題</h3><p>ソフトウェアの在庫<br>→見えないから、ないと言われがち<br>→在庫を見える化すればいい</p>
<p>ソフトウェア開発の最もかかるコスト<br>→人件費<br>→テスターが60%しか稼働していなかったらそれは無駄ですね<br>→Projectを掛け持ちして稼働率を100%にする→ムダがなくなりました→これはだめだよね。</p>
<p>リレーのメタファ<br>→リレー選手の稼働率は25%<br>→残りの75%はどうする？<br>→すきま時間に別の競技に出る<br>→そうではない<br>→リレーの目的からすれば稼働率100%ではなくて、25%でバトンを誰よりも早く繋げば最も価値がある。<br>→稼働率100%はプロダクトの価値を高めない、収益性は上がらない。<br>→バトンがつながらない時のロス</p>
<p>[参考]バリューストリームマップ</p>
<p>Idle Workに注目しない！</p>
<p>キューイングすることの無駄<br>→Fast flexible flow</p>
<h3 id="計画">計画</h3><h3 id="バリューチェーン">バリューチェーン</h3><h3 id="Portfolio_Planning">Portfolio Planning</h3><ul>
<li><p>遅い車（トラクター）<br>→ボトルネックになる→遅延コストがかかる</p>
</li>
<li><p>アジャイルの原則をポートフォリオレベルでは使わない</p>
</li>
</ul>
<h3 id="パートナー">パートナー</h3><p>→アジャイル開発の契約書を作るべき</p>
<h3 id="変化への抵抗">変化への抵抗</h3><p>→ 変わることに対して抵抗勢力がある</p>
<h3 id="全体が見えていない">全体が見えていない</h3><p>→ システムレベルでの最適化をすべき</p>
<h2 id="組織構造を経済合理性のある形にあってない">組織構造を経済合理性のある形にあってない</h2><h3 id="マルチタスク">マルチタスク</h3><ul>
<li>稼働率を上げるためにマルチプロジェクトとか<br>→ ダメです</li>
<li><p>マルチタスクは能率を下げる</p>
<ul>
<li>1prj = 70% の付加価値を提供できる</li>
<li>5prj = 30% の付加価値しか提供できない<br>→マルチタスクは経済合理性がない</li>
</ul>
<p>2pararellだとちょっと効率が上がる<br>→ 1プロジェクト目がブロックされたら2つ目に逃げられるから？</p>
</li>
</ul>
<h3 id="T字スキル">T字スキル</h3><ul>
<li>BROAD + DEEP</li>
</ul>
<h3 id="長生きチーム">長生きチーム</h3><ul>
<li><p>プロダクトごとにチームを作るのは経済的に良くない<br>→チームを解散すべきではない</p>
</li>
<li><p>消防士<br>→チームを解散させると効率が下がる</p>
</li>
</ul>
<p>→ チームの経済効率性を考える</p>
<h4 id="チームの分け方">チームの分け方</h4><ul>
<li><p>コンポーネントチーム<br>→ GUI・Serversideなどで分割されている</p>
</li>
<li><p>フィーチャーチーム<br>→クロスファンクショナル<br>→クロスコンポーネント</p>
</li>
</ul>
<p><strong>コンポーネントチームに取ってフィーチャーなものが、フィーチャーチームにはタスクである</strong></p>
<p>アジャイル界隈ではコンポーネントチームは良くない、フィーチャーチームがおすすめと言われている</p>
<p>コンポーネントチームで複数のフィーチャーを実装しようとすると、バトンが下に落ちた状態になる。<br>→チーム間のコンセンサスが取れない？？</p>
<ul>
<li>この辺よくわからん？？？</li>
</ul>
<h3 id="経済性にしたがってスケールしましょう">経済性にしたがってスケールしましょう</h3><h2 id="まとめ">まとめ</h2><ul>
<li>Scrumに従う必要はあるがそれだけでは十分ではない、経済合理性のあるScrumをする必要がある</li>
</ul>
<h2 id="質問">質問</h2><ul>
<li><p>コンポーネントチームのPO ＝ テックリード<br>→ テックリードはビジネスをあまり考えない<br>→ コンポーネントチームをなくす時も経済的な合理性があるならよい</p>
<ul>
<li>消防署は東京で一個とかはありえないですよね<br>→ そういった場合は各区に消防署はあるべき</li>
</ul>
</li>
</ul>
<h3 id="フィーチャーチーム、コンポーネントチームにするにせよ、マルチタスクと考えるとT型スキルにはならないのでは？">フィーチャーチーム、コンポーネントチームにするにせよ、マルチタスクと考えるとT型スキルにはならないのでは？</h3><p>→チームにはT型にはなってほしい<br>→クロスファンクショナル</p>
<p>→マルチタスキングは完全には解決できない<br>→フィーチャーチームとコンポーネントチーム同時に所属するのは正しいが、マルチタスキングしちゃいけないという意味では正しくない</p>
<h1 id="レゴスクラムの覚醒_/_The_Lego_Scrum_Awakens-1">レゴスクラムの覚醒 / The Lego Scrum Awakens</h1><p><a href="http://www.slideshare.net/kdmsnr/legoscrumawakens20160119" target="_blank" rel="external">http://www.slideshare.net/kdmsnr/legoscrumawakens20160119</a></p>
<h2 id="レゴスクラム-1">レゴスクラム</h2><p>→翻訳してるのでやってみてね。</p>
<h3 id="OpenStack">OpenStack</h3><p>→OpenSourceのモデルをレゴで表現してみよう<br>→フリーのコントリビューターがいるのがほかと違う</p>
<p><strong><em>アジャイル開発の体験に最適</em></strong></p>
<h2 id="レゴスクラムの3つの特徴">レゴスクラムの3つの特徴</h2><h3 id="経験による学習ができる">経験による学習ができる</h3><p>スクラムガイドと実践の間を埋めるためのレゴスクラム</p>
<p>経験と教育<br>→教育とは日常に溶け込んで行くべきだ</p>
<p>経験学習モデル<br>→まず経験する</p>
<p>みうらじゅん＆タモリ理論</p>
<p>ワークショップ疲れ→もはや「ゲームしかない！」の流れ</p>
<h3 id="全体性が備わっている">全体性が備わっている</h3><p>ホールネス<br>→ぶぶんぶぶんで違っていても全体として合っていればOK<br>→見積もりとか、部分のトレーニングは意味がないのではないか？</p>
<p>デイリースクラムが時間の関係でない、後で研修する。<br>時間が短い1スプリント7分<br>→それ以外はスクラムそのもの</p>
<h3 id="開発者以外でも参加できる">開発者以外でも参加できる</h3><p>スクラムチーム以外、関係者、ユーザーすらも！</p>
<h1 id="フィリピンのスタートアップにスクラムを導入しようとしてみたお話-1">フィリピンのスタートアップにスクラムを導入しようとしてみたお話</h1><h2 id="経験">経験</h2><p>→食いっぱぐれない！！！！！<br>→金を払ってでも得たい経験！！！</p>
<h2 id="0週目">0週目</h2><ul>
<li><p>明確ではないけどなんか良くないよねという状態</p>
</li>
<li><p>勉強はしてくれなかった！！</p>
</li>
</ul>
<h2 id="1週目">1週目</h2><ul>
<li><p>KPT2</p>
</li>
<li><p>日本とフィリピント特に変わらないKPT</p>
</li>
</ul>
<h2 id="2週目">2週目</h2><p>だんだん暇になる→隙間タスクをやっていた！</p>
<h1 id="金融系ＩＴ企業におけるスクラムへの挑戦-1">金融系ＩＴ企業におけるスクラムへの挑戦</h1><p>WFとスクラムを足した感じ<br>→要件定義＋基本設計 WF<br>→予算承認<br>→開発以降はスクラム</p>
<p>アジャイル→生産性が高いという噂<br> →途中からメンバーを追加した 開発T6人 PO2人中野さんが忙しいのでサポートとして一人入れた</p>
<p> 導入は1Day研修を受けた</p>
<p> 社内の標準開発工程を適応しない申請をした！</p>
<p> 看板も掲示したままでOKとした。</p>
<p> アジャイルコーチをお願いした→豆蔵山田さん</p>
<h3 id="デイリースクラム">デイリースクラム</h3><p> →今日やることは最後にみんなで決める<br> →報告チックになっていたので、ファシリテートは持ち回りにした</p>
<h3 id="KPT">KPT</h3><p> Tryの確認をスプリント中間で行う</p>
<h3 id="コミュニケーションの活性化">コミュニケーションの活性化</h3><p> →周りから見て楽しそうに見えるように</p>
<ul>
<li><p>スローガンをスプリントごとに決める<br>→ POが20分以内に今スプリントでやることを踏まえて決める</p>
</li>
<li><p>キャラクターの作成</p>
</li>
<li><p>お菓子神社</p>
</li>
<li><p>HELPカード  </p>
</li>
</ul>
<h2 id="課題">課題</h2><h3 id="進捗と品質の報告">進捗と品質の報告</h3><ul>
<li>WF<ul>
<li>計画通りか</li>
</ul>
</li>
<li>Agile<ul>
<li>実績を計測して</li>
<li>収束予測する</li>
</ul>
</li>
</ul>
<h3 id="進捗の報告方法">進捗の報告方法</h3><ul>
<li><p>プロジェクト<br>→プロダクトバーンアップ</p>
</li>
<li><p>スプリント<br>→バーンダウンチャート</p>
</li>
</ul>
<h3 id="品質の報告">品質の報告</h3><ul>
<li>ツールを導入して計測した</li>
</ul>
<h2 id="成功の要因">成功の要因</h2><h3 id="カイゼンの繰り返し">カイゼンの繰り返し</h3><ul>
<li>ルールをシンプルにする</li>
<li>効果的でないならやめる</li>
</ul>
<h3 id="チームを取り巻く環境">チームを取り巻く環境</h3><ul>
<li>外部からの阻害が少なかった<br>→初アジャイルなので、暖かく見守ってもらえた</li>
<li>メンバー<br>→自己組織化できてた<br>→リードするキャラがいた</li>
<li>アジャイルコーチを活用した<br>→立ち上げがスムーズに<br>→ちょっとしたことが相談できる</li>
</ul>
<h3 id="プロダクトへの効果">プロダクトへの効果</h3><ul>
<li>価値のあるものに注力</li>
<li>フィードバック</li>
<li>テストツールが充実した</li>
</ul>
<h3 id="意識">意識</h3><ul>
<li>自主的な行動</li>
<li>コミュニケーションの活性化</li>
<li>モチベーションUP</li>
<li>たのしいかいはつ<br>→自分たちでやってる感</li>
</ul>
<h2 id="今後の展望">今後の展望</h2><h3 id="社内への展開">社内への展開</h3><h3 id="社内開発支援組織を設置">社内開発支援組織を設置</h3><h3 id="複数チーム体制での開発">複数チーム体制での開発</h3><h3 id="顧客も含めた開発への適用">顧客も含めた開発への適用</h3><h1 id="People_As_the_Conveyer_of_Knowledge_(知識は人が運ぶ)-1">People As the Conveyer of Knowledge (知識は人が運ぶ)</h1><p>Slide日本語版あるよ→SlideShare<br><a href="http://www.slideshare.net/hiranabe/nonakas-scrum-phronetic-leadership-and-requirements-development" target="_blank" rel="external">http://www.slideshare.net/hiranabe/nonakas-scrum-phronetic-leadership-and-requirements-development</a></p>
<p>アジャイル開発のコンセプトは日本が寄与している</p>
<p>海外プレゼン時にはその地で流行っているアニメを入れるとつかめる</p>
<h2 id="The_new_new_product_development_game_が_Scrumにあたえた影響">The new new product development game が Scrumにあたえた影響</h2><ul>
<li>Scrumの黒い本<br>→ 扉の次のページに引用</li>
<li><p>リレーレースのモデルからラグビーのモデルへ</p>
</li>
<li><p>New New</p>
<ul>
<li>新しい</li>
<li>New Product</li>
<li>新しい新製品開発</li>
</ul>
</li>
<li><p>Scrumを編み出すときに100くらいの論文からこれだと選ばれた</p>
</li>
<li><p>TypeC Scrum の語源もこれ</p>
</li>
<li><p>プロダクト開発と同じく、関係者を巻き込んで行く進め方</p>
</li>
<li><p>野中先生<br>→ Yoda</p>
</li>
<li><p>アメリカ海兵隊<br>→ クロスファンクショナル</p>
</li>
<li><p>Wise Leadership<br>→Phtonetic Leadership</p>
</li>
<li><p>TypeC Scrum<br>→ 最初は刺し身にしようとした→ボツ</p>
</li>
</ul>
<h2 id="SECI-Model">SECI-Model</h2><h3 id="暗黙知">暗黙知</h3><ul>
<li>more then you can tell</li>
<li>やってみるほうが早いこと、一緒にやって覚えること<br>→自転車の乗り方とか</li>
<li>同じ体験をすることによって伝わる<br>→言葉がなくてもつたわる</li>
<li>ミラーニューロン<br>→暗黙知暗黙知伝達</li>
</ul>
<h3 id="形式知">形式知</h3><ul>
<li>パターン、マニュアルなど</li>
<li><p>知がポータブルになった</p>
</li>
<li><p>Sticky information<br>→暗黙知にちかい</p>
</li>
</ul>
<h3 id="SECI_Model">SECI Model</h3><ul>
<li><p>T-T</p>
</li>
<li><p>T-E</p>
</li>
<li><p>E-E</p>
<ul>
<li>組み合わせ特許</li>
</ul>
</li>
<li><p>E-T</p>
</li>
</ul>
<h3 id="Story">Story</h3><ul>
<li>知識創造企業</li>
</ul>
<h4 id="松下電器がホームベーカリーを作った時のはなし">松下電器がホームベーカリーを作った時のはなし</h4><p>野中先生</p>
<ul>
<li><p>新製品開発の最初は暗黙知にある<br>→想いからはじまる</p>
</li>
<li><p>PDCA → イクナイ → Planする前にみんなで何かをしよう→暗黙知の交換</p>
</li>
<li><p>パン焼き職人に弟子入り<br>→ 最終的には開発チーム<br>→ 実験＋実装＋暗黙知暗黙知変換<br>→ パン焼き器できた<br>パン焼き職人の暗黙知からリブを作るという形式知になった<br>→ SECIモデル<br>→ 新製品開発においてT-E変換がいかに大事か</p>
</li>
</ul>
<h3 id="Design_Thinking">Design Thinking</h3><p>→最初に「共感」がある！</p>
<ul>
<li><p>Role Playing<br>→実際のユーザーの共感をトリガーに</p>
</li>
<li><p>Bodystorming<br>→ 体で感じろ</p>
</li>
</ul>
<h4 id="T-T">T-T</h4><ul>
<li>pair programming</li>
</ul>
<h3 id="知識はどこからきてどこへ行くのか">知識はどこからきてどこへ行くのか</h3><ul>
<li>知識は暗黙知が多い</li>
<li><p>ソフトウェア開発は共感で繋いでいく<br>→形式知、ドキュメントだけでは伝えられない</p>
</li>
<li><p>Honda<br>→ 作ろうと思っているもののユーザー視点になる<br>→ 共感して、もちかえる</p>
</li>
</ul>
<p>究極のPOは何を作るかを共感</p>
<p>Scrum<br>→ 知識の運びては人であると宣言したもの</p>
<p>ステークホルダーが多くて調整が大変だ<br>→ 合宿をしなさい</p>
<p>→一日目で形式知ができる<br>→食事して、メンバーのバックグラウンドがわかり<br>→なぜここにいるのかというはなしになり<br>→そこからプロダクト開発の話が始まる</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1/18,19の二日間にわたって開催された <a href="http://2016.scrumgatheringtokyo.org/#top" target="_blank" rel="external">Regional SCRUM GATHERING® Tokyo 2]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="scrum" scheme="http://yenjoji.github.io/pages/pages/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/1/18 Regional SCRUM GATHERING® Tokyo 2016 に参加しました（一日目）]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/18/20160118-rsgt2016-day1/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/18/20160118-rsgt2016-day1/</id>
    <published>2016-01-18T04:13:57.000Z</published>
    <updated>2016-01-24T03:22:41.000Z</updated>
    <content type="html"><![CDATA[<p>1/18,19の二日間にわたって開催された <a href="http://2016.scrumgatheringtokyo.org/#top" target="_blank" rel="external">Regional SCRUM GATHERING® Tokyo 2016</a>に参加してきました。</p>
<p>まずは、天気予報通りといえばその通りなのですが、おかげで新宿にたどり着いた時には午前中のセッションが終わっている（＝基調講演聞き逃した！！！）という波乱の一日目の感想です。</p>
<p>togetterは<a href="http://togetter.com/li/927511" target="_blank" rel="external">こちら</a></p>
<h1 id="NexusとLeSSの概要説明、比較">NexusとLeSSの概要説明、比較</h1><p>最近話題の大規模Scrumフレームワークの中から<br>Scrumの父Ken Schwaber氏の「Nexus」と認定スクラムマスター研修の講師でお馴染みのBas Vodde氏の「LeSS」の概要とその差分についての解説のセッションでした。</p>
<p>資料はそのうち上がると思うので、内容はそっちを見ていただくとして、<a href="http://www.slideshare.net/takubon/nexus-and-less-rsgt2016" target="_blank" rel="external">資料が公開されました</a><br>聞いてみた個人的な感想としてはNexusは依存関係の最小化にこだわったり、イベントに関しても代表者でやるイベントとチームでやるイベントをかっちり分けている印象があり、シンプルさにこだわっている感じを受けました。<br>一方LeSSは、通常のScrumの延長線上でありながら、大規模ゆえのチーム感の調整・協調作業ができるように最大公約数的なゆるいルールを提案している感じを受けました。</p>
<p>個人的な好みとしては、製薬が少なそうなLeSSの方が適用しやすい印象を受けました。</p>
<h1 id="生き延びよう！強い組織になろう！_-_迷わず行けよ_行けばわかるさ">生き延びよう！強い組織になろう！ - 迷わず行けよ 行けばわかるさ</h1><p>Scrumを導入して一旦うまく行ったものの、<br>そのままの勢いで周囲を巻き込もうとしたら煙たがられてしまった話とその後それをどうカイゼンしたかというお話。</p>
<p>おそらくスライドはそのうち公開されるんではないかと思います。</p>
<p>Scrumとかうまく行きだすと、なんかいい気になって「善意の押し売り」＋「正論で殴る」のコンボみたいな状況になって孤立してしまい、うまく行かなくなるような雰囲気を感じました。<br>その結果、メンバーが萎縮してしまって本当の問題が表面に現れなくなってしまっていたのかなと感じました。</p>
<p>ただ、体調を崩したタイミングで自分自身でふりかえりを行ったことを天気に、イケイケで勧める感じから、みんなの話を聞くスタンスに変わったことにより状況が良くなったと<br>やはり対話することが大切だなと、あと仲間がいると心強いなぁと感じました。</p>
<h1 id="僕らのおれおれメトリクス_/_We_metrics_in_our_own_way!">僕らのおれおれメトリクス / We metrics in our own way!</h1><p>スライドはこちら<a href="http://www.slideshare.net/yattom/we-metrics-our-own-way" target="_blank" rel="external">僕らのおれおれメトリクス / We Metrics Our Own Way!</a></p>
<p>とあるチームに対して、どのようなメトリクスを取得し、<br>それをどのようにつかってチームに考えてカイゼンしてもらったかというお話。</p>
<p>メトリクスにはお金に関わるKPIに関するメトリクスと、チームの健康状態を測るHealthcheckのメトリクスがあり。<br>何かとおろそかにされがちなHealthcheckのメトリクスも大事だよということを再認識しました。</p>
<p><strong>よいメトリクス＝NARRATE</strong></p>
<p>NARRATEの中でも、何かと値で絶対的な評価をしがちですが、絶対値ではなく値の「傾向を見る」というところと、<br>「チームが見たいと思うメトリクス」という点がメトリクスを取る上での心がけとして重要に思えました。</p>
<h1 id="スクラムとメトリクスとテストを活用するチームの事例">スクラムとメトリクスとテストを活用するチームの事例</h1><p>スライドはこちら<a href="http://www.slideshare.net/KyonMm/scrumtestmetrics-sgt2016" target="_blank" rel="external">Scrum,Test,Metrics #sgt2016</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#31169;&#12399;&#26368;&#39640;&#12398;&#12481;&#12540;&#12512;&#12398;&#19968;&#21729;&#12391;&#12354;&#12427;&#12384;&#12429;&#12358;&#12363;&#65311;&#10;&#26368;&#39640;&#12398;&#12473;&#12463;&#12521;&#12512;&#12434;&#12391;&#12365;&#12390;&#12356;&#12427;&#12398;&#12363;&#65311;&#10;&#26368;&#39640;&#12398;&#38283;&#30330;&#12434;&#12391;&#12365;&#12390;&#12356;&#12427;&#12398;&#12363;&#65311;&#10;&#12388;&#12414;&#12426;&#12289;&#26368;&#39640;&#12398;&#12473;&#12463;&#12521;&#12512;&#12289;&#26368;&#39640;&#12398;&#38283;&#30330;&#12392;&#12399;&#20309;&#12391; &#12354;&#12427;&#12398;&#12363;&#65311;&#12434;&#24120;&#12395;&#21839;&#12356;&#32154;&#12369;&#12427;&#12481;&#12540;&#12512;&#12395;&#12394;&#12427;&#24517;&#35201; &#12364;&#12354;&#12427;&#12290;</span><br></pre></td></tr></table></figure>
<p>この一節にしびれました。<br>具体的なメトリクスの例は、結構過激なのもあるので、このまま全てチームに適用できないかもしれませんが、<br>常にすべての前提を（もっとカイゼンできないか）疑う姿勢は脱帽でした。</p>
<h1 id="Technology-Driven_Development">Technology-Driven Development</h1><p>昔のスライドはこちら<a href="http://www.slideshare.net/ssuser968fab/technology-drivendevelopment-forslideshare-38323907" target="_blank" rel="external">Technology-Driven Development: Using Automation and Development Techniques to Grow an Agile Culture</a><br>きっと最新版も公開されるはず。</p>
<p>テストやデプロイ、要求の確認にツールを導入したら目に見えて効率が上がったというおはなし。<br>Agile2014で海外登壇＆発表されたセッションの日本語番ということで、技術要素などは若干古いらしいですが、<br>改善点を見つけるための計測とそれを改善し続ける取り組み、そして実際成果が出ているところは非常にすごいです。</p>
<p>社内でアジャイルアジャイル言ってる人が多いが、プロセスばっかりで、テクニカルな要素が全くおろそかだったことに対するアンチテーゼとしてのTechnicalDrivenという表現をしているという反骨精神的なものもアツくさすがアジャイル会のプロレス伝道師というところでした、</p>
<hr>
<h1 id="以下、殴り書きメモ">以下、殴り書きメモ</h1><h1 id="NexusとLeSSの概要説明、比較-1">NexusとLeSSの概要説明、比較</h1><h2 id="Nexus">Nexus</h2><h3 id="Nexus_のイベント">Nexus のイベント</h3><ul>
<li><p>プランニング</p>
<ul>
<li>Scrumとほとんど同じ</li>
<li>最初に代表者 -&gt; 次にチーム</li>
<li>チームごとにスプリントプランニングするが、場所は一緒のところで、不明点はその都度他チームに確認する</li>
</ul>
</li>
<li><p>デイリースクラム</p>
<ul>
<li>全体 -&gt; チームごと</li>
</ul>
</li>
<li><p>スプリントレビュー</p>
<ul>
<li>全チーム合同でやる</li>
<li>全部できないかもしれない -&gt; うまくやってね（としか書いていない）</li>
</ul>
</li>
<li><p>レトロスペクティブ</p>
<ul>
<li>依存関係をとくていして最小化するということが繰り返し語られている</li>
</ul>
</li>
<li><p>リファインメント</p>
<ul>
<li><p>1チームに割り振れる単位まで分割する</p>
</li>
<li><p>依存関係を洗い出す</p>
</li>
</ul>
</li>
</ul>
<h3 id="成果物">成果物</h3><ul>
<li><p>PBL</p>
<ul>
<li>全体で一つ</li>
<li>レディ<br>-&gt; 依存関係が排除されているか最小化されている -&gt; チーム単位でPBIを完成させられないと行けない</li>
</ul>
</li>
<li><p>Nexus PBL</p>
<ul>
<li>次のスプリントで行う分のバックログ</li>
</ul>
<h1 id="統合">統合</h1></li>
<li><p>作成物の透明性</p>
<ul>
<li>技術的負債</li>
</ul>
</li>
<li><p>完成の定義</p>
<ul>
<li>Nexus完成の定義</li>
</ul>
<h1 id="QA">QA</h1><ul>
<li>PBL おすすめツールは<br>→ 数チームならアナログ</li>
</ul>
<p>→ 全体はJira チームごとではアナログでやってます</p>
</li>
</ul>
<h2 id="Less">Less</h2><ul>
<li>Less 2-8 チーム向け それ以上は Less Huge</li>
<li><p>LeSS Huge</p>
</li>
<li><p>LeSS Rules 2016/1 が最新</p>
</li>
</ul>
<h3 id="構造">構造</h3><ul>
<li><p>大規模なんでマネージャーいるよね</p>
<ul>
<li>Undone Work<br>→ わざわざUndoneとかいらなくない？<br>→ 実際こうなってしまうので、（しかたなく？）定義している</li>
</ul>
</li>
</ul>
<h3 id="特徴">特徴</h3><p>基本的には1チームのScrumと同じ</p>
<h4 id="協調と統合">協調と統合</h4><ul>
<li>マルチチームのミーティングなどを定義している</li>
</ul>
<h3 id="LeSS_での役割">LeSS での役割</h3><h4 id="PO">PO</h4><ul>
<li>優先順位付けはかならず一人で演る</li>
<li>明確化はユーザー・顧客・チームでやる</li>
</ul>
<h4 id="SM">SM</h4><ul>
<li>プロダクト全体を意識するように働きかける→ チームないで凝り固まらないように</li>
<li>3チームまでは兼務OK</li>
</ul>
<h4 id="チーム">チーム</h4><ul>
<li>フィーチャーチーム</li>
</ul>
<h4 id="イベント">イベント</h4><ul>
<li>全体的なイベントが追加された</li>
</ul>
<h4 id="初期のプロダクトバックログリファインメント">初期のプロダクトバックログリファインメント</h4><ul>
<li>完成の定義</li>
<li>ビジョン</li>
</ul>
<h4 id="スプリント">スプリント</h4><h4 id="スプリントプランニング">スプリントプランニング</h4><ul>
<li>Nexusと同じ<h5 id="1部">1部</h5>全体</li>
</ul>
<h5 id="2部">2部</h5><p>各チーム</p>
<p>マルチチームスプリントプランニング<br>→ 複数チームが分担を話し合いながらプランニングする</p>
<h4 id="デイリースクラム">デイリースクラム</h4><ul>
<li>Scrum of Scrum<br>→ 週に3回程度</li>
</ul>
<h4 id="プロダクトバックログリファインメント">プロダクトバックログリファインメント</h4><h5 id="全体的な">全体的な</h5><ul>
<li>クロスチームで見積もる</li>
</ul>
<h5 id="マルチチーム">マルチチーム</h5><ul>
<li>関連するチームが集まってやる（全員or関係者）</li>
</ul>
<h5 id="チーム-1">チーム</h5><ul>
<li>チームで完結することは</li>
</ul>
<h4 id="スプリントレビュー">スプリントレビュー</h4><ul>
<li>スプリントレビューバザール<ul>
<li>複数のエリアがある大きな部屋で実施</li>
</ul>
</li>
</ul>
<h4 id="レトロスペクティブ">レトロスペクティブ</h4><ul>
<li>すべてのチームを妨げているのは、全体の問題リスト？に上げる</li>
</ul>
<h4 id="全体のレトロスペクティブ">全体のレトロスペクティブ</h4><p> *</p>
<h3 id="作成物">作成物</h3><h4 id="PBL">PBL</h4><p>Scrumと同じ</p>
<h4 id="インクリメント">インクリメント</h4><p>Scrumと同じ<br>ただし、統合されていること</p>
<h4 id="DoD">DoD</h4><ul>
<li>チームごとに拡張することはOK</li>
</ul>
<h4 id="未完了作業">未完了作業</h4><ul>
<li>リスク・遅延を引き起こす可能性のあるものに対してチームで議論する</li>
</ul>
<h3 id="まとめ">まとめ</h3><p>ガイドとルールのセットになっている</p>
<p>代表者の参加するイベント → チームのイベントの2段構え</p>
<p>協調と統合</p>
<h2 id="Nexus_と_LeSS_の比較">Nexus と LeSS の比較</h2><h3 id="Nexus-1">Nexus</h3><p>役割、作成物 イベントルールは普遍<br>シンプル10ページ</p>
<h3 id="LeSS">LeSS</h3><p>オフショアとかのコツが書いてある<br>全部やれとは言ってない</p>
<h3 id="デイリースクラム-1">デイリースクラム</h3><h4 id="Nexus-2">Nexus</h4><p>依存関係の最小化！にこだわってる<br>ソフトウェア以外にも適用しにくい</p>
<h4 id="LeSS-1">LeSS</h4><p>フィーチャーチーム<br>マネージャーに言及している</p>
<h1 id="生き延びよう！強い組織になろう！_-_迷わず行けよ_行けばわかるさ-1">生き延びよう！強い組織になろう！ - 迷わず行けよ 行けばわかるさ</h1><h2 id="前回までのあらすじ">前回までのあらすじ</h2><ul>
<li>上司と世界観と共有<br>→ 話を聞いてくれる、一緒にセミナーに出てくれる</li>
</ul>
<h2 id="鬼っ子">鬼っ子</h2><p>→ アジャイルがうまく行っているアピールが強すぎた<br>→ WF XS Agile の発生!！</p>
<h3 id="結果">結果</h3><ul>
<li>チームが見ざる言わざる聞かざる</li>
<li>形だけのスクラム<br>→ざんねんスクラム化</li>
</ul>
<h3 id="病気になった！">病気になった！</h3><p>→ 一人レトロスペクティブす@病室</p>
<h4 id="対立構造を作っていた要因">対立構造を作っていた要因</h4><h4 id="チームが困っているポイントが変わっていた">チームが困っているポイントが変わっていた</h4><p>どうやるか→どうしたらうまくいくか</p>
<p>→ コミュニティから力を借りた(2名)</p>
<h3 id="再始動">再始動</h3><ul>
<li>そっとチームに関与</li>
</ul>
<h2 id="一人でなんとかしようとしていた愚かさ">一人でなんとかしようとしていた愚かさ</h2><p>→ 先人はみんなで、チームでやれって言ってる</p>
<h2 id="人生は短い">人生は短い</h2><p>ジェフ・サザーランド</p>
<p>無駄なことでなく、有意義なことに人生を使おう</p>
<h1 id="僕らのおれおれメトリクス_/_We_metrics_in_our_own_way!-1">僕らのおれおれメトリクス / We metrics in our own way!</h1><p><a href="http://www.slideshare.net/yattom/we-metrics-our-own-way" target="_blank" rel="external">http://www.slideshare.net/yattom/we-metrics-our-own-way</a></p>
<p>見積もりに自信がないチーム<br>→バーンダウンしない</p>
<p>Tシャツ見積もりを使っていた<br>→うまくいかない</p>
<ul>
<li><p>変えた<br>Spring1-3 Tシャツ 1wスプリント<br>Sprint5- ポイント 2wスプリント</p>
</li>
<li><p>うまく行った<br>見積もり通りに行った</p>
</li>
<li><p>なんでうまく行ったの？</p>
<h2 id="分析">分析</h2><h3 id="バックログアイテムを分析">バックログアイテムを分析</h3><p>同じポイントでも5倍くらいの時間見積もりの差があった<br>→見積もりが上手にできるようになったわけではない<br>→3,5 と 8,13 で時間に差がない → うまくなってない<br>→問題か？<br>→別に問題ではない<br>→カイゼンはできているのでOK</p>
</li>
</ul>
<h3 id="オーバーワークしてない？">オーバーワークしてない？</h3><h3 id="スプリントの予実を見る（見積もり時間と実績時間）">スプリントの予実を見る（見積もり時間と実績時間）</h3><h3 id="スプリントの進捗">スプリントの進捗</h3><ul>
<li>発生したタスクと、終わったタスクをプロットしたグラフ</li>
<li>バグ、テストの分量も追加でプロット</li>
</ul>
<h3 id="Sprint8">Sprint8</h3><ul>
<li>ビジネス的な要望でやってほしいことがあった！</li>
<li>オーバーコミットでも完成出来た</li>
</ul>
<h3 id="傾向を見た">傾向を見た</h3><p>Sprint7まで 見積もり＞実績<br>Sprint8 見積もり&lt;実績</p>
<p>Sprint11,13 SprintDondeできなかった<br>→ 見積もり＜実績</p>
<h4 id="ダメな時の傾向">ダメな時の傾向</h4><ul>
<li>最後にまとめてテストをして、バグがばっと出た！！！ Sprint8,Sprint11</li>
<li>追加のタスクが多い！  Sprint13</li>
</ul>
<h2 id="メトリクスの使い方">メトリクスの使い方</h2><p>→ ヘルスチェック</p>
<ul>
<li>こんなの出てます、このパターンやばくない？ とSMが言う<br>→ チームが考えてアクションをする</li>
</ul>
<h2 id="メトリクス">メトリクス</h2><h3 id="KPI">KPI</h3><ul>
<li>お金に関わるのでみんなが奇にする<h3 id="HealthCheck">HealthCheck</h3></li>
<li>お金にかかわらないので、みんな疎かにしがち</li>
<li>傾向を見なければいけない</li>
</ul>
<h2 id="Scrum_Master">Scrum Master</h2><p> → OK！ じゃあやってみよう！</p>
<h2 id="Agile_Metrics_in_action">Agile Metrics in action</h2><h2 id="良いメトリクス">良いメトリクス</h2><ul>
<li>自然に計測できる<br>→メトリクスのためにプロセスをかえない</li>
<li>自動化<br>→手間は減らそう</li>
<li>意味がある</li>
<li>安定している<br>→傾向を見ないといけないので</li>
<li>チームに沿っている<br>→チームに合わせたメトリクス、チームが必要としている</li>
<li>タイミング<br>→ チームが使いたいタイミングで見れるようにする</li>
<li>見たい！<br>→チームが見たいと思うものを</li>
</ul>
<p>NARRATE! 物語！</p>
<h1 id="スクラムとメトリクスとテストを活用するチームの事例-1">スクラムとメトリクスとテストを活用するチームの事例</h1><h2 id="保守で4年目のプロジェクト">保守で4年目のプロジェクト</h2><p>→ 2014まではうまくやれてなかった<br>→残業多い、再計画が不正確すぎる</p>
<p>カイゼン<br> 1w Sprint<br> Scrum event is on time as possible<br> multi functional<br> ‥</p>
<p> → すべての活動を見えるようにする</p>
<h2 id="大切にしているポリシー">大切にしているポリシー</h2><p>→最高の開発、最高のスクラムとはなんであるかを常に問い続ける<br>→そのためすべての活動を疑う<br>→スクラムイベントも疑う<br>→なぜ必要なのか！</p>
<p>メトリクス<br>→予実はチームメンバーが自主的に15分単位で入れている<br>→レビューの品質も定量化されている</p>
<h2 id="テスト">テスト</h2><p>→アジャイルでテストをやるのだから、テストが別チームとか、バックログにテストとかあったらリリースできないよね？</p>
<ul>
<li>Specification By Example</li>
<li>探索的テスト</li>
<li><p>レビュー<br>→ などの高効率テストを行う</p>
</li>
<li><p>誰のようきゅうを表現したテストであるかと徹底する<br>→ なんとなくは許さない</p>
</li>
</ul>
<h2 id="スプリントレビュー-1">スプリントレビュー</h2><ul>
<li>レビューを行う人は持ち回り<br>→チームのことなんだからわかるよね？</li>
</ul>
<p>→ 全くわからない という人をなくす<br>→ わかってないと見積もれない！→コミットできない<br>→ サポートがあればできるの前に説明できるという状態があるだろう → せめてそこまでは持っていく スプリントレビューの場でそこまで持っていく</p>
<h2 id="メトリクス-1">メトリクス</h2><ul>
<li><p>メトリクス取っていなかった→自信過剰だった</p>
</li>
<li><p>不満からメトリクスを取るようになった<br>→ できるチーム<br>→ 頼まれごと多い<br>→ 自分の仕事できない！！！！<br>→ 割り込み作業をメトリクス化<br>→ 40%<br>→ 割り込み作業のおねがいテンプレ化<br>→ 10%になった<br>→ メトリクス重要！！！となった。</p>
</li>
</ul>
<h2 id="レビュー">レビュー</h2><ul>
<li><p>レビュアー</p>
<ul>
<li>指摘内容を狩野モデルで素敵品質指摘が多い人はダメレビュアーとか</li>
</ul>
</li>
<li><p>レビュイー</p>
<ul>
<li>情報共有が多すぎる人は理解が浅いとか</li>
</ul>
</li>
</ul>
<h2 id="計画内作業と計画外作業">計画内作業と計画外作業</h2><h3 id="アドリブ">アドリブ</h3><p> →いいアドリブと悪いアドリブ</p>
<h2 id="無関心品質が0であること">無関心品質が0であること</h2><h2 id="新しいTryをした時に注意力を">新しいTryをした時に注意力を</h2><p>→音楽を聞くというTryに対してどうだったか<br>→音楽に載ってると視野が狭くなる<br>→得意な作業は早くなる<br>→不得意な作業、注意が必要な作業はいけてない</p>
<h2 id="わかったこと">わかったこと</h2><ul>
<li>自分が納得したものを取り入れる</li>
<li>活動に対してできるだけ早くフィードバックを上げるとどんどん良くなる、よくなりたいという気持ちになる。</li>
</ul>
<h3 id="スプリントレトロスペクティブをレトロスペクティブしていますか？">スプリントレトロスペクティブをレトロスペクティブしていますか？</h3><p>→なかなか解決できない問題がどういうふうに変化しているかを計測する</p>
<h1 id="Technology-Driven_Development-1">Technology-Driven Development</h1><p>TDDからインスパイアされて作った言葉</p>
<p>TecDDの3つの目的</p>
<ul>
<li>業務効率化</li>
<li>教育</li>
<li>コラボレーション</li>
</ul>
<h2 id="TecDDの経緯">TecDDの経緯</h2><ul>
<li>アジャイルをやりたいけど助けてくれない？</li>
<li>Androidのプロダクトのチーム</li>
</ul>
<h3 id="問題点">問題点</h3><ul>
<li>アジャイルやりたいって言うけど経験者がいない</li>
<li>業務の殆どが手作業で</li>
<li>チームメンバーが若くて業務経験が浅かった</li>
</ul>
<p>大変だなぁだが、たぎるぜ！<br>→何やっても効果がある！！</p>
<h2 id="具体的な話">具体的な話</h2><h3 id="CI/CD">CI/CD</h3><ul>
<li>手作業でパフォーマンスが低い</li>
<li>要求が曖昧で、チームが混乱している</li>
</ul>
<p>→地ならしをしたい！！！</p>
<h4 id="CI/CD以前">CI/CD以前</h4><ul>
<li>変更要求に対する回帰テストに週 13.5時間 かかっていた<br>→ 週の1/3以上がこれに！！</li>
</ul>
<h4 id="自分のマシンでCI/CD">自分のマシンでCI/CD</h4><ul>
<li>一時間ごとにビルド</li>
<li>毎日端末にデプロイ<br>→実機でデモ＆進捗確認<br>→進捗がわかる＆フィードバックが早くなる！<br>→ 13.5h -&gt; 15min へ<br>→ 自動化にかかった時間 = 2w</li>
</ul>
<h3 id="TDD">TDD</h3><p>なぜ？<br>→アンドロイドわからないから、勉強したかった<br>→みんなAndoroid知らない<br>→テストを使ってわからないところを明らかにしたかった</p>
<h4 id="before_TDD">before TDD</h4><ul>
<li><p>1 アクティビティ追加に時間がかかる</p>
</li>
<li><p>Android JUnit<br>→ テストしづらい、テストが遅い<br>→ mockito, roborectricを導入</p>
</li>
</ul>
<h4 id="After_mockito,_roborectric">After  mockito, roborectric</h4><p>→コンポーネント単位でテストできる様になった<br>→ 5日→1日になった</p>
<h3 id="BDD">BDD</h3><ul>
<li>Feature creep 要求の爆発！！</li>
<li>ユースケースレベルのバグとデグレは検知できない</li>
<li>ドメインの知識が必要になった</li>
</ul>
<h4 id="Feature_creep">Feature creep</h4><ul>
<li>企画側からのやれやれ圧力に対抗する必要が出てきた</li>
</ul>
<p>デザイナーが話す<br>→開発チームがBDDのSpec形式で確認<br>→開発＆確認<br>→コラボレーションが可能に</p>
<h4 id="After_BDD">After BDD</h4><ul>
<li>Bugs -67%</li>
<li>変更要求 -70%</li>
<li>デグレ -60%</li>
</ul>
<h2 id="新しく出てきた問題（内密に）">新しく出てきた問題（内密に）</h2><ul>
<li>スコープの変更ができないという問題<br>→このスコープではどうやってもできない<br>→アナリストに直訴<br>→アナリスト：NO 全部やって</li>
</ul>
<h3 id="なんでか？">なんでか？</h3><ul>
<li><p>社風として、一回企画を通したものは死んでもやりなさい！<br>→ なんとかならないかと一ヶ月調整<br>→ 失敗<br>→ 偉い人に直談判<br>→ OK</p>
</li>
<li><p>TecDDとか言ってきましたが、必ずしもそれだけが解決方法ではない。</p>
<ul>
<li>なんでもいいから問題が解決できればいい</li>
</ul>
</li>
</ul>
<h2 id="Feature">Feature</h2><ul>
<li><p>Adroidエミュレータ遅いよね？Genimotionいいらしいよ<br>→メンバーからの提案は積極的に取り入れるようにした。</p>
</li>
<li><p>TecDDは開発者のものではなくて、アナリストやエグゼクティブを巻き込むように活動をした。<br>→プロダクトの全体像を見ながらすすめる必要がある<br>→スクラムであるならばプロダクトオーナーがそれを示す必要がある。</p>
</li>
</ul>
<h2 id="結論">結論</h2><ul>
<li>passionate member</li>
<li>現場主義</li>
</ul>
<h2 id="Agile2016">Agile2016</h2><ul>
<li>アトランタでやります</li>
<li>ぜひ参加してみたらいかがでしょうか？</li>
</ul>
<p>#＃ 質問</p>
<h3 id="Technology_とあえていったのは？">Technology とあえていったのは？</h3><p>→ 当時Scrum偏重で、技術を疎かにしがちだったので、そこへのアンチテーゼ</p>
<h3 id="ツール入れればOK?">ツール入れればOK?</h3><p>→ No. ツールを使って、失敗して、そこから学んで進んでもらう</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1/18,19の二日間にわたって開催された <a href="http://2016.scrumgatheringtokyo.org/#top" target="_blank" rel="external">Regional SCRUM GATHERING® Tokyo 2]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="scrum" scheme="http://yenjoji.github.io/pages/pages/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「マグロ船で学んだ「ダメ」な自分の活かし方」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/14/20160113-reading-maguro/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/14/20160113-reading-maguro/</id>
    <published>2016-01-13T16:21:48.000Z</published>
    <updated>2016-02-27T15:33:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4054054447" target="_blank" rel="external">マグロ船で学んだ「ダメ」な自分の活かし方</a></li>
<li>読み終わった日<br>2016/1/14</li>
<li>所要時間<br>2時間</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥200</li>
</ul>
<h1 id="感想">感想</h1><p><a href="http://www.amazon.co.jp/dp/4839930201/" target="_blank" rel="external">会社人生で必要な知恵はすべてマグロ船で学んだ</a> の著者であり、<br>また、ホンマでっかTVでマグロ船評論家として出演されている 齊藤 正明 さんの著書です。</p>
<p>内容としては、「自分が欠点だと思っていることは実は強みでもありますよ」<br>というメッセージが著者の独特のふんわりした文体綴られた、ある意味非常にポジティブな本です。</p>
<p>今の自分が著者がいうところの「がんばりすぎ」な状態になって、<br>空回って周りに迷惑や不快感を与えていないか確認するためのチェックリストとしても使えるなぁと感じました。</p>
<ul>
<li>苦手な仕事には、努力を惜しむべし</li>
<li>一人で頑張らず、周りの人を巻き込む</li>
<li>相手にトクをさせてあげれば、人脈は自然とできてくる</li>
<li>「ナメられる性格」を磨き、人の教えを引き出すべし</li>
<li>「失敗体験」こそ説得材料。記録を怠るべからず</li>
<li>周りを「主役」にしてあげれば、自分の存在価値は高まる</li>
<li>不幸か幸福か。その決定権は完全に自分が握っている</li>
</ul>
<p>など、どこか力が抜けているものの、じんわり染みてくるような言葉が散りばめられています。</p>
<p>7つの習慣のように、この本を読んだ直後に「よし！やるぞ！」的なモチベーションは起きないかもしれませんが、<br>定期的にサラッと読み返して、その時点で自分が変にがんばり過ぎていないかをふりかえるネタにする本としてはいいんじゃなかろうかと思いました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4054054447" target="_blank" rel="external">マグロ船で学んだ「ダメ」な自分の活かし方</a]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「100円のコーラを1000円で売る方法 コミック版」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/11/20160111-how-to-sell-100yen-cola-for-1000yen-comic/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/11/20160111-how-to-sell-100yen-cola-for-1000yen-comic/</id>
    <published>2016-01-11T14:00:00.000Z</published>
    <updated>2016-02-27T15:33:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/404602836X/" target="_blank" rel="external">100円のコーラを1000円で売る方法 コミック版</a></li>
<li>読み終わった日<br>2016/1/11</li>
<li>所要時間<br>1.5時間</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥200</li>
</ul>
<h1 id="感想">感想</h1><p><a href="http://www.amazon.co.jp/dp/404602836X/" target="_blank" rel="external">100円のコーラを1000円で売る方法 コミック版</a> を読みました。</p>
<p><a href="http://www.amazon.co.jp/dp/4800215315" target="_blank" rel="external">まんがでわかる 7つの習慣</a>に続くまんがで読むベストセラーです。</p>
<p>前回と同じく、活字で読むとそれなりにボリュームがある本のエッセンスを1時間程度でサラッと読めてしまうのが良いです。</p>
<p>マーケティングと言うと我々ソフトウェアエンジニアには縁遠い用に感じますが、<br>本を読み進めると、プロダクトオーナーなどが考えるべき商品企画の基礎となるような考え方や<br>ブルーオーシャン戦略、キャズム理論など有名な概念がわかりやすく解説されておりマーケティング素人の私でもわかった気になれました。</p>
<p>中でも印象に残ったのは「顧客満足の式」とよばれる式で 顧客満足は 「 顧客が感じた価値 - 事前期待値 」で表され、<br>顧客の期待に応えるだけでは結果は0点であり、顧客の期待以上の価値が提供できなければ商品としてプラスの評価にはならないという考え方でした。</p>
<p>実際、詳細にマーケティングを学ぶにはより多くの書籍などに当たる必要があると思いますが、<br>開発者がプロダクトオーナーなど、企画している方々の考えを知るには非常にいい一冊だと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/404602836X/" target="_blank" rel="external">100円のコーラを1000円で売る方法 コミ]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「まんがでわかる 7つの習慣」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/10/20160110-7habits-comic-vol01/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/10/20160110-7habits-comic-vol01/</id>
    <published>2016-01-10T13:00:00.000Z</published>
    <updated>2016-02-27T15:33:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4800215315" target="_blank" rel="external">まんがでわかる 7つの習慣</a></li>
<li>読み終わった日<br>2016/1/10</li>
<li>所要時間<br>1.5時間</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥720</li>
</ul>
<h1 id="感想">感想</h1><p><a href="http://www.amazon.co.jp/dp/4800215315" target="_blank" rel="external">まんがでわかる 7つの習慣</a>を読みました。</p>
<p>私は、本家の7つの習慣を読んだことがないのですが。</p>
<ul>
<li>1時間程度でサラッと読める</li>
<li>（おそらく）重要なエッセンスだけを抽出してある<br>ので、少ない時間で7つの習慣を俯瞰でき、美味しいところだけつまみ食いできて良かったです。</li>
</ul>
<p>特に、第2の習慣の「終わりを思い描くことから始める」にあった、ミッションステートメントを持つことについては、<br>40歳、不惑を前にして、自分のこれからを再度考えようと考えていたタイミングにマッチしたのもあり印象に残りました。</p>
<p>なんとなく目標を考えてはいたものの、父、夫、上司、部下など、<br>自分の役割ごとにミッションステートメントを持つという考え方はより（長期的な）目標を具体的に考える指標になると感じました。</p>
<p>また、第7の習慣の「刃を研ぐ」も同じく自分の（特に短期的な）これからを考える良い参考になりました。</p>
<p>まんがでサラッと読めて、絵も綺麗で、内容もためになるという意味でおすすめできます。<br>気になったら読み返すのにも時間がかからないという面でも頑張って活字を読むより良いと感じました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4800215315" target="_blank" rel="external">まんがでわかる 7つの習慣</a></li>
]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年 ふりかえり]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/01/02/retrospectives2015/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/01/02/retrospectives2015/</id>
    <published>2016-01-01T17:10:45.000Z</published>
    <updated>2016-01-01T18:44:45.000Z</updated>
    <content type="html"><![CDATA[<p>年も開けてしまいましたが、2015年もいろいろあったなぁということで、徒然なるままにふりかえって見たいと思います。<br>特にTryしようとか思わない、安定の意識の低さなのでただのポエムです。</p>
<p>ちなみに仕事のことは仕事でふりかえるので、主に仕事以外のことについてです。</p>
<h1 id="Good">Good</h1><ul>
<li>コミュニティ関連でさらに人脈が広がった１年でした<ul>
<li>XP祭りのスタッフ関連や、横浜道場関連、後述の登壇などでたくさんの方と交流＆知り合うことが出来ました。</li>
<li>やはり、コミュニティは参加するだけで楽しい＆ためになりますが、運営する側になったほうがさらに得るものは大きいと感じました。</li>
</ul>
</li>
<li>コミュニティ以外でも人脈が広がりました<ul>
<li>職場のチームメンバー経由で各界の著名人を紹介してもらったりして、思っても見なかった人脈が広がりました。</li>
</ul>
</li>
<li>書籍のレビューをさせて頂きました<ul>
<li>貢献が出来たかはなんともいえませんが、書籍が出来ていく仮定を垣間見れ、個人的には貴重な体験が出来ました。機会がいただければまたやりたいです。</li>
<li>世に出ていないものを一歩先に読めるというプレミアム感もなんかいい感じでした。</li>
</ul>
</li>
<li>電子工作に目覚めました<ul>
<li>Lチカ職人になりました。</li>
<li>ハンダ付けがLv1くらいになりました。</li>
<li>一発ネタで<a href="http://www.atware.co.jp/blog/2015/4/17/raspberry-pi-xfd" target="_blank" rel="external">ズゴック作った</a>ら思いの外ウケて良かったです。</li>
<li>でも、その続きの<a href="http://www.atware.co.jp/blog/2015/7/15/mackerel-raspberry-pi" target="_blank" rel="external">ズゴック＋Mackerel</a>は今ひとつだったかなぁ。。。</li>
</ul>
</li>
<li>横浜道場が一旦終了しました<ul>
<li>区切りのいいところで一旦けじめをつけられたのは良かったと思います。</li>
</ul>
</li>
<li>登壇させていただきました<ul>
<li>AgileSamuraiBaseCampでTDD関連のお話をさせていただきました。</li>
<li>もともと人前に出ることが得意ではないので、ちゃんと話せたかはわかりませんが、人前で話すことへの抵抗が減った気がします。</li>
<li>チャンスを与えてくれた@setoazusaさんありがとうございました。</li>
</ul>
</li>
<li>ラーメン二郎デビューしました<ul>
<li>職場の先輩ジロリアン諸氏に手ほどきを受け、無事ラーメン二郎デビューができました。</li>
<li>その結果、二郎の画像を上げると通常みることのできない数のいいねを貰えるということがわかりました。</li>
<li>facebookでいいね！がほしい時は二郎画像！</li>
</ul>
</li>
<li>はじめて登山をしました<ul>
<li>なんでそうなったか経緯は覚えてないですが、職場の登山経験者のプランニング＆エスコートで大山（おおやま）に登ってきました。</li>
<li>ヤビツ峠には自転車で何回か登ったことはありましたが、徒歩で登るのは一味違って楽しかったです。</li>
<li>なんといっても、帰りがけに呑んで帰れるというのはロードバイクに比べて大きなアドバンテージですね。</li>
</ul>
</li>
<li>ダムカードを集めはじめました<ul>
<li>自転車の目的地にダムっていうのは意外といいので、どうせならとカードをもらうことにしました。</li>
</ul>
</li>
</ul>
<h1 id="Sad">Sad</h1><ul>
<li>英語力が・・・<ul>
<li>書籍のレビューアーになるも、英語力が無いので訳の正当性チェックで貢献出来ませんでした。</li>
</ul>
</li>
<li>電気のことが全然理解できていない<ul>
<li>電子工作にというか電気系に真剣に向き合って来なかったので前提知識が全くたりませんでした。</li>
<li>パーツのスペックシートとか見ても理解できませんでした。なので先人の知恵をGoogle先生経由で拝借しっぱなしでした。</li>
</ul>
</li>
<li>横浜道場<ul>
<li>いままで長い付き合いで、いろいろなものをもたらしてくれたコミュニティが終わってしまうのはやはり残念な面もあります。</li>
</ul>
</li>
</ul>
<p>あらてめてふりかえってみても、周りの方々と環境に恵まれ、いろいろなものを吸収させていただいた一年でした。<br>2016年は形式はどうあれ、周りからもらったものをもう少しアウトプットする力を付けたいなぁとか思ったりしてます。</p>
<p>あと、自転車乗る回数を増やして体重を減らしたい。</p>
<p>ということで2016年もよろしくお願いします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>年も開けてしまいましたが、2015年もいろいろあったなぁということで、徒然なるままにふりかえって見たいと思います。<br>特にTryしようとか思わない、安定の意識の低さなのでただのポエムです。</p>
<p>ちなみに仕事のことは仕事でふりかえるので、主に仕事以外のことについ]]>
    </summary>
    
      <category term="poem" scheme="http://yenjoji.github.io/pages/pages/tags/poem/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その4 分散ストレージ設定編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/10/26/setup-stash-ha-storage-glusterfs/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/10/26/setup-stash-ha-storage-glusterfs/</id>
    <published>2015-10-26T03:00:00.000Z</published>
    <updated>2015-10-26T01:17:27.000Z</updated>
    <content type="html"><![CDATA[<p>今回もStashの高可用性を目指してクラスタを組んでいきたいと思います。<br>前回までで、サーバーと、Stashのプロセスの冗長化は一旦完了したので、今回は一番重要なデータ保存領域の冗長化を目指します。</p>
<h1 id="お知らせ">お知らせ</h1><p>今までAtlassian Stash を冗長化しようと頑張ってきましたが、つい先日なんとAtlassian Stashがなくなってしまいました。<br>今度からは生まれ変わった？ Bitbucket Server をよろしくお願いします。</p>
<p>・・・閑話休題・・・</p>
<p>それでは、Stash改めBitbucket Serverのストレージを冗長化したいと思います。</p>
<p><a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">Atlassianの公式</a>によるとストレージは GFS2 + DRBD でストレージの冗長化を行っていますが、<br>今回は個人的な興味で、GlusterFSを使って冗長構成をしてみたいと思います。</p>
<h1 id="事前準備">事前準備</h1><h2 id="VagrantにDISKを追加">VagrantにDISKを追加</h2><p>Virtualbox コンソール経由で、node01,node02 にDISKを追加します。<br>Stashのデータに使用するので、保存するデータの容量によって大きさをかんがえる必要があります。<br>今回は仮に8GBとして データ用にパーティション /dev/sdb1 を作成しました。</p>
<h1 id="GlusterFSのインストール（全ノード）">GlusterFSのインストール（全ノード）</h1><h2 id="パッケージのインストール">パッケージのインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/&#10;curl -o glusterfs.repo http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-epel.repo&#10;yum install glusterfs-server</span><br></pre></td></tr></table></figure>
<h2 id="通信ポートの開放">通信ポートの開放</h2><p>まずは、通信に必要なポートを開放します。<br>今回は実験用途なのでどこからでも通信可能に設定してしまいます。</p>
<p>/usr/lib/firewalld/services/glusterfs.xml を以下の内容で作成します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;service&#62;&#10;  &#60;short&#62;GlusterFS&#60;/short&#62;&#10;  &#60;description&#62;GlusterFS&#60;/description&#62;&#10;  &#60;port protocol=&#34;tcp&#34; port=&#34;1111&#34;/&#62;&#10;  &#60;port protocol=&#34;tcp&#34; port=&#34;24007-24100&#34;/&#62;&#10;&#9;&#60;port protocol=&#34;tcp&#34; port=&#34;49152&#34;/&#62;&#10;&#60;/service&#62;</span><br></pre></td></tr></table></figure></p>
<p>作成したファイルをもとにファイワォールの設定を変更します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=glusterfs&#10;firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<h1 id="GlusterFS_Volumeの作成">GlusterFS Volumeの作成</h1><p>次にGlusterFSで使用するディスクの準備をします。</p>
<h2 id="ファイルシステムの作成">ファイルシステムの作成</h2><p>GlusterFSは共有するボリュームのファイルシステムをXFSにする必要があります。<br>まずはデータ用のボリュームをXFSで用意します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/sdb1</span><br></pre></td></tr></table></figure>
<p>/etc/fstab の末尾にエントリを追加します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb1       /data&#9;&#9;&#9;&#9;&#9;  xfs     defaults        0 0</span><br></pre></td></tr></table></figure></p>
<p>マウントします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -a</span><br></pre></td></tr></table></figure></p>
<h2 id="GlusterFSの起動">GlusterFSの起動</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start glusterd&#10;systemctl enable glusterd</span><br></pre></td></tr></table></figure>
<h2 id="GlusterFSのノード登録">GlusterFSのノード登録</h2><ul>
<li><p>node01</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe node02</span><br></pre></td></tr></table></figure>
</li>
<li><p>node02</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe node01</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="GlusterFSのVolume作成(任意の1ノードで実行)">GlusterFSのVolume作成(任意の1ノードで実行)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/atlassian/stash</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create stash_vol replica 2 node01:/data/atlassian/stash node02:/data/atlassian/stash&#10;gluster volume start stash_vol</span><br></pre></td></tr></table></figure>
<h2 id="GlusterFSのマウント">GlusterFSのマウント</h2><h3 id="マウントポイントの作成">マウントポイントの作成</h3><p>まずマウントポイントを作成します。<br>既存のStashのデータディレクトリはあとでGlusterFS上にコピーするためリネームして退避しておきます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/atlassian/application-data/stash /var/atlassian/application-data/stash.org&#10;mkdir -p  /var/atlassian/application-data/stash&#10;chown atlstash:atlstash /var/atlassian/application-data/stash</span><br></pre></td></tr></table></figure></p>
<h3 id="fstabの修正">fstabの修正</h3><p>次に各ノードで /etc/fstab にエントリを追加します。</p>
<ul>
<li><p>node01</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node01:stash_vol        /var/atlassian/application-data/stash   glusterfs       defaults        0 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>node02</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node02:stash_vol        /var/atlassian/application-data/stash   glusterfs       defaults        0 0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ファイルシステムのマウント">ファイルシステムのマウント</h3><p>次に、両方のノードでglusterfsをマウントします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -a</span><br></pre></td></tr></table></figure></p>
<h3 id="既存データのコピー">既存データのコピー</h3><p>次に、今までのデータをどちらか一方のノードでコピーします<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rp /var/atlassian/application-data/stash.org/* /var/atlassian/application-data/stash/.</span><br></pre></td></tr></table></figure></p>
<p>これで課題だったDISKの冗長化も出来、Stash改めBitbucketServerのクラスタリングが完了しました。<br>実際の運用では、定期的なデータのバックアップは行う事はあっても、クラスタリングをすることはまれかもしれませんが、<br>クラスタリングを検討されている方の参考になれば幸いです。</p>
<p>※ このシリーズの記事はあくまで検証用途でクラスタの設定を行っているため、実際の環境では使用に耐えない可能性があります。<br>   実際にHAを構成を行う場合には十分な検証を行うことをおすすめします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回もStashの高可用性を目指してクラスタを組んでいきたいと思います。<br>前回までで、サーバーと、Stashのプロセスの冗長化は一旦完了したので、今回は一番重要なデータ保存領域の冗長化を目指します。</p>
<h1 id="お知らせ">お知らせ</h1><p>今までA]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="GlusterFS" scheme="http://yenjoji.github.io/pages/pages/tags/GlusterFS/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thinking about INVEST]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/26/thiking-about-invest/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/26/thiking-about-invest/</id>
    <published>2015-09-26T03:00:00.000Z</published>
    <updated>2015-09-25T17:39:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="INVEST">INVEST</h1><p>Have you ever heard the acronym “INVEST”?</p>
<p>The INVEST mnemonic was created by Bill Wake and it is introduced in <a href="https://pragprog.com/titles/jtrap/the-agile-samurai" target="_blank" rel="external">The Agile Samurai(@jrasmusson 2010)</a> .</p>
<p>“INVEST” is as a reminder of the characteristics of a good quality user story,</p>
<ul>
<li>Independent<ul>
<li>The user story should be self-contained, in a way that there is no inherent dependency on another user story.</li>
</ul>
</li>
<li>Negotiable<ul>
<li>User stories, up until they are part of an iteration, can always be changed and rewritten.</li>
</ul>
</li>
<li>Valuable<ul>
<li>A u ser story must deliver value to the end user.</li>
</ul>
</li>
<li>Estimable<ul>
<li>You must always be able to estimate the size of a user story.</li>
</ul>
</li>
<li>Small<ul>
<li>User stories should not be so big as to become impossible to plan/task/prioritize with a certain level of certainty.</li>
</ul>
</li>
<li>Testable<ul>
<li>The user story or its related description must provide the necessary information to make test development possible.</li>
</ul>
</li>
</ul>
<p>quated from <a href="https://en.wikipedia.org/wiki/INVEST_(mnemonic" target="_blank" rel="external">wikipedia</a>)</p>
<p>“Valuable” is easy understand Of these six words, So everyone will care<br>But Testable,Small and Estimable are often forgotten.</p>
<p>If you noticed follow problems, It may be able to solve it by being conscious of INVEST.</p>
<ul>
<li>Story goal is difficult to understand, Because acceptance criteria is not clear.</li>
<li>Story is hard to estimate, Because the size is huge.</li>
</ul>
<h1 id="INVEST_User_Story">INVEST User Story</h1><p>Then I think about an example about the user story that is INVEST.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As a Administrator,&#10;I want search user by name so that I don&#39;t use time for find user in list.</span><br></pre></td></tr></table></figure>
<ul>
<li>Independent<ul>
<li>OK. This story is inipendent feature.</li>
</ul>
</li>
<li>Negotiable<ul>
<li>OK. This story is not specified implementation.</li>
</ul>
</li>
<li>Valuable<ul>
<li>OK. To improve Administrator’s work efficiency</li>
</ul>
</li>
<li>Estimable<ul>
<li>OK. It story may be modified 1 view (and 1 logic)</li>
</ul>
</li>
<li>Small<ul>
<li>OK. It is simple and small.</li>
</ul>
</li>
<li>Testable<ul>
<li>OK. Story is simple, (please confirm the acceptance criteria properly in PO.)</li>
</ul>
</li>
</ul>
<p>It is INVEST and good user story.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As a ramen JIRO lovers (sometimes called Jirolian),&#10;I want to know which JIRO is open now&#10;so I wants to go to Jiro as soon as I thought.</span><br></pre></td></tr></table></figure>
<p>And this user story is INVEST too.</p>
<h1 id="Conclusion">Conclusion</h1><p>INVEST is good practice for writing user story.</p>
<p>How about if you try a Story-Gathering workshop while being conscious of INVEST?</p>
<h1 id="Appendix">Appendix</h1><h1 id="INVEST_something">INVEST something</h1><p>With that said, I understood that INVEST was important in thinking about user story.<br>In, what’s the INVEST in something other than user stories can be applied?</p>
<p>I’m tried.</p>
<h2 id="JIRO">JIRO</h2><p>Ramen Jiro is of course technically ramen, but it is somewhat different from any other ramen in Japan.</p>
<p>quated from <a href="http://www.ramentokyo.com/2007/06/ramen-jiro.html" target="_blank" rel="external">http://www.ramentokyo.com/2007/06/ramen-jiro.html</a></p>
<p>Ramen Jiro is introduced in Guardian 2009 <a href="http://www.theguardian.com/lifeandstyle/2009/sep/13/best-foods-in-the-world" target="_blank" rel="external">The 50 best things to eat in the world, and where to eat them</a></p>
<p>and <a href="https://twitter.com/elonmusk/status/508617476804866048" target="_blank" rel="external">Elon Mask was visited.</a></p>
<h2 id="Is_Jiro_INVEST?">Is Jiro INVEST?</h2><ul>
<li>Independent<ul>
<li>Jiro has some unique distinction. amazing large serving, own rule, etc…</li>
<li>someone says “Jiro is not ramen, but Jiro is the Independent food”</li>
</ul>
</li>
<li>Negotiable<ul>
<li>Jiro is negotiable some toppings vegitables (yasai), Backfat (abura), garlic(nin-niku) and depth of taste (karame).</li>
<li>If you want to more and more vegitables,backfat and garlic, you shoud say “yasai, abura, nin-niku mashi-mashi”.</li>
</ul>
</li>
<li>Valuable<ul>
<li>Jiro is Cost-effective.</li>
<li>Jiro is unique.</li>
</ul>
</li>
<li>Estimable<ul>
<li>While you attend a few times, it will be so as estimated to be either the amount of how much today is eaten.</li>
<li>If, when you can not eat too much, it would be nice if I tell half noodles when presenting the meal ticket.</li>
</ul>
</li>
<li>Small<ul>
<li>Jiro’s menu have “small size” (but Jiro’s small size equals ordinaly ramens large size or extra large size.)</li>
</ul>
</li>
<li>Testable<ul>
<li>Jiro might store a total of 40. we can achieve 100% coverage. It’s testable.</li>
</ul>
</li>
</ul>
<p>Jiro isn’t completely INVEST. but Jiro is extremely unique.</p>
<h2 id="Conclusion-1">Conclusion</h2><p>Meanwhile, it is very distinctive ramen Jiro, as there is also saying, “Seeing is believing”, First, What is How about try to experience.</p>
<p>Enjoy “mashi-mashi”.</p>
<p>(日本語版)</p>
<h1 id="INVEST-1">INVEST</h1><p>INVEST という頭文字語をご存知ですか？</p>
<p>“INVEST” とは <a href="http://xp123.com/articles/invest-in-good-stories-and-smart-tasks/" target="_blank" rel="external">ビルウェイクにより考案され</a>、<a href="https://github.com/agile-samurai-ja/support/wiki" target="_blank" rel="external">アジャイルサムライ</a>でも紹介された、よくかけているユーザーストーリーに備わっている6つの要素を表します。</p>
<ul>
<li>Indipendent<ul>
<li>独立している</li>
</ul>
</li>
<li>Negotiable<ul>
<li>交渉の余地がある</li>
</ul>
</li>
<li>Valuable<ul>
<li>価値のある</li>
</ul>
</li>
<li>Estimable<ul>
<li>見積もれる</li>
</ul>
</li>
<li>Small<ul>
<li>小さい</li>
</ul>
</li>
<li>Testable<ul>
<li>テストできる</li>
</ul>
</li>
</ul>
<p>この中でもValuableはわかりやすいので、誰もが気にするのですが、<br>意外と見逃し気味なのが、Testable,Small,Estimableです。</p>
<ul>
<li>受け入れ条件が曖昧でストーリーのゴールがわかりにくい</li>
<li>ストーリーが壮大過ぎて見積もろうとしても想像が出来ない</li>
</ul>
<p>などの状況に気づいたら、INVESTを意識すると解決できるかも知れません。</p>
<h1 id="INVEST_User_Story-1">INVEST User Story</h1><p>では、INVESTなユーザーストーリーについて例を考えてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#31649;&#29702;&#32773;&#12399;&#12518;&#12540;&#12470;&#12540;&#12434;&#26908;&#32034;&#12375;&#12383;&#12356;&#12290;&#12394;&#12380;&#12394;&#12425;&#12522;&#12473;&#12488;&#12363;&#12425;&#30446;Grep&#12377;&#12427;&#12398;&#12364;&#12461;&#12484;&#12452;&#12363;&#12425;&#12384;&#12290;</span><br></pre></td></tr></table></figure>
<ul>
<li>Indipendent<ul>
<li>OK. 独立したフィーチャーです。</li>
</ul>
</li>
<li>Negotiable<ul>
<li>OK. 実現方法などはまだ交渉（カイゼン）の余地があります。</li>
</ul>
</li>
<li>Valuable<ul>
<li>OK. 管理者の作業効率が上がります。</li>
</ul>
</li>
<li>Estimable<ul>
<li>OK. 開発者が想像できるくらいのサイズです。（おそらく1画面＋1ロジックでしょう）</li>
</ul>
</li>
<li>Small<ul>
<li>OK. 十分に小さいです。</li>
</ul>
</li>
<li>Testable<ul>
<li>OK. ユーザーストーリーがシンプルなので、テストも書きやすそうです。（ただし、POと受け入れ条件は合意して億必要があります。）</li>
</ul>
</li>
</ul>
<p>このユーザーストーリーはINVESTを満たしていて、良いストーリーと言えるでしょう。</p>
<p>別の例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#12472;&#12525;&#12522;&#12450;&#12531;&#12399;&#12393;&#12398;&#24215;&#33303;&#12364;&#20170;&#21942;&#26989;&#20013;&#12394;&#12398;&#12363;&#30693;&#12426;&#12383;&#12356;&#12290;&#12394;&#12380;&#12394;&#12425;&#12289;&#24605;&#12356;&#31435;&#12387;&#12383;&#12381;&#12398;&#12479;&#12452;&#12511;&#12531;&#12464;&#12391;&#12521;&#12540;&#12513;&#12531;&#20108;&#37070;&#12408;&#34892;&#12365;&#12383;&#12356;&#12363;&#12425;&#12384;&#12290;</span><br></pre></td></tr></table></figure>
<p>また、このストーリーもINVESTを満たしていて良いストーリーといえるのでは無いでしょうか。</p>
<h1 id="Conclusion-2">Conclusion</h1><p>このようにINVESTを意識することで、ユーザーストーリーがより良くなります。</p>
<p>ユーザーストーリーワークショップなどを行う際には<br>INVESTを意識しながらストーリーを抽出してみたらいかがでしょうか。</p>
<h1 id="Appendix-1">Appendix</h1><h1 id="INVEST_something-1">INVEST something</h1><p>ということで、ユーザーストーリーを考える上でINVESTが重要な事はわかりました。<br>では、今回は少々趣向を変えて、ユーザーストーリーではなく、身近なものにINVESTが適用できるか考えてみました。</p>
<h2 id="jiro">jiro</h2><p>ラーメン二郎とは、</p>
<p>Guardian 2009 <a href="http://www.theguardian.com/lifeandstyle/2009/sep/13/best-foods-in-the-world" target="_blank" rel="external">The 50 best things to eat in the world, and where to eat them</a></p>
<p>で紹介され、</p>
<p><a href="http://mogumogunews.com/2015/04/topic_10702/" target="_blank" rel="external">http://mogumogunews.com/2015/04/topic_10702/</a></p>
<p>あの、<a href="https://twitter.com/elonmusk/status/508617476804866048" target="_blank" rel="external">イーロン・マスクも訪れた</a>ラーメン店です。</p>
<p><a href="http://japan.cnet.com/news/offtopic/35053480/" target="_blank" rel="external">http://japan.cnet.com/news/offtopic/35053480/</a></p>
<h2 id="Is_JIRO_INVEST?">Is JIRO INVEST?</h2><ul>
<li>I<ul>
<li>二郎はラーメンではなく、二郎という食べ物だと言われることもあるほど独自性が高く、一種独特の文化があると言えるでしょう。</li>
</ul>
</li>
<li>N<ul>
<li>二郎非常に柔軟な調整が可能です。代表的なものは 麺、野菜、背脂、にんにくの量や、味の濃さです。たとえば、野菜と背脂とにんにくをとても多くしたい場合は「野菜、アブラ、ニンニク マシマシ」と店主に伝えることにより、おそらくあなたの希望の結果が得られるでしょう。</li>
</ul>
</li>
<li>V<ul>
<li>二郎には圧倒的なオリジナリティがあります。これにまさる価値は無いでしょう。</li>
</ul>
</li>
<li>E<ul>
<li>何回か二郎に通うと、自分のコンディションに応じて何を増やして何を減らすかが見積もれる様になります。体調が悪くあまり食べられない場合は、食券を提示する際に、麺半分などと伝えればいいでしょう</li>
</ul>
</li>
<li>S<ul>
<li>二郎にもスモールサイズはありますが、これには注意が必要です。二郎のスモールサイズは、一般的な店舗の大盛りか、それ以上に値します。慣れるまではスモールサイズもしくは（もしあれば）ソレより小さいプチサイズにするのが良いでしょう。</li>
</ul>
</li>
<li>T<ul>
<li>二郎は総店舗数が40店舗弱（内休業中が2店舗？）であるため、カバレッジ100％を達成することも可能であるため、テスタブルと言えるでしょう。また、非常に量が多いため、自分に対する判断力を試されるため、自分自身に対するテストと考えることも出来ます。</li>
</ul>
</li>
</ul>
<p>そんな、非常に特徴的なラーメン二郎ですが、百聞は一見にしかずということわざもあるように、まずは体験してみるのはいかがでしょうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="INVEST">INVEST</h1><p>Have you ever heard the acronym “INVEST”?</p>
<p>The INVEST mnemonic was created by Bill Wake and it is introd]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
      <category term="jiro" scheme="http://yenjoji.github.io/pages/pages/tags/jiro/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その3 HAリソースセットアップ編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/20/setup-stash-ha-resource/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/20/setup-stash-ha-resource/</id>
    <published>2015-09-20T03:00:00.000Z</published>
    <updated>2015-10-06T07:40:12.000Z</updated>
    <content type="html"><![CDATA[<p>今回も引き続きStashの高可用性(HA)クラスタを組むべく進めていきたいと思います。</p>
<p>前回 <a href="http://yenjoji.github.io/pages/2015/09/15/setup-stash-ha/">ATLASSIAN STASHの耐障害性を高めよう その２ HAセットアップ編</a>はHAクラスタをくんだものの、<br>IPアドレスの設定のみで終わってしまい、全くStashの可用性が高まらないまま終わってしまいました。</p>
<p>このままでは表題に偽りありと言われても反論出来ないので、今回こそは、Stashの可用性を高めていきたいと思います。</p>
<p>前回は、ノードが切り替わる際にIPアドレスが自動的にアクティブノードに付与されるように設定を行いました。<br>ただ、アクティブノードにIPアドレスが付与されるだけでは、Stashにアクセス出来ません。</p>
<p>というわけで今回は、ノードの切り替わり時に自動的にStashが起動する様にします。</p>
<h1 id="前提条件">前提条件</h1><ul>
<li>前回までの設定が終わっている</li>
<li>Stashが各ノードにインストール済み＆初期設定済み</li>
<li>Stashの自動起動がOFFになっている</li>
<li>StashのデータベースはStash以外のサーバーのものを使っている</li>
</ul>
<p>ここまでの設定が終わっている前提で進めていきます。<br>Stashはインストーラーを利用しても、tar.gzを利用しても問題ありません。</p>
<p>なお、今回のStashはインストーラーを利用してセットアップしました。</p>
<h1 id="リソース制御スクリプトの追加">リソース制御スクリプトの追加</h1><p>今回クラスタの制御に使用しているPacemakerは、一般的なクラスタリソースの制御スクリプトが最初から用意されています。<br>また、クラスタリソース制御スクリプトが用意されていない場合には、Pacemakerの指定する形式に沿った自作のスクリプトを所定のディレクトリに配置することにより、制御対象のクラスタリソースを追加することが出来ます。</p>
<p>Atlassian Stashも残念ながらPacemakerにスクリプトを用意されるほどにはメジャーになっていないようなので、自作のスクリプトを配置する必要があります。</p>
<p>このスクリプトを一から自作するとなかなか大変なのですが、Atlassian社がサンプルで用意しているリソース制御スクリプトがあるので、今回はそれを拝借します。</p>
<p>CentOS 7.1 + Pacemaker 1.1 の構成では /usr/lib/ocf/resource.d/ 以下に自作スクリプトを配置することによりクラスタリソースが追加されます。</p>
<p>ということで、<a href="https://bitbucket.org/atlassian/stash-ha-example/src/master/vagrant/scripts/heartbeat-stash?fileviewer=file-view-default" target="_blank" rel="external">このファイル</a>を各ノードの /usr/lib/ocf/resource.d/heartbeat に配置します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/ocf/resource.d/heartbeat&#10;curl -o stash https://bitbucket.org/atlassian/stash-ha-example/raw/1397712da2b11ab4894c91446009aacae94fcf3d/vagrant/scripts/heartbeat-stash&#10;chmod 755 /usr/lib/ocf/resource.d/heartbeat/stash</span><br></pre></td></tr></table></figure>
<p>リソースが定義されているかの確認をします。 pcs resource list コマンドの結果に ocf:heartbeat:stash が含まれていればOKです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs resource list&#10;--&#20013;&#30053;--&#10;ocf:heartbeat:slapd - Manages a Stand-alone LDAP Daemon (slapd) instance&#10;ocf:heartbeat:stash - Manages a Stash instance&#10;ocf:heartbeat:symlink - Manages a symbolic link&#10;ocf:heartbeat:tomcat - Manages a Tomcat servlet environment instance&#10;--&#20197;&#19979;&#30053;--</span><br></pre></td></tr></table></figure>
<h1 id="Stashリソースの定義">Stashリソースの定義</h1><p>リソースを定義する準備が整いましたので、クラスタにリソースを追加します。<br>下記コマンドを実行して、stashのリソースを定義します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource create stash_res ocf:heartbeat:stash params stash_user=atlstash stash_home=/var/atlassian/application-data/stash stash_inst=/opt/atlassian/stash/3.11.3 op monitor interval=15s op start timeout=240s</span><br></pre></td></tr></table></figure></p>
<p>次にstashが単一のノードでしか起動しないように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource meta stash_res migration-threshold=1</span><br></pre></td></tr></table></figure></p>
<p>最後に、stashのプロセスと、VIPが同時に同じノードで起動するように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs constraint colocation add stash_vip with stash_res INFINITY</span><br></pre></td></tr></table></figure></p>
<p>リソースを定義した後、クラスタの状態を確認しこのようにstash_vipとstash_resが同じノード上でStartedになっていればOKです。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 10:07:15 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure></p>
<h1 id="ノード切り替えの確認">ノード切り替えの確認</h1><p>それでは、設定が出来たのでノード障害時に自動的に切り替わるか確認したいと思います。</p>
<p>まず現状を確認します。<br>諸事情で、node02がアクティブになっています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 11:03:59 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/enabled&#10;  pacemaker: active/enabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>では、ここでnode02の電源をOFFします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 11:08:36 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node01 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 ]&#10;OFFLINE: [ node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Offline&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>しばらく後にクラスタの状態を確認したところ無事にnode01に切り替わっていることが確認出来ました。</p>
<h1 id="さいごに">さいごに</h1><p>今回で、ようやくStashが切り替わる様になりました。これで可用性が高まって枕を高くして眠れるかと思いましたが、実はまだ設定が足りません。<br>なんと、Stashはハードディスク上にもデータを保存しているのです。</p>
<p>というわけで次回はディスクを冗長化して、こんどこそ真のStashの耐障害性向上を成し遂げたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回も引き続きStashの高可用性(HA)クラスタを組むべく進めていきたいと思います。</p>
<p>前回 <a href="http://yenjoji.github.io/pages/2015/09/15/setup-stash-ha/">ATLASSIAN STASH]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その2 HAセットアップ編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/15/setup-stash-ha/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/15/setup-stash-ha/</id>
    <published>2015-09-15T03:10:00.000Z</published>
    <updated>2015-09-27T15:38:35.000Z</updated>
    <content type="html"><![CDATA[<p>今回は <a href="http://yenjoji.github.io/pages/2015/09/08/stash-ha-101/">前回 「Atlassian Stashの耐障害性を高めよう その１ プランニング編」</a> の続きとして、<br>HAクラスタのセットアップを行いたいと思います。</p>
<p>手順は<a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Reference/" target="_blank" rel="external">redhat向けのHIGH AVAILABILITY ADD-ON リファレンス</a> を参考に行っていきます</p>
<h1 id="今回の構成">今回の構成</h1><p>今回は、LinuxのHAクラスタミドルウェアの定番であるPacemakerを使用してクラスタを構成します。</p>
<table>
<thead>
<tr>
<th>ソフトウェア</th>
<th>バージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS</td>
<td>7.1</td>
</tr>
<tr>
<td>Pacemaker</td>
<td>1.1.12</td>
</tr>
<tr>
<td>Corosync</td>
<td>2.3.4</td>
</tr>
<tr>
<td>pcs</td>
<td>0.9.137</td>
</tr>
</tbody>
</table>
<p>ノード設定<br>|ホスト名|IP|備考|<br>|—|—|—|<br>|node01|192,168.33.21|Stash node #1|<br>|node02|192,168.33.22|Stash node #2|<br>|stash|192,168.33.101|Stash VIP|</p>
<h1 id="事前準備">事前準備</h1><p>クラスタ構成の際にお互いのノード名を解決出来ないとイケないので、 /etc/hosts にホストを追加しておきます。</p>
<p>/etc/hosts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.33.21 node01&#10;192.168.33.22 node02</span><br></pre></td></tr></table></figure></p>
<p>次にクラスタの通信に使用するポートを開放します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=high-availability&#10;firewall-cmd --add-service=high-availability</span><br></pre></td></tr></table></figure></p>
<h1 id="ソフトウェアのインストール">ソフトウェアのインストール</h1><p>それでは、必要なソフトウェアをインストールしていきます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install pcs fence-agents-all</span><br></pre></td></tr></table></figure></p>
<p>コマンドを両方のノードで実行します。<br>これだけでHAクラスタに必要なソフト一式がインストールされます。</p>
<p>インストールが無事完了したら、クラスタの構成を行うコマンドのデーモンである pcsd を起動します。<br><br><br>また、再起動時に自動的に起動するように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start pcsd&#10;systemctl enable pcsd</span><br></pre></td></tr></table></figure></p>
<h1 id="クラスタの構築">クラスタの構築</h1><p>次に、node01,node02をメンバーとして、HAクラスタを構築します。</p>
<h2 id="hacluster_ユーザーのパスワードを設定">hacluster ユーザーのパスワードを設定</h2><p>ここでは、マニュアルの推奨に従って、両ノードともに同じパスワードを設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd hacluster</span><br></pre></td></tr></table></figure></p>
<p>これも両ノードで実行します。</p>
<h2 id="クラスタノードの認証">クラスタノードの認証</h2><p>クラスタノード間の認証設定をします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster auth node01 node02 -u hacluster -p hacluster</span><br></pre></td></tr></table></figure></p>
<h2 id="クラスタの作成">クラスタの作成</h2><p>クラスタを作成します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster setup --start --name stash node01 node02</span><br></pre></td></tr></table></figure></p>
<h2 id="クラスタ状態の確認">クラスタ状態の確認</h2><p>作成したクラスタの状況を確認します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster status</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cluster Status:&#10; Last updated: Mon Sep 14 09:46:54 2015&#9;&#9;Last change: Mon Sep 14 09:42:40 2015 by hacluster via crmd on node02&#10; Stack: corosync&#10; Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10; 2 nodes and 0 resources configured&#10; Online: [ node01 node02 ]&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online</span><br></pre></td></tr></table></figure>
<p>両ノードがOnlineとなっていればOKです。</p>
<h2 id="STONITH_の無効化">STONITH の無効化</h2><p>ここで、/var/log/messages を確認すると。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sep 14 11:16:14 localhost pengine[4158]: error: Resource start-up disabled since no STONITH resources&#10;have been defined&#10;Sep 14 11:16:14 localhost pengine[4158]: error: Either configure some or disable STONITH with the ston&#10;ith-enabled option&#10;Sep 14 11:16:14 localhost pengine[4158]: error: NOTE: Clusters with shared data need STONITH to ensure&#10; data integrity</span><br></pre></td></tr></table></figure>
<p>といったエラーが発生しています。</p>
<p>この<a href="http://kan3aa.hatenablog.com/entry/2015/06/05/135150" target="_blank" rel="external">ページ</a>によると</p>
<p>STONITHと呼ばれるノードが不安定になった場合、自動的に再起動を行う機能を実現するためのリソースが無いためエラーとなってしまっているようです。<br><br>現時点ではSTONITHを使用しないため、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs property set stonith-enabled=false</span><br></pre></td></tr></table></figure></p>
<p>を実行し、機能を無効化します。</p>
<h1 id="リソースの作成">リソースの作成</h1><p>クラスタの設定が終わったところで、次にリソースを設定します。<br>クラスタでのリソースとは特にクラスタノード間で共有するリソースのことを指します。例えばアクティブノードが使用する仮想IPなどです。</p>
<p>今回は、ユーザーがアクセスする際に指定する、サービス用の仮想IPをリソースとして追加します。</p>
<p>どちらかのノードでコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource create stash_vip IPaddr2 ip=192.168.33.101 cidr_netmask=24 op monitor interval=6s</span><br></pre></td></tr></table></figure></p>
<p>これで、6秒ごとに死活確認を行うIPアドレスの共有リソースが設定されました。<br>アクティブノードに 192.168.33.101 のIPエイリアスが設定される様になります。</p>
<h1 id="ノード切り替えのテスト">ノード切り替えのテスト</h1><p>サービス用の仮想IPが割り当てられることが確認出来ました。</p>
<h2 id="アクティブノードの障害">アクティブノードの障害</h2><p>アクティブノードの障害時に正常に切り替わるか確認してみましょう。</p>
<p>Active : node01<br>Standby: node02</p>
<p>の状態で、node01の電源をOFFしてみます。</p>
<p>実施前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:14:31 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure></p>
<p>２ノードともオンラインで、stash_vip は node01に割り当てられています。</p>
<p>ここで node01 の電源をOFFにします</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:18:31 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node02 ]&#10;OFFLINE: [ node01 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Offline&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/enabled&#10;  pacemaker: active/enabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>正常に node02 にIPが切り替わりました。<br>この間pingを192.168.33.101宛に行っていましたが、途切れる事なくノードが切り替わりました。</p>
<h2 id="スタンバイノードの追加">スタンバイノードの追加</h2><p>では、次に稼働中のクラスタに、node01を追加します。</p>
<p>node01を起動し、node01でクラスタを起動します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster start</span><br></pre></td></tr></table></figure></p>
<p>正常に node01がクラスタに参加しました、ただアクティブノードはnode02のままです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:24:38 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<h2 id="アクティブノードの手動切替">アクティブノードの手動切替</h2><p>最後に、アクティブノードを切り替えます。<br>片系ずつ切り替えながらメンテナンスする際に威力を発揮しそうです。</p>
<p>アクティブノードをスタンバイ状態にし、強制的にきりかえます。<br>アクティブノード上で下記のコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster standby</span><br></pre></td></tr></table></figure></p>
<p>正常にノードが切り替わり、node01がアクティブになりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:44:33 2015&#9;&#9;Last change: Mon Sep 14 12:44:24 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Node node02: standby&#10;Online: [ node01 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>ただ、このままですと node01に障害が発生した場合でもnode02に切り替わらないので、node02のスタンバイ状態を解除します。<br>スタンバイ状態のノードで以下のコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster unstandby</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:46:29 2015&#9;&#9;Last change: Mon Sep 14 12:46:27 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>node02がアクティブになりました。</p>
<h1 id="今回はここまで">今回はここまで</h1><p>これでひと通りのクラスタ切り替えの動作の確認が出来ました。<br>しかしながら、IPの切り替えだけではStashの冗長化は出来ません。<br>次回は、ストレージの冗長化を設定しStashの冗長化を完成させたいと思います。</p>
<p>参考資料：<br><a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Reference/" target="_blank" rel="external">RED HAT ENTERPRISE LINUX 7 向け HIGH AVAILABILITY ADD-ON のリファレンスドキュメント</a><br>リファレンスなので、ひと通り情報は乗っているが、ステップバイステップで構築の手順となっていなく、コマンド例ももう一声ほしいところ。<br>総じて、読み解くのに読者の頑張りが必要なドキュメント。。。</p>
<p><a href="http://kan3aa.hatenablog.com/entry/2015/06/05/135150" target="_blank" rel="external">CentOS7.1でPacemaker+corosyncによるクラスタを構成する（Part.1）</a><br>CentOS7 + Pacemaker でのクラスタ構築からVIP設定までが非常に丁寧にステップバイステップで解説されています。<br>最終的には、このエントリもほぼ似たような感じになってしまいました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回は <a href="http://yenjoji.github.io/pages/2015/09/08/stash-ha-101/">前回 「Atlassian Stashの耐障害性を高めよう その１ プランニング編」</a> の続きとして、<br>HAクラスタのセッ]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その1 プランニング編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/08/stash-ha-101/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/08/stash-ha-101/</id>
    <published>2015-09-08T03:10:00.000Z</published>
    <updated>2015-09-19T13:08:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="はじめに">はじめに</h1><p>私の所属しているプロジェクトではAtlassian Stash （Git）でソースコードを管理しています。<br><br>普段何気なく使用しているGitですが、もはや手放すことが難しい存在です。</p>
<p>そんな中、ふと「もしもStashのデータが消失したら。」と言う事態を想像してみました。<br><br>Gitは分散バージョン管理なので、各々のローカルのGitリポジトリをかき集めれば必要なものは復旧できそうです。</p>
<p>どうやらソースコードの消失などの最悪の事態は発生しないことはわかりましたが、<br><br>Stashを使用していればサーバーの冗長構成は必要ないでしょうか。</p>
<p><a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">Atlassian</a>のドキュメントによると、Stashに障害が発生した場合、復旧作業をおこなっている間、下記の様な状況になります。</p>
<ul>
<li><p>できること</p>
<ul>
<li>開発者<ul>
<li>コードのコミット</li>
<li>ブランチの作成</li>
<li>ブランチの切り替え</li>
<li>過去のコミットと差分確認</li>
<li>…</li>
<li>Stashを経由せずに他の開発者のリポジトリからフェッチする</li>
</ul>
</li>
</ul>
</li>
<li><p>できないこと</p>
<ul>
<li>開発者<ul>
<li>リポジトリのクローン</li>
<li>セントラルリポジトリ（Stash）からのフェッチ</li>
<li>セントラルリポジトリ（Stash）へのプッシュ</li>
<li>Stash UI へのアクセス （プルリクエストの操作など）</li>
</ul>
</li>
<li>CI/CDサーバー<ul>
<li>リポジトリのクローン</li>
<li>変更点の取得</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>作業は続行不可能では無いですが、チーム開発を進めていく上でかなりの制限となってしまいそうです。</p>
<p>というわけで、転ばぬ先の杖ということでStashの冗長化に挑戦してみたいと思います。</p>
<p>Stash冗長化について調べてみたところ、本家Atlassianに<a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">冗長化についてのドキュメント</a>が用意されていました。<br></p>
<h1 id="冗長構成のパターン">冗長構成のパターン</h1><p>Atlassianのドキュメントによると、冗長構成には以下の様なパターンがあるようです</p>
<table>
<thead>
<tr>
<th>構成</th>
<th>復旧時間</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Single node</td>
<td>hours-days</td>
<td>単一ノード</td>
</tr>
<tr>
<td>Cold Standby</td>
<td>2-10 min</td>
<td>サーバーはActive StandByともに起動させておくが、StashはActive側のみ起動しておく構成。Active側が障害となった場合StandBy側のStashを起動させ、切り替える。</td>
</tr>
<tr>
<td>Warm Standby</td>
<td>0-30 Sec</td>
<td>Active Standby 双方にStashを起動させておき、Active側が障害となった場合切り替える</td>
</tr>
<tr>
<td>Active-Active</td>
<td>&lt;5 Sec</td>
<td>マルチマスタ＆負荷分散構成 ただし Stash Data Center が必要</td>
</tr>
</tbody>
</table>
<p>この構成の内、Active-Active構成をするためには Stash Data Centerを使う必要があるらしく、<br>予算的に厳しい様な予感がするので今回は見送ることとします。</p>
<p>また、Warm StandBy 構成 はStashがメモリ上にロック情報などを持っているため、現時点でこの構成は取れないそうです。</p>
<p>そうすると、コストとメリットのバランスを考えた場合Cold Standby構成を取るのが良いようです。<br><br>（Atlassianのドキュメントもこの構成でクラスタを組んでいます。）</p>
<p>図で表すと、下記の様になります。おおむねAtlassianのドキュメント通りですが、データベースのみ、他のAtlassianプロダクトと共有することを考えて、Stashとは別のサーバーとしています。</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21266389192/in/dateposted-public/" title="atlassian_stash_cluster_network_diagram" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/710/21266389192_c7ff5dfa6d.jpg" width="407" height="500" alt="atlassian_stash_cluster_network_diagram"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>細かいソフトウェアのバージョンなどはもう少し調べてみてから決定していきたいと思います。</p>
<p>というわけで、だいたいの構成の目処がついたところで、今回はここまでとしたいと思います。</p>
<p>次回は実際のクラスターの構築を行ってみたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="はじめに">はじめに</h1><p>私の所属しているプロジェクトではAtlassian Stash （Git）でソースコードを管理しています。<br><br>普段何気なく使用しているGitですが、もはや手放すことが難しい存在です。</p>
<p>そんな中、ふと「も]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian製品のアドバンテージ「Application Link」]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/05/about-application-link/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/05/about-application-link/</id>
    <published>2015-09-05T03:00:00.000Z</published>
    <updated>2015-09-27T15:31:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Application_Linkとは">Application Linkとは</h1><p>アプリケーションリンクとは、Atlassian製品にデフォルトで含まれている、Jira, Confluence, Stash, FishEye, Crucible, Bambooの各製品を相互に連携させるための機能です。<br>アプリケーションリンクを設定すると、リンクさせた製品同士が相互に情報をやりとりしたり、お互いの機能を利用することが出来ます。<br>例えば、JiraとConfluenceをリンクさせた場合、JiraのチケットをConfluenceのマクロを利用してリンクさせたり、<br>Confluenceで任意の文字列を選択した状態で右クリックからJiraのチケットを作成するなど、お互いの利便性を向上させることが出来る機能です。</p>
<p>Atlassian以外の製品でも、CIツールと、リポジトリ管理ツールの連携や、課題管理ツールとCIツールの連携などが用意されている場合もありますが、<br>違うプロダクトを連携させる場合とくらべてAtlassianのアプリケーションリンクはより密接な連携ができるというメリットがあります。<br>また、設定も簡単にできるため、「サクッと連携できると思っていたけのに意外とハマった。」ということが起こらない点もメリットといえると思います。</p>
<h1 id="Bamboo_+_Stash_をリンクすると">Bamboo + Stash をリンクすると</h1><p>では、具体的にはどうなるのでしょうか。<br><a href="https://confluence.atlassian.com/bamboo/integrating-bamboo-with-atlassian-applications-289276942.html" target="_blank" rel="external">Bambooの公式ドキュメント</a> によると、<br>リンクをすることにより以下のことができるようになります。</p>
<ol>
<li>Stashのリポジトリに新しいコードがpushされると自動的にビルドを実行させることが出来ます。（Stash以外のリポジトリの場合はBambooが定期的に更新を確認する必要があります）</li>
<li>Stashの指定したリポジトリに新しいブランチが作成された場合、Bambooが自動的にそれを検知し、ブランチのビルドプランを作成します。<br>また、ブランチが削除された場合はBamboo上のブランチに対するビルドプランを自動的に削除することも可能です。</li>
<li>Bambooのビルド結果から、そのビルドに含まれているコミットの変更差分確認画面へダイレクトにジャンプ出来ます。</li>
<li>Bambooのビルドに含まれているStashのコミットのリストをBambooのビルド結果から確認出来ます。</li>
<li>コミットやプルリクエストに対するビルド結果をStash側で確認することが出来ます。</li>
</ol>
<h2 id="ブランチの自動作成">ブランチの自動作成</h2><p>アプリケーションリンクの機能は業務でも使用していますが、今回はその中でも便利だと感じているブランチの自動作成機能を紹介します。</p>
<ul>
<li>Bambooのビルドプラン設定からブランチの自動作成設定が出来ます、すべてのブランチを作成することもできますし、正規表現にマッチするブランチだけを自動作成することも出来ます。<br>GitFlowで開発している場合に、featureブランチのみ自動作成するという設定も可能です。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21758626085/in/dateposted-public/" title="20150904_0936_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/649/21758626085_e53647b3c9.jpg" width="500" height="360" alt="20150904_0936_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Stashで（もしくはGitコマンド経由で）ブランチを作成すると。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21571764779/in/dateposted-public/" title="20150904_0939_ブランチの作成_-_Stash_01" target="_blank" rel="external"><img src="https://farm6.staticflickr.com/5717/21571764779_daed59fe99.jpg" width="500" height="359" alt="20150904_0939_ブランチの作成_-_Stash_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Bambooが自動的にブランチをビルドプランに追加してくれます。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21746980562/in/dateposted-public/" title="20150904_0948_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/648/21746980562_c50df04b23.jpg" width="500" height="360" alt="20150904_0948_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>ビルド対象のリポジトリが少ないうちは、Bambooの管理画面から手動でブランチを追加する作業も苦になりませんが、<br>リポジトリが増えてくるに連れて徐々に便利さが実感できるようになってきます。</p>
<h1 id="その他の製品のApplication_Linkについて">その他の製品のApplication Linkについて</h1><p>さて、こんなに便利なApplicationLinkですが、今回例に上げたBambooとStashの組み合わせ以外にも様々な組み合わせが存在します。<br>ApplicationLinkを設定することでどんなメリットがあるかは下記リンク先のドキュメントをご参照ください。</p>
<p>Stash<br><a href="https://confluence.atlassian.com/stash/integrating-stash-with-atlassian-applications-414812190.html" target="_blank" rel="external">https://confluence.atlassian.com/stash/integrating-stash-with-atlassian-applications-414812190.html</a></p>
<p>Jira+Confluence<br><a href="https://confluence.atlassian.com/doc/use-jira-and-confluence-together-427623543.html" target="_blank" rel="external">https://confluence.atlassian.com/doc/use-jira-and-confluence-together-427623543.html</a></p>
<p>Bamboo+Confluence<br><a href="https://confluence.atlassian.com/bamboo/integrating-bamboo-with-confluence-289276944.html" target="_blank" rel="external">https://confluence.atlassian.com/bamboo/integrating-bamboo-with-confluence-289276944.html</a></p>
<p>RedmineなどのAtlassian製品以外のツールでも、CIサーバーや、リポジトリ管理ツールなどとの連携は可能ですが、<br>簡単で設定でハマりにくいという点でAtlassian製品ツールが完結させられるというメリットは大きいです。</p>
<p>もし、Atlassian製品をお使いなら、非常に便利ですので、是非アプリケーションリンクを活用してみてください。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Application_Linkとは">Application Linkとは</h1><p>アプリケーションリンクとは、Atlassian製品にデフォルトで含まれている、Jira, Confluence, Stash, FishEye, Crucible, Bam]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Bamboo + Crowd 後編：Crowdとの連携]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/08/12/integrated-crowd-with-bamboo/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/08/12/integrated-crowd-with-bamboo/</id>
    <published>2015-08-12T03:00:00.000Z</published>
    <updated>2015-09-27T15:35:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="BambooとCrowdの連携">BambooとCrowdの連携</h1><p>今回は前回の続きとして、BambooとCrowdを連携させて、<br>ユーザーをCrowdで一元管理できるようにしたいと思います。</p>
<p>前回同様、基本的には<a href="https://confluence.atlassian.com/display/CROWD/Integrating+Crowd+with+Atlassian+Bamboo" target="_blank" rel="external">公式の手順</a> に沿ってすすめていきます。</p>
<p>全体的な流れは</p>
<ol>
<li>Crowdにユーザーとグループ、Bambooとの連携設定を行う</li>
<li>Bamboo側でCrowdへの接続設定を行う</li>
<li>Bambooのユーザー認証をCrowdに切り替える</li>
</ol>
<p>です。</p>
<h1 id="Crowd設定">Crowd設定</h1><p>まずはCrowd側にBamboo用のユーザーの作成と、連携のための設定を行います。</p>
<p>Crowdに以下のユーザーを作成してBambooと連携します。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Group</th>
<th>Bambooのロール</th>
</tr>
</thead>
<tbody>
<tr>
<td>bamboo</td>
<td>bamboo-admin</td>
<td>管理者</td>
</tr>
<tr>
<td>bamboo-user</td>
<td>bamboo-user</td>
<td>一般ユーザー</td>
</tr>
</tbody>
</table>
<h2 id="ユーザーの追加">ユーザーの追加</h2><p>Bamboo用にユーザーを追加します。</p>
<ul>
<li>Top画面から「Users」タブをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857718703/in/dateposted-public/" title="0810_1111_Atlassian_Crowd_-_Administration_console" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/348/19857718703_95f9644a40.jpg" width="500" height="344" alt="0810_1111_Atlassian_Crowd_-_Administration_console"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Add User」リンクをクリックし、ユーザー登録画面にて必要な情報を入力し「Create」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20484923911/in/dateposted-public/" title="0810_1118_Atlassian_Crowd_-_Users" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/398/20484923911_e250a52b18.jpg" width="500" height="344" alt="0810_1118_Atlassian_Crowd_-_Users"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザーも追加します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290542940/in/dateposted-public/" title="0810_1511_Atlassian_Crowd_-_Add_user" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/403/20290542940_11d5c7b99d.jpg" width="500" height="344" alt="0810_1511_Atlassian_Crowd_-_Add_user"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="グループの作成">グループの作成</h2><p>Bambooでユーザーのロール制御を行うため、ロールに対応したグループを作成します。</p>
<ul>
<li>「Groups」をクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20469901562/in/dateposted-public/" title="0810_1512_Atlassian_Crowd_-_Groups" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/304/20469901562_baf6196f36.jpg" width="500" height="344" alt="0810_1512_Atlassian_Crowd_-_Groups"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Add Group」リンクをクリックし、グループ登録画面にて必要な情報を入力し「Create」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20478653185/in/dateposted-public/" title="0810_1513_Atlassian_Crowd_-_Add_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/561/20478653185_ded6662813.jpg" width="500" height="344" alt="0810_1513_Atlassian_Crowd_-_Add_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザー用グループも作成します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20291988679/in/dateposted-public/" title="0810_1514_Atlassian_Crowd_-_Add_group" target="_blank" rel="external"><img src="https://farm4.staticflickr.com/3731/20291988679_7901418bdd.jpg" width="500" height="344" alt="0810_1514_Atlassian_Crowd_-_Add_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="グループへユーザーを登録">グループへユーザーを登録</h2><p>作成したグループへユーザーを登録します。<br>管理者にしたいユーザーは bamboo-admin グループへ。<br>一般ユーザーにしたいユーザーは bamboo-user グループへ登録します。</p>
<ul>
<li>「Groups」をクリック、「bamboo-admin」リンクをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19855985444/in/dateposted-public/" title="0810_1943_Atlassian_Crowd_-_Groups" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/481/19855985444_abe141bf77.jpg" width="500" height="344" alt="0810_1943_Atlassian_Crowd_-_Groups"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Direct members」タブをクリックし「Add Users」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857716853/in/dateposted-public/" title="0810_1944_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/284/19857716853_931929b751.jpg" width="500" height="344" alt="0810_1944_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Search」ボタンをクリックすると、ユーザーが表示されるので、管理者にしたいユーザーにチェックをし、「Add Selected Users」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290607838/in/dateposted-public/" title="0810_1945_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/340/20290607838_576329772c.jpg" width="500" height="344" alt="0810_1945_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザーも一般ユーザー用のグループへ登録します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857716413/in/dateposted-public/" title="0810_1949_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/325/19857716413_3b98a7619f.jpg" width="500" height="344" alt="0810_1949_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="アプリケーションの作成">アプリケーションの作成</h2><p>Crowdで作成したユーザーとBambooを関連付けるため、アプリケーションを登録します。</p>
<ul>
<li>「Application」-&gt; Add application」をクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290542470/in/dateposted-public/" title="0810_1659_Atlassian_Crowd_-_Applications" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/442/20290542470_d6fabcea94.jpg" width="500" height="344" alt="0810_1659_Atlassian_Crowd_-_Applications"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>必要な情報を入力し「Next」をクリック</li>
</ul>
<table>
<thead>
<tr>
<th>項目</th>
<th>設定値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Apprication type</td>
<td>Bamboo</td>
</tr>
<tr>
<td>Name</td>
<td>Bamboo</td>
</tr>
<tr>
<td>Password</td>
<td>任意のパスワード</td>
</tr>
</tbody>
</table>
<p>ここで設定するパスワードはBambooとCrowdが連携する際の認証に使用します</p>
<ul>
<li>BambooとCrowdの通信設定を入力し「Next」をクリック<br>URLにユーザーがアクセスするURLを、Remote IP AddressにBambooサーバーとCrowdサーバーが通信する際のBambooサーバーのIPアドレスを設定します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20484923151/in/dateposted-public/" title="0810_1702_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/262/20484923151_130eb04853.jpg" width="500" height="344" alt="0810_1702_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>ユーザーディレクトリの選択<br>Bambooの認証で使用するユーザーが存在する、ユーザーディレクトリを選択します。<br>今回では、先ほどの手順でユーザーを作成した際に指定したディレクトリを選択します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857717813/in/dateposted-public/" title="0810_1703_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm4.staticflickr.com/3744/19857717813_8e426830fd.jpg" width="500" height="344" alt="0810_1703_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>グループの選択<br>Bambooで認証に使用するグループを追加します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20452412876/in/dateposted-public/" title="0810_1708_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/309/20452412876_487acf451f.jpg" width="500" height="344" alt="0810_1708_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>登録内容の確認<br>登録内容を確認し登録します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290608388/in/dateposted-public/" title="0810_1709_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/339/20290608388_26006ce9f9.jpg" width="500" height="344" alt="0810_1709_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h1 id="Bamboo_の設定">Bamboo の設定</h1><h2 id="Crowdとの通信設定">Crowdとの通信設定</h2><ul>
<li>crowd.properties の編集<br>{BAMBOO_ROOT:/opt/atlassian/bamboo}/atlassian-bamboo/WEB-INF/classes/crowd.properties を編集します。</li>
</ul>
<p>マニュアルには以下の４点を変更せよと書いてありますが、session.validationintervalはデフォルトの２分で問題ないためそのままにします。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>application.name</td>
<td>bamboo</td>
</tr>
<tr>
<td>application.password</td>
<td>{CrowdのApplication設定で設定したパスワード}</td>
</tr>
<tr>
<td>crowd.server.url</td>
<td><a href="http://127.0.0.1:8095/crowd/services/" target="_blank" rel="external">http://127.0.0.1:8095/crowd/services/</a></td>
</tr>
<tr>
<td>session.validationinterval</td>
<td>2</td>
</tr>
</tbody>
</table>
<ul>
<li>Bambooの認証システムのCrowdへの切り替え<ul>
<li>atlassian-user.xml の編集<br>{BAMBOO_ROOT:/opt/atlassian/bamboo}/atlassian-bamboo/WEB-INF/classes/atlassian-user.xml を編集します。</li>
</ul>
</li>
</ul>
<p>Crowd用の設定がコメントアウトされているので、コメントを外します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!--&#60;crowd key=&#34;crowd&#34; name=&#34;Crowd Repository&#34;/&#62;--&#62;&#10;&#8595;&#10;&#60;crowd key=&#34;crowd&#34; name=&#34;Crowd Repository&#34;/&#62;</span><br></pre></td></tr></table></figure>
<h2 id="ユーザーディレクトリの設定">ユーザーディレクトリの設定</h2><ul>
<li>Bambooに管理者でログインし 「右上の歯車マーク &gt; Overview」をクリック</li>
<li><p>「Bamboo administration」画面が表示されるので 「Security」グループの「User repositories」をクリック</p>
</li>
<li><p>Server URL, Application Nameを確認、 Application PasswordにCrowdに設定したパスワードを入力します。</p>
</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290541630/in/dateposted-public/" title="0810_1934_User_repositories_-_Atlassian_Bamboo" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/480/20290541630_fdb19ac328.jpg" width="500" height="344" alt="0810_1934_User_repositories_-_Atlassian_Bamboo"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>これでめでたくBambooの認証をCrowdに統合することが出来ました。</p>
<p>連携しているサービスがBambooだけですとそれほどメリットが感じられないかも知れませんが、 ここで上げたBamboo以外、Jira、Confluence、StashなどのAtlassianの製品を導入していくにつれてユーザー管理コストの軽減効果が実感できるものと考えております。</p>
<p>また、ユーザーの追加・削除漏れなどのセキュリティリスクの軽減にもつながりますので、Atlassian製品導入の際には合わせてCrowdの導入もご検討ください。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="BambooとCrowdの連携">BambooとCrowdの連携</h1><p>今回は前回の続きとして、BambooとCrowdを連携させて、<br>ユーザーをCrowdで一元管理できるようにしたいと思います。</p>
<p>前回同様、基本的には<a href="]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="CI" scheme="http://yenjoji.github.io/pages/pages/tags/CI/"/>
    
      <category term="Crowd" scheme="http://yenjoji.github.io/pages/pages/tags/Crowd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Bamboo + Crowd 前編：Bambooの導入]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/08/04/installing-atlassian-bamboo/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/08/04/installing-atlassian-bamboo/</id>
    <published>2015-08-04T03:00:00.000Z</published>
    <updated>2015-09-27T15:34:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Bambooとは">Bambooとは</h1><p>Atlassian社製のCI（継続的インテグレーション）/CD（継続的デリバリー）を実現するソフトウェアであり、同様のソフトウェアにはJenkinsやCircleCI、TravisCIなどが存在します。</p>
<p>今回は、そんなBambooをセットアップし、ユーザー管理を以前紹介したCrowdに統合する方法をご紹介したいと思います。</p>
<p>これにより、システム管理者、運用者の負荷を軽減してくれるBamboo。それ自体の管理負荷を下げて、より生産的で楽しいことに注力できるようにしたいと思います。</p>
<p>今回は、前編として、Bambooのインストール方法をご紹介させて頂きます。</p>
<h1 id="Bamboo_の_インストール">Bamboo の インストール</h1><p>基本的には公式手順にのとって進めていきます。</p>
<h2 id="前提条件">前提条件</h2><h3 id="システム環境">システム環境</h3><ul>
<li>OS   : CentOS 7.0</li>
<li>Java : Oracle JDK 8u51</li>
<li>DB   : 5.5.40-MariaDB</li>
</ul>
<h3 id="Bamboo配置先">Bamboo配置先</h3><ul>
<li>インストール先 : /opt/atlassian/bamboo</li>
<li>データディレクトリ : /var/atlassian/application-data/bamboo</li>
</ul>
<h2 id="インストール">インストール</h2><h3 id="最新版のダウンロード">最新版のダウンロード</h3><ul>
<li>公式サイトより最新版をダウンロードします。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-5.9.3.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="展開と配置">展開と配置</h3><p>ダウンロードしたBambooのアーカイブを展開し、配置します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf atlassian-bamboo-5.9.3.tar.gz&#10;mv atlassian-bamboo-5.9.3 /opt/atlassian/&#10;ln -s /opt/atlassian/atlassian-bamboo-5.9.3 /opt/atlassian/bamboo</span><br></pre></td></tr></table></figure>
<h3 id="bambooの初期設定">bambooの初期設定</h3><ul>
<li>Bambooデータパスの設定</li>
</ul>
<p>マニュアルに記載のある通り<br>/opt/atlassian/bamboo/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties<br>を以下の様に修正します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bamboo.home=/var/atlassian/application-data/bamboo</span><br></pre></td></tr></table></figure>
<ul>
<li>Bambooメモリ設定の変更<br>/opt/atlassian/bamboo/bin/setenv.sh のメモリ設定を任意の値に変更します。<br>最大1GB程度にしておけばひとまず問題ないと思われます。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM_MINIMUM_MEMORY=&#34;512m&#34;&#10;JVM_MAXIMUM_MEMORY=&#34;1024m&#34;</span><br></pre></td></tr></table></figure>
<h3 id="データベースの準備">データベースの準備</h3><p>次にデータ保存先であるデータベースを準備します。<br>今回はBambooのデータ保存先としてcrowdインストール編で用意したMySQL(MariaDB)を使用します。</p>
<ul>
<li>データベースの作成</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> bamboo <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_bin;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ユーザーを作成し権限を付与</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> bamboo.* <span class="keyword">TO</span> <span class="string">'bamboouser'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'bamboopass'</span>;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>DBドライバの配置</li>
</ul>
<p>Mysqlのドライバを予めBamboo配下に配置しておきます。</p>
<p>/opt/atlassian/bamboo/lib</p>
<p>以下に ドライバのjarファイルを配置しておきます。</p>
<h3 id="起動">起動</h3><p>ひとまず起動します</p>
<h2 id="初期設定">初期設定</h2><p><a href="http://{bambooインストールIP}:8085/" target="_blank" rel="external">http://{bambooインストールIP}:8085/</a> にアクセスすると、<br>初期設定画面が表示されるので、画面に従って初期設定を行います。</p>
<ul>
<li>ライセンスキーの入力<br>事前に用意してあればそのライセンスキーを入力します。<br>評価用であればAtlassian公式サイトよりトライアルキーが取得出来ますので、それを入力します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520972128/in/dateposted-public/" title="Bamboo_setup_wizard_-_Atlassian_Bamboo_1006" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/675/21520972128_3400b65db1.jpg" width="500" height="335" alt="Bamboo_setup_wizard_-_Atlassian_Bamboo_1006"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Bambooディレクトリ設定<br>通常であれば変更の必要がないため、そのままContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21708803895/in/dateposted-public/" title="General_configuration_-_Atlassian_Bamboo_1008" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/632/21708803895_6e621099ac.jpg" width="500" height="335" alt="General_configuration_-_Atlassian_Bamboo_1008"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データベースの選択<br>Bambooのデータを保存するデータベースを選択します。<br>今回はMySQLに保存するため、MySQLを選択しContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21086099034/in/dateposted-public/" title="Choose_a_database_configuration_-_Atlassian_Bamboo_1443" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/670/21086099034_5a003519a7.jpg" width="500" height="328" alt="Choose_a_database_configuration_-_Atlassian_Bamboo_1443"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データベース接続パラメータの設定<br>データベースの準備で作成したデータベースへの接続パラメータを入力しContinueします。<br>Continueを押すと、データベースの初期設定が始まります。<br>しばらく時間がかかるので、根気よく待ちましょう。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21521013788/in/dateposted-public/" title="Choose_how_you_wish_Bamboo_to_connect_to_your_database_-_Atlassian_Bamboo_1449" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/579/21521013788_2813a91496.jpg" width="500" height="335" alt="Choose_how_you_wish_Bamboo_to_connect_to_your_database_-_Atlassian_Bamboo_1449"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データ移行<br>今回は新規インストールですので、「Createa new Bamboo home」を選択しContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520969818/in/dateposted-public/" title="Select_starting_data_for_Bamboo_-_Atlassian_Bamboo_1537" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/658/21520969818_909f6fe436.jpg" width="500" height="334" alt="Select_starting_data_for_Bamboo_-_Atlassian_Bamboo_1537"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>管理ユーザーの作成<br>任意のIDとパスワードで管理ユーザーを作成します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520969468/in/dateposted-public/" title="Set_up_administrator_user_-_Atlassian_Bamboo_1538" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/779/21520969468_47458f8415.jpg" width="500" height="327" alt="Set_up_administrator_user_-_Atlassian_Bamboo_1538"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>以上で、Bambooのインストールは完了です。<br>次回は、以前インストールしたCrowdとBambooを連携させて、ユーザー管理をCrowdに統合したいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Bambooとは">Bambooとは</h1><p>Atlassian社製のCI（継続的インテグレーション）/CD（継続的デリバリー）を実現するソフトウェアであり、同様のソフトウェアにはJenkinsやCircleCI、TravisCIなどが存在します。</p>
]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="CI" scheme="http://yenjoji.github.io/pages/pages/tags/CI/"/>
    
      <category term="Crowd" scheme="http://yenjoji.github.io/pages/pages/tags/Crowd/"/>
    
  </entry>
  
</feed>