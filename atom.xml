<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Rouleur]]></title>
  
  <link href="/pages/atom.xml" rel="self"/>
  <link href="http://yenjoji.github.io/pages/pages//"/>
  <updated>2016-12-17T15:36:31.000Z</updated>
  <id>http://yenjoji.github.io/pages/pages//</id>
  
  <author>
    <name><![CDATA[yenjoji]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[jirolian.info というサービスをつくりました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/12/17/20161217-jirolian-info/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/12/17/20161217-jirolian-info/</id>
    <published>2016-12-17T14:49:23.000Z</published>
    <updated>2016-12-17T15:36:31.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちは。ラーメン二郎歴１年半のyenjojiです。<br>この記事は<a href="http://www.adventar.org/calendars/1363" target="_blank" rel="external">ラーメン二郎アドベントカレンダー</a>の17日目の記事です。</p>
<p>今日は、ラーメン二郎が好きなエンジニアが、いかにしてワンチャンスを逃さずにラーメンを食べるかを考えた結果作るに至ったサービスについて書きます。<br>完全なる自分向けサービスなのですが、同好者の皆さんのお役に少しでも立てば幸いです。</p>
<h1 id="TL;DR">TL;DR</h1><ul>
<li>二郎が好きなので現在地から近い順に二郎を検索する<a href="https://jirolian-info.herokuapp.com/" target="_blank" rel="external">Webサービス</a>を作りました</li>
<li>データを<a href="https://www.github.com/yenjoji/jirolian_data" target="_blank" rel="external">GitHub</a>で公開しているので、ラーメン屋さん情報を提供してくださる優しい方がいればプルリクお願いします</li>
<li>要望とか、データが違うよとかご意見は<a href="https://twitter.com/jirolian_info" target="_blank" rel="external">専用Twitterアカウント</a>までよろしくお願いします。</li>
</ul>
<h1 id="今すぐ食べたいをサポートするサービス">今すぐ食べたいをサポートするサービス</h1><p>勉強会などで、普段行かない場所に訪れることがありました。<br>概ね懇親会があったりしますが、中には懇親会がなく、そのまま解散になる勉強会もあったりします。</p>
<p>そんな、あまり馴染みのない土地で、21時位に時間ができてしまったら？<br>まっすぐ家に帰るのもよし、<br>そのへんでノマドするもよし、<br>でも、せっかく普段は行かない場所にいるのなら、そこから行ける二郎（インスパイア）でラーメンを食べたいものです。<br>そんな土地勘がない場所でも、迷わずラーメンを食べに行けるようになったらいいなと思い、このサービスを作りました。</p>
<h1 id="データが少ないので">データが少ないので</h1><p>人力でデータを入力している関係もあって、データはラーメン二郎の各店舗と、自分がいったことのあるインスパイア系の店舗を中心になっています。<br>自分が行ったことのない店舗もどんどん追加していきたいので、おすすめの店舗があればぜひ教えてください。</p>
<p>データファイル(JSON)形式をgithubリポジトリにおいてありますので、お時間がある方はデータファイルを作成して、プルリクエストなど投げていただければ更にうれしいです。<br>（間に合ってないですが、そのうちReadmeにデータフォーマットを書きます！）</p>
<h1 id="ご意見、ご要望など">ご意見、ご要望など</h1><p>データが間違ってる、この店舗を追加して欲しい、こんな項目を表示して欲しいなどは<a href="https://twitter.com/jirolian_info" target="_blank" rel="external">専用Twitterアカウント</a>までよろしくお願いします。</p>
<p>それでは、皆さんよいラーメン二郎ライフを！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちは。ラーメン二郎歴１年半のyenjojiです。<br>この記事は<a href="http://www.adventar.org/calendars/1363" target="_blank" rel="external">ラーメン二郎アドベントカレンダー</a>の]]>
    </summary>
    
      <category term="jiro" scheme="http://yenjoji.github.io/pages/pages/tags/jiro/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ソフトウェア品質勉強会「開発とテストが一体となったソフトウェア開発」]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/11/08/20161108-teyamagu/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/11/08/20161108-teyamagu/</id>
    <published>2016-11-08T10:15:37.000Z</published>
    <updated>2016-12-17T15:36:43.000Z</updated>
    <content type="html"><![CDATA[<p>11/8 に渋谷ヒカリエの31F株式会社medibaで行われた<a href="http://connpass.com/event/43041/" target="_blank" rel="external">ソフトウェア品質勉強会「開発とテストが一体となったソフトウェア開発」</a> に参加してきました。</p>
<p>内容は、<a href="http://jasst.jp/symposium/jasst16hokkaido.html" target="_blank" rel="external">JaSST 2016 Hokkaido</a> の基調講演の再演＋会場の参加者との多めの質疑応答でした。<br>主催者の方が、せっかくなので、講演だけでなく質疑応答を多めにできるようにした。という作戦がはまって、活発に質疑がかわされて良い会でした。</p>
<h1 id="感じたこと">感じたこと</h1><ul>
<li>組織としてのお墨付き</li>
<li>適切というか大胆な権限委譲</li>
<li>適切な評価システム<br>このあたりが整っているとチームは自律的になるんだなと感じました</li>
</ul>
<p>セッションの内容は<a href="http://www.slideshare.net/teyamagu/ss-65630230" target="_blank" rel="external">スライドが公開</a>されているので、そちらを参照していただくのがいいと思います。</p>
<h1 id="以下メモ">以下メモ</h1><h2 id="テストエンジニアのチームとの関わり方">テストエンジニアのチームとの関わり方</h2><ul>
<li><p>Agile Testingのスライドに書いてある部分を読めばわかる</p>
<ul>
<li>テストエンジニアならよりよく分かる→著者がテストエンジニアだから</li>
</ul>
</li>
<li><p>テストエンジニアはプロジェクト初期から関わる</p>
<ul>
<li>なぜか？</li>
</ul>
</li>
<li><p>Yahoo!も道半ばなので、完成形ではない。</p>
</li>
<li><p>パターン1</p>
<ul>
<li><p>プロジェクト初期からバリバリ関わっているわけではない</p>
</li>
<li><p>自動化したほうが楽なものはプログラマが自動化</p>
<ul>
<li>→ テストエンジニアがプログラマに提案する感じ？</li>
</ul>
</li>
<li>プログラマとテストエンジニアがみつにコミュニケーションを取っている</li>
</ul>
</li>
<li><p>パターン2</p>
<ul>
<li>テストエンジニアは業務委託さんへお願いするところを決める＋質問とかのカウンター</li>
<li>パターン1より処理できるテストケース数はスケールする<ul>
<li>大きな案件に向く</li>
</ul>
</li>
<li>プログラマと業務委託のプロキシがいるのでスムーズに行くことが多い</li>
</ul>
</li>
<li><p>パターン3</p>
<ul>
<li>典型的なパターン</li>
<li>細かいテストはプログラマがやる</li>
<li><p>テストエンジニアはサービス全体を見据えたテスト設計＋実施（リリース前）</p>
<ul>
<li>自分の現場に一番近い形</li>
</ul>
</li>
<li><p>小さいリリース</p>
<ul>
<li>軽微な変更（誤植とか）</li>
</ul>
</li>
<li><p>もともとWFだったところがやっているプロセス</p>
<ul>
<li>WFでやっている案件だとこういうパターンになるかもね → あー、そうだね～。うちの現場。</li>
</ul>
</li>
<li><p>Q:それぞれのチームの規模感は</p>
<ul>
<li>A:1チーム10人いかないくらい<ul>
<li>大きくなったら分割して、多チーム構成にします</li>
</ul>
</li>
</ul>
</li>
<li>Q:Sprintのきかんとか、リリースの単位とかは<ul>
<li>A:早いところだと2日くらい→緊急リリース的な<ul>
<li>Agile開発しているところは1w,2wが多い</li>
<li>サーバーサイドはできたらすぐ出す</li>
<li>アプリは審査があるのでちょっとサイクルが長めになる傾向</li>
</ul>
</li>
</ul>
</li>
<li>Q:テストは一斉にしますか？　順次しますか？<ul>
<li>A:プロダクトによる、アプリとかはまとまってやる<ul>
<li>できれば切りたいので、細かくする方向に持っていきたい</li>
</ul>
</li>
</ul>
</li>
<li>Q: チームは解体とか結構しますか<ul>
<li>A:人の入れ替えは半期、一年とか<ul>
<li>チームのライフサイクルはプロダクトに依存する</li>
</ul>
</li>
<li>Q: 解散してしまうとノウハウが消えてしまうんじゃないか<ul>
<li>A: そこは社内でも問題、だがずっと一緒のチームにいると学びが落ちて行く人もいるので</li>
</ul>
</li>
</ul>
</li>
<li>Q: パターン3でのコミュニケーションのスキームは<ul>
<li>A:変更点とかをビジネスの人と、テストを変更しなければいけないところ<ul>
<li>基本的にはテストエンジニアとプログラマが近くにいるので、適宜コミュニケーションをすればいいと思ってる</li>
</ul>
</li>
</ul>
</li>
<li>Q:テストの範囲→テストエンジニアはQAですか？<ul>
<li>A:QAって？　→第三者検査をする人<ul>
<li>みんな当事者なので、第三者的な感じではなくプロダクトを一緒に作っていく人</li>
<li>外部部門というスタンスではなく、ちかしい感じ</li>
</ul>
</li>
</ul>
</li>
<li>Q:ドキュメントは<ul>
<li>A:情報共有できる雑な最低限のものをConfluenceやExcelとかに残っている<ul>
<li>粒度はまちまち</li>
</ul>
</li>
</ul>
</li>
<li>Q: ドキュメントがない状態のばあい、ミドルウェアのバージョンアップのときとかにフルにリグレッションテストとかをしないといけないと思うけど、困りませんか<ul>
<li>A:全く前回と同じテストしないといけない理由が無い<ul>
<li>お客様が使えないといけないというところが担保できていればいいので（そこは担保されているということ？　自動化されているとか？　いつもやってるテストケースがあるとか？）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="組織の話">組織の話</h2><ul>
<li><p>部門が分かれていると、部門ごとに責任分界点が生まれる　→　ビジネスにフォーカスできないよね！</p>
<ul>
<li>なので組織を変えていく<ul>
<li>（ここに関しては今の現場はできている、ところもある）</li>
</ul>
</li>
</ul>
</li>
<li><p>参考書籍：JAICAのPDFがいい感じ、安い、生々しい</p>
</li>
<li><p>なぜ、あじゃいる</p>
<ul>
<li>なんかアジャイルだと解決できるらしいぜ！　→　やってみっぺ！　→　うまく行った！　→　テンション上がった！　→　普及した！</li>
</ul>
</li>
<li><p>経営陣刷新　→　爆速</p>
<ul>
<li>COOのトップメッセージとしてスモールチームでやりなさい<ul>
<li>作ったら出していいよへのシフト<ul>
<li>QAへ責任転嫁できない　→　開発チームの責任感が大きく　→　テストしないとヤヴァイ！　→　チームへテストエンジニアが参画！</li>
</ul>
</li>
</ul>
</li>
<li><p>QA担当のパラダイムシフト</p>
<ul>
<li>受ける人から、自分で取りに行かないといけないように</li>
</ul>
</li>
<li><p>Q: もともとQA担当の人ってどれくらいいました</p>
<ul>
<li>A: 40人位、業務委託の人も使っていた<ul>
<li>テスト範囲も広くない＆リードタイムが長かった</li>
<li>Q: テスト支援部門は<ul>
<li>A: 15人位</li>
<li>Q: 15人ですべてのチームの手伝いを？<ul>
<li>A: 各チームのテストエンジニアのサポートと、テストしたいビジネスの人にコンサル的なことをする</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Q ：もともとテストエンジニアじゃなかった人はジョブチェンジしましたか？<ul>
<li>A: テストオペレーター的な人は、テストエンジニアになったり、テストしつつデータ解析したり、ビジネス系にいったりとか</li>
</ul>
</li>
<li>Q: のこった2個の承認プロセスってなんですか<ul>
<li>A: ビジネスをやるかやらないか、セキュリティやコーポレート・ガバナンス的なところの2つくらい</li>
</ul>
</li>
<li>Q:似たようなアプリができたりしませんか<ul>
<li>A: ある。けどカンパニーを分けているのでサービス的にはかち合うことがすくない</li>
</ul>
</li>
<li>Q:セキュリティ以外の非機能要件はチームに任されている？<ul>
<li>A:任されている、そこも含めてビジネスをすることを任されている</li>
</ul>
</li>
<li>Q:ゲートを外したらヤバイと思った、思った人はサービスの人ですか？<ul>
<li>A:いい方　→　サービスをちゃんとしないといけないというモチベーション<br>  良くない方　→　仕事が増えたので、テストエンジニアの人を取り込んでやってもらおう</li>
</ul>
</li>
<li>Q:ゲートが外れた途端に品質がさがりましたか（バンバンリリースできるので、なんでもいいからバンバン出そうぜ！　みたいになって、品質が後回しにならないですか？）<ul>
<li>A:下がりました、今は戻ってきているとき  </li>
</ul>
</li>
<li>Q:品質についてショック療法的になっていますが、コレは狙いましたか？<ul>
<li>A:狙っていません<ul>
<li>そんなにインパクトがあったわけではなく、じわっとヤバイとなった感じ</li>
</ul>
</li>
</ul>
</li>
<li>Q: テストスキルを上げるための取り組み<ul>
<li>A:もともとレベルが低いので、ほんに書いてあることをティーチングできればOK　＋　サービスに合わせて行ければやっていけた</li>
</ul>
</li>
<li>Q:課金系は権限委譲していますか<ul>
<li>A：権限委譲はしています<ul>
<li>法的な部分とかそういったところは組織でチェックしていく</li>
<li>会社としてはサービス組織に以上している</li>
</ul>
</li>
</ul>
</li>
<li>Q: 品質あげようとするとコストとか時間がかかるが、そのあたりにビジネス層からの圧力や軋轢とかはありますか<ul>
<li>A:現実的にはある<ul>
<li>Q: どうやって解消していますか？<ul>
<li>カイゼンも含めてサービスの向上なので、ビジネス、カイゼン含めて優先順位を決めていく<ul>
<li>短期的視点と中長期的な視点で考える</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Q: アーキテクチャとか、プロセスとかを標準化したい人がいるものの、そこはチームごとに最適解を目指していきたいけどどうやってその辺標準化厨を抑えてますか？<ul>
<li>A:まとめたいひとと、まとめないほうがいいと思う人が話し合い<ul>
<li>ライセンスとか、全社的に考え無いといけないときはそこで話し合う</li>
<li>部分最適の人は勝手にやる</li>
<li>コメント：標準化とすると最適にしないといけないけど、平準化として、ベースラインを決めると進めたほうがやりやすいって聞いたことがある</li>
</ul>
</li>
</ul>
</li>
<li>Q: コンテンツなどがカニバることってありますか？<ul>
<li>A: コンテンツがカニバるときはある。<ul>
<li>カニバらないようにするのは、チームの自助努力に任されている</li>
<li>メディア・コンテンツの上の方の人たちは見てる＋分野がわかれているので</li>
</ul>
</li>
</ul>
</li>
<li>Q:サービス毎の機能連携<ul>
<li>A：基本的にはチーム間での話し合い<ul>
<li>戦略的にやるときは、コンダクトする人が出てくる（サービスの責任者級のひとたちで、カンパニー長は出てこない）</li>
</ul>
</li>
<li>Q: システムIF　が変わってデグレしたりしませんか<ul>
<li>A:します、けどスピード重視</li>
<li>Q:そのへんは原因分析して、再発防止とかしますか<ul>
<li>A:事故の規模、深刻度による</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Q:チームの知見とか、グッドプラクティスは支援部門として広めるのですか？<ul>
<li>A:支援部門がキャッチデキるところについてはそうしてる<ul>
<li>でも、全部が把握できないので、そういったものはノウハウを持っている人が他チームにいったタイミングで拡散する</li>
</ul>
</li>
</ul>
</li>
<li>Q:コンフルエンス検索ダメじゃないですか？<ul>
<li>A:検索やさんなので、頑張って改善しています<ul>
<li>Googleの検索エンジンをバックエンドに使っているものの、そのまま使っているわけではなく、カスタマイズしていてまだまだ検索やさんがいます</li>
</ul>
</li>
</ul>
</li>
<li>Q:もともとQA部門があったからテストエンジニアができたとおもうけど、テストエンジニアになろうとする人のモチベーションを上げるには<ul>
<li>理想的なチームにするためにはどうしたらいいですか</li>
<li>A:テストするスキルは必要だが、テストエンジニアが必ずしも必要とはかぎらない。みんなでやればいい<ul>
<li>テストスキルがその人に依存しているという状態はよろしくない</li>
</ul>
</li>
<li>Q:テストできる人と、できない人のスキルレベルが違う　→　そこは揃えたい<ul>
<li>A:プログラマと一緒で、シニアなエンジニアがジュニアなエンジニアを教育するのが理想じゃないか<ul>
<li>コーディング規約みたいにテスト規約とかもあってもいいかもね</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Q:テストコードを書ける人と、テスト設計デキる人って違う人だと思うのですが、そこの住み分けは<ul>
<li>A:得意分野の差であり、違う職責としてはいない</li>
</ul>
</li>
<li>Q: スキルを上げていく必要があるということにたいして、チームではなくて、会社、カンパニーとかで取り組んでますか<ul>
<li>A:オフィシャルにはない、勉強会とか、支援部門としてセミナーをやったりしている<ul>
<li>だいたい本を読めばわかることがおおい、それ以上は個別にコンテキストに応じたアドバイスをしないといけないので、使い分けている</li>
</ul>
</li>
</ul>
</li>
<li>Q: テスト勉強してこなかったプログラマにおすすめの本は？<ul>
<li>A: みんなが読んだ本で良いんじゃないか</li>
</ul>
</li>
<li>Q: テストを含めてどれくらい自動化してますか？<ul>
<li>A: サービスがおおいので、均一な自動化はしていない<ul>
<li>テスティングのプラットフォームを整備している<ul>
<li>環境、CI、CDを用意する</li>
<li>支援部門が教えに行く</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="感想">感想</h2><p>Yahoo!のいろいろな立場の方に過去話を聞いたことがあったが、<br>その人の立場とかやっていることによって話す内容や、話から受ける印象が違うのが楽しく、ためになるなぁと感じた。</p>
<p>山口さん、呼べばどこでも講演してくれるそうなので、話を聞きたかったら呼んでしまいましょう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>11/8 に渋谷ヒカリエの31F株式会社medibaで行われた<a href="http://connpass.com/event/43041/" target="_blank" rel="external">ソフトウェア品質勉強会「開発とテストが一体となったソフトウェア開]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Apache DrillでJSONを臨機応変に集計する]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/10/21/20161021-apache-drill/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/10/21/20161021-apache-drill/</id>
    <published>2016-10-20T16:17:50.000Z</published>
    <updated>2016-12-17T15:38:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="要旨">要旨</h1><p>jsonなどのデータを臨機応変に集計したいとき、あると思います。<br>もちろん自分でスクリプトを書くとかjqなどのコマンドを駆使して頑張るのもいいけど、<br><a href="https://drill.apache.org/" target="_blank" rel="external">Apache Drill</a>を使うと、SQLで集計できるので、SQLできる人ははかどりますよ！というお話。</p>
<h1 id="本題">本題</h1><h2 id="Story">Story</h2><p>「今稼働しているVMから、名前がかぶっているインスタンスがあるか調べてくれない？」<br>たとえば、ある日突然お客さんからこんな依頼が来たとします。<br>そんなときも安心、そうApache Drillならね。</p>
<h2 id="やりたいこと">やりたいこと</h2><p>CloudStackのAPIで取得できるVMの情報から、同じドメインに同じなまえのインスタンスが存在するか？ を調査したい！</p>
<h2 id="データ">データ</h2><h3 id="JSONレイアウト">JSONレイアウト</h3><p>対象のデータは <a href="https://cloudstack.apache.org/api/apidocs-4.9/apis/listVirtualMachines.html" target="_blank" rel="external">こんな感じのJSON</a>が</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;listvirtualmachinesresponse&quot;: &#123;</div><div class="line">    &quot;count&quot;: 99999,</div><div class="line">    &quot;virtualmachine&quot;: [</div><div class="line">      &#123;</div><div class="line">       &quot;VMのJSON&quot;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;VMのJSON&quot;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>こんな感じにラップされてます。<br>では、このJSONをApacheDrillで集計してみましょう。</p>
<h2 id="集計">集計</h2><h3 id="準備">準備</h3><p>インストールはMacならHomeBrewで<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install drill</div></pre></td></tr></table></figure></p>
<h3 id="SQLの実行">SQLの実行</h3><p>準備は整ったので実際に集計してみましょう！</p>
<h4 id="drillの起動">drillの起動</h4><p>まず、Drillを起動します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drill-embedded</div></pre></td></tr></table></figure></p>
<p>起動すると、Drillのプロンプトが返ってくるので、そこにおもむろにSQLを叩き込みます。</p>
<h4 id="SQLを実行する">SQLを実行する</h4><p>あとは、SQLを実行するだけ。<br>いつものSQLと違うのはFROM句でテーブルを指定せず、ファイルを指定するくらいです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select vms.vm.name, vms.vm.domain, count(*)</div><div class="line">from ( select flatten(t.listvirtualmachinesresponse.virtualmachine) as vm from dfs.`/Users/yenjoji/Downloads/listVirtualMachines.json` as t) as vms</div><div class="line">group by vms.vm.name, vms.vm.domain</div><div class="line">having count(*) &gt; 1</div><div class="line">order by vms.vm.name</div><div class="line">;</div></pre></td></tr></table></figure>
<h3 id="おまけ">おまけ</h3><p>私は、みんな大好きエクセルで後加工したかったので、こんなオプションつけました。</p>
<ul>
<li><p>ヘッダを最初だけにする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!set headerinterval 0</div></pre></td></tr></table></figure>
</li>
<li><p>出力フォーマットをTSVにする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!set outputformat tsv</div></pre></td></tr></table></figure>
</li>
<li><p>出力をファイルに保存する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!record result.tsv</div></pre></td></tr></table></figure>
</li>
</ul>
<p>と、しておくとTSVになるので、Excelにはっつけてピボットテーブルでどうにかしたりなど加工し放題です。</p>
<h1 id="感想">感想</h1><ul>
<li>JSONをSQLでサクッと検索できるのはちょっとうれしい。</li>
<li>1回使う手順を覚えてしまえば、2回め以降が楽になるし、ちょっと集計方法を変えたりなんかの対応が柔軟に出来る。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="要旨">要旨</h1><p>jsonなどのデータを臨機応変に集計したいとき、あると思います。<br>もちろん自分でスクリプトを書くとかjqなどのコマンドを駆使して頑張るのもいいけど、<br><a href="https://drill.apache.org/" t]]>
    </summary>
    
      <category term="drill" scheme="http://yenjoji.github.io/pages/pages/tags/drill/"/>
    
      <category term="JSON" scheme="http://yenjoji.github.io/pages/pages/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Amazon ECR が思った以上に簡単だったのでDocker Private Registry はコレでいいんじゃないか]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/07/26/20160725-ecr-101/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/07/26/20160725-ecr-101/</id>
    <published>2016-07-26T02:14:02.000Z</published>
    <updated>2016-08-06T18:16:38.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちは。<br>みなさんはいかがお過ごしでしょうか?　私はすっかりDockerかぶれになっています。</p>
<p>Dockerは気軽に環境を作ったり壊したりできる手軽さと、Virtualboxと比べてリソースをそこまで食わないのが嬉しいところですね。</p>
<p>VagrantでVMを3つくらい起動した挙句メモリが足りなくなり、<br>Macがグレーの画面でハングアップなんていうVagrantあるあるからおさらばできるだけでもかなりのメリットがありますね。</p>
<p>そんなDockerにすっかりかぶれてしまった私なので、当然CIはDroneを使うわけです。<br><a href="https://drone.io/" target="_blank" rel="external">drone</a>は DockerベースのCIサーバーで、特徴としては</p>
<ul>
<li>Docker上でビルドを行うので、常にクリーンな環境でビルドできる。</li>
<li>設定がTravisCI、CircleCIのようにリポジトリのルートにおいた yaml ファイル一個で済むのでスマート＆Git管理下における。</li>
</ul>
<p>という感じの田中美奈子と同じくらいナウいCIサーバーです。</p>
<p>詳しくは<a href="http://knowledge.sakura.ad.jp/tech/2729/" target="_blank" rel="external">この辺</a>を見ていただくとなんとなく特徴がわかると思います。</p>
<p>そんなある日、プロジェクトで使っているCIサーバーであるDroneでOracleJDKをつかいたくなってしまいました。<br>OpenJDKのコンテナなら、Oracleから提供されているので<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">image: oracle/openjdk:8</div></pre></td></tr></table></figure></p>
<p>などと、.drone.ymlに設定すれば、たやすく環境が手に入ります。<br>しかしながら、OracleJDKはライセンスの関係か、オフィシャルのコンテナイメージ用意されていないようです。</p>
<p>ローカル環境で使うだけならば手元で docker build してあげればいいのですが、Droneちゃんは、レジストリからしかイメージを取得できないようでした。</p>
<p>自前でプライベートレジストリを構築するという選択肢もありましたが、ここは将来的に ECS を使うことも見据えて ECR を使っておこうということになりました（自分の中で）。</p>
<h1 id="まとめ">まとめ</h1><p>手順等も書きますが、そもそもそんなに難しくないですし、AWSの画面にコマンド一覧出るので、とりあえずここでは言いたいことだけ書きなぐっておきます。</p>
<ul>
<li>ECR簡単なので、Docker使っている場合は選択肢に入れていいと思います</li>
<li>転送量課金なので、そこは気をつけたほうがいいかも</li>
<li>現在バージニア、オレゴン、アイルランドでしか提供されていないので、それ以外のリージョンで「あれ？ 出てこない？」とかならないように注意</li>
<li>EC2にIAMロールつけとくと、アクセスキーとか、ユーザーとか気にしなくていいからお気楽です(Amazonも推奨してます。)</li>
</ul>
<p>一応雑な手順も書きましたので、興味があったら以下手順も見てみてください。</p>
<h1 id="手順">手順</h1><h2 id="Amazon_ECR_の準備">Amazon ECR の準備</h2><p>ECRは現在 3つのリージョンでしか使えません<a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_Console_Repositories.html" target="_blank" rel="external">この辺参照</a>。<br>なので、今回は us-east-1 RegionでECRを使いたいと思います。</p>
<h3 id="ECR_Repository_の作成">ECR Repository の作成</h3><ol>
<li>はじめてECSを使うとウィザードに誘導されます。今回はひとまずECRだけ用意するので「Store container images securely with Amazon ECR」だけにチェックを入れて進みます。</li>
<li>次の画面でリポジトリ名（dockerのイメージ名）を設定すれば作成完了です。</li>
</ol>
<h3 id="ECR_イメージ作成用インスタンスの作成">ECR イメージ作成用インスタンスの作成</h3><ol>
<li>EC2用IAMロール作成<br>今回は、アクセスキーの管理の手間を省くため、EC2のIAMロールに ECR関連の権限を付与することにします。そのため、先にEC2用のIAMロールを作っておきます<ol>
<li>IAM -&gt; 「新しいロールの作成」</li>
<li>適当なロール名を設定<ul>
<li>「ECR_CREATER」とかなんでもいいと思います</li>
</ul>
</li>
<li>AWS サービスロールから Amazon EC2 を選択</li>
<li>「AmazonEC2ContainerRegistryPowerUser」あたりをチェックしてロールの作成</li>
</ol>
</li>
<li>EC2インスタンスの作成<ol>
<li>適当なイメージからEC2インスタンスを作成します<ul>
<li>リージョンはどこでも良いので、いつも使っているリージョンで良いと思います</li>
<li>AMIもdockerが使えればなんでも良いです。今回はAmazonLinuxにしました</li>
<li>インスタンスタイプもまずは t2.micro とかで大丈夫です。足りなかったら後でスケールアップしましょう</li>
<li>たくさんイメージを作る・使う場合はディスクを大きめにしておくといいかもしれません</li>
</ul>
</li>
</ol>
</li>
<li><p>イメージの作成</p>
<ol>
<li>作成したインスタンスへログイン</li>
<li><p>dockerのインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install docker</div></pre></td></tr></table></figure>
</li>
<li><p>dockerの起動</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure>
</li>
<li><p>イメージの作成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t $&#123;dockerのイメージ名&#125; .</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>イメージをRepositoryへ登録</p>
<ol>
<li><p>ECRへのログイン</p>
<ul>
<li>aws ecr get-login でログイン文字列がもらえるのでバッククォートで直接実行するとログインできます。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`aws ecr get-login  --region us-east-1`</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>イメージへのタグ付け</p>
<ul>
<li>ecr のマニュアル通りです<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag $&#123;dockerのイメージ名&#125;:latest XXXXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com/$&#123;dockerのイメージ名&#125;:latest</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>イメージのPush</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push XXXXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com/$&#123;dockerのイメージ名&#125;:latest</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h1 id="最後に">最後に</h1><p>こんな感じにDockerレジストリが作れてしまうとは！ と、私はひとりで感動してしまいました。<br>AWSなんでそれなりにお金はかかりますが、懐に余裕があれば選択肢の一つにしてもいいかも知れません。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちは。<br>みなさんはいかがお過ごしでしょうか?　私はすっかりDockerかぶれになっています。</p>
<p>Dockerは気軽に環境を作ったり壊したりできる手軽さと、Virtualboxと比べてリソースをそこまで食わないのが嬉しいところですね。</p>
<p>V]]>
    </summary>
    
      <category term="docker" scheme="http://yenjoji.github.io/pages/pages/tags/docker/"/>
    
      <category term="AWS" scheme="http://yenjoji.github.io/pages/pages/tags/AWS/"/>
    
      <category term="ECR" scheme="http://yenjoji.github.io/pages/pages/tags/ECR/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DroneでECR上のイメージを使う]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/07/26/20160726-drone-with-ecr/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/07/26/20160726-drone-with-ecr/</id>
    <published>2016-07-26T02:08:33.000Z</published>
    <updated>2016-07-26T02:12:43.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="docker" scheme="http://yenjoji.github.io/pages/pages/tags/docker/"/>
    
      <category term="CI" scheme="http://yenjoji.github.io/pages/pages/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ヌーボードは作れる！？]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/06/26/20160626-nu-board/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/06/26/20160626-nu-board/</id>
    <published>2016-06-26T14:58:55.000Z</published>
    <updated>2016-06-29T17:14:27.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちは。</p>
<p>先日、知人に私の月々のお小遣いの額を正直に言ったら、可哀想な表情をされました。<br>それでも私は元気です。円城寺です。</p>
<p>話は変わりますが、<a href="https://obun.jp/original/nuboard/" target="_blank" rel="external">nu board</a>をご存知でしょうか？</p>
<p>スケッチブックのような見た目のホワイトボードのノートです。</p>
<p>ホワイトボード愛好家の私としては、以前からこのノートがほしかったのですが、<a href="https://www.amazon.co.jp/dp/B00E5645VK/" target="_blank" rel="external">意外と高価</a>でなかなか手が出ませんでした。</p>
<p>だが欲しいものは欲しい。<br>「買えぬなら、作ってしまえホトトギス。」<br>と誰かが言ったとか言わなかったとか。</p>
<p>よくよく見ると、100円ショップで買えるようなものでそれっぽいものが作れるんじゃないかという気がしてきました。</p>
<p><a href="http://www.obc.co.jp/corporate/outline/cm/cm017.html" target="_blank" rel="external">「よし、新プロジェクトの旗揚げだ！」</a></p>
<h1 id="材料">材料</h1><p>今回はすべてダイソーで揃えました。</p>
<ul>
<li>ホワイトボードシート x 2</li>
<li><p>厚紙 黒 3枚入り  x 1<br><img src="/pages/images/20160626_001.jpg" alt=""></p>
</li>
<li><p>カードリング x 1<br><img src="/pages/images/20160626_002.jpg" alt=""></p>
</li>
</ul>
<p>今回はプロトタイプ一回目ということで、今回は2ページ構成でためしてみることにしました。</p>
<p>ちなみに材料費はここまでで <strong>432円</strong> です。 すこぶる財布に優しいです。</p>
<p>この他に、<br>カッター、カッターマット、穴あけパンチ、定規 が作業に必要ですが、自宅にあったので今回は材料費には入れません。</p>
<h1 id="工作">工作</h1><p>もはや解説の余地もない気がしますが一応作業手順をば。</p>
<ol>
<li><p>ホワイトボード部分の作成<br>厚紙の両面にホワイトボードを貼ります。<br>今回購入したホワイトボードは裏側がシールになっているため、そのまま厚紙に貼ってしまいます。<br>特にコツはないと思いますが、私は先ずホワイトボード上端部分だけ粘着面を出し、<br><img src="/pages/images/20160626_003.jpg" alt=""><br>位置あわせをしてから残りの部分を貼りました。</p>
</li>
<li><p>穴を開ける<br>パンチで適当に穴を開けます。<br>後々市販のリフィルなどを使いたいという場合は使う予定のリフィルと穴の位置を合わせておくといいでしょう。</p>
</li>
<li><p>カードリングで冊子状にまとめる<br>開けた穴にカードリングを通して、冊子状にすれば出来上がりです。</p>
</li>
</ol>
<p><img src="/pages/images/20160626_004.jpg" alt=""></p>
<h1 id="まとめ">まとめ</h1><p>500円かからずにnu boardっぽいものは作れました。</p>
<p>意外と厚紙がしっかりしているので、机の上でなくても使えそうです。<br>何より、ヌーボードのラインナップにないB4サイズというのがいいです。かばんの収まりがいまいちですが。</p>
<p>ただ、ページを本家と同じく8ページに増やすと材料費だけで1500円くらいにはなってしまうので<br>全体的な出来栄えを考えると4000円くらいなら買ってしまってもいいかなとも思いました。</p>
<p>まぁ、工作も簡単なので今後もバージョンアップを考えていきたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちは。</p>
<p>先日、知人に私の月々のお小遣いの額を正直に言ったら、可哀想な表情をされました。<br>それでも私は元気です。円城寺です。</p>
<p>話は変わりますが、<a href="https://obun.jp/original/nuboard/" ta]]>
    </summary>
    
      <category term="lifehack" scheme="http://yenjoji.github.io/pages/pages/tags/lifehack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dockerでコンテナ2個立ち上げるならComposeしちゃえばいいじゃない]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/06/20/20160620-docker-compose/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/06/20/20160620-docker-compose/</id>
    <published>2016-06-20T10:39:50.000Z</published>
    <updated>2016-06-20T10:44:53.000Z</updated>
    <content type="html"><![CDATA[<p>みなさん、Docker使ってますか？</p>
<p>私は使ってません。</p>
<p>しかし日常的には使っていないものの、ちょっと新しいプロダクト試そうかなと公式サイトのQuickstartとかを眺めると、Dockerのコンテナが用意されているケースが増えてきた気がします。世間の流れですね。いわゆるBigWaveです。乗らないとイカンやつです。</p>
<p>そんな中、現在のプロジェクトで<a href="https://getkong.org/" target="_blank" rel="external">KONG</a>というミドルウェアを使うことになりました。</p>
<p>KONGがどういうものかは <a href="http://www.ryuzee.com/contents/blog/7048" target="_blank" rel="external">この辺（Ryuzee）</a> や <a href="http://dev.classmethod.jp/etc/kong-api-aggregator/" target="_blank" rel="external">この辺（クラメソ）</a> を読むとなんとなくわかるかもしれません。</p>
<p>同じカテゴリのプロダクトとしては <a href="https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf" target="_blank" rel="external">WEB API Degign</a>を配布している、<a href="http://apigee.com/about/" target="_blank" rel="external">Apigee</a>　が有名です。</p>
<p>〜閑話休題〜</p>
<p>このKONGなる謎のミドルウェア。使ったことがないので、どんなものかもわかりません。<br>最終的にはAWSに環境を構築するので、それを待つのもいいのですが、さしあたってどういうものかを試してみたいのが人情ってやつです。</p>
<p>そんな時、今まではVagrantなどで環境を構築して試用するのが常でしたが、最近ではDockerが流行りのようです。時の流れってやつですね。</p>
<p>実際、公式のインストレーションのページでもDockerが筆頭になっていますし、ここはDockerで行くべきなんだと思います。</p>
<p>ということで、公式の手順を読んでみると、どうやらKONGは　DB( cassandra または postgresql )と KONG本体の2つのコンテナが必要のようです。</p>
<p>ここは<a href="https://getkong.org/install/docker/" target="_blank" rel="external">手順</a>通りにおとなしくDockerコマンドを2回粛々と実行するのが大人のたしなみという説もあるかもしれませんが、違いのわかる大人になるため、エレガントにdocer-composeコマンド１回で２つのコンテナを自在に操って見たいと思います。</p>
<h2 id="手順">手順</h2><p>ということで、任意のフォルダに “docker-compose.yml” をこの内容で作成します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kong-database:</div><div class="line">  image: postgres:9.4</div><div class="line">  ports:</div><div class="line">    - 5432:5432</div><div class="line">  environment:</div><div class="line">    POSTGRES_USER: kong</div><div class="line">    POSTGRES_DB: kong</div><div class="line"></div><div class="line">kong:</div><div class="line">  image: mashape/kong</div><div class="line">  links:</div><div class="line">    - kong-database:kong-database</div><div class="line">  ports:</div><div class="line">    - 8000:8000</div><div class="line">    - 8443:8443</div><div class="line">    - 8001:8001</div><div class="line">    - 7946:7946</div><div class="line">    - 7946:7946/udp</div><div class="line">  environment:</div><div class="line">    DATABASE: postgres</div></pre></td></tr></table></figure>
<p>必要ならdocker-machineを準備し<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create -d virtualbox kong</div><div class="line">$ eval &quot;$(docker-machine env kong)&quot;</div></pre></td></tr></table></figure></p>
<p>おもむろに docker-compose up を実行するだけで、さくっとKONGが起動っ</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ docker-compose up</div><div class="line">Starting vagrant_kong-database_1...</div><div class="line">Starting vagrant_kong_1...</div><div class="line">Attaching to vagrant_kong-database_1, vagrant_kong_1</div><div class="line">kong-database_1 | The files belonging to this database system will be owned by user &quot;postgres&quot;.</div><div class="line">kong-database_1 | This user must also own the server process.</div><div class="line">−中略−</div><div class="line">kong_1          | [INFO] kong 0.8.3</div><div class="line">kong_1          | [INFO] Using configuration: /etc/kong/kong.yml</div><div class="line">kong_1          | [INFO] Setting working directory to /usr/local/kong</div><div class="line">kong_1          | [INFO] database...........postgres host=kong-database database=kong user=kong port=5432</div><div class="line">kong_1          | [INFO] dnsmasq............address=127.0.0.1:8053 dnsmasq=true port=8053</div><div class="line">kong_1          | [INFO] Leaving cluster..</div><div class="line">kong_1          | [ERR] serf is already running</div><div class="line">kong_1          | [ERR] Could not start Kong</div></pre></td></tr></table></figure>
<p>エラーになりました!!!!</p>
<p>が、めげずにKONGへアクセスしてみると、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl http://192.168.99.100:8001/status</div><div class="line">&#123;&quot;server&quot;:&#123;&quot;connections_handled&quot;:7,&quot;connections_reading&quot;:0,&quot;connections_active&quot;:1,&quot;total_requests&quot;:7,&quot;connections_accepted&quot;:7,&quot;connections_writing&quot;:1,&quot;connections_waiting&quot;:0&#125;,&quot;database&quot;:&#123;&quot;oauth2_tokens&quot;:0,&quot;jwt_secrets&quot;:0,&quot;response_ratelimiting_metrics&quot;:0,&quot;keyauth_credentials&quot;:0,&quot;oauth2_authorization_codes&quot;:0,&quot;acls&quot;:0,&quot;apis&quot;:0,&quot;hmacauth_credentials&quot;:0,&quot;consumers&quot;:0,&quot;ratelimiting_metrics&quot;:0,&quot;basicauth_credentials&quot;:0,&quot;nodes&quot;:1,&quot;oauth2_credentials&quot;:0,&quot;plugins&quot;:0&#125;&#125;</div></pre></td></tr></table></figure>
<p>正常にアクセスできる!!!<br>KONGの起動メッセージがなんとなくすっきりしませんが、何故か起動完了。</p>
<h2 id="まとめ">まとめ</h2><p>Docker Composeを使うことにより、コンテナ起動の手間を省いたり「コンテナ起動手順」の代わりに”docker-compose.yml”を配布するなんてこともできたりして、<br>環境構築のめんどくささが減るんじゃないかなぁ。減るといいなぁ。そんな感じです。</p>
<p>みなさんも良いDokcer Lifeを！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>みなさん、Docker使ってますか？</p>
<p>私は使ってません。</p>
<p>しかし日常的には使っていないものの、ちょっと新しいプロダクト試そうかなと公式サイトのQuickstartとかを眺めると、Dockerのコンテナが用意されているケースが増えてきた気がします。]]>
    </summary>
    
      <category term="docker" scheme="http://yenjoji.github.io/pages/pages/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[アジャイルジャパン ２０１６に参加しました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/05/31/20160531-AgileJapan/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/05/31/20160531-AgileJapan/</id>
    <published>2016-05-31T00:09:14.000Z</published>
    <updated>2016-06-03T10:14:40.000Z</updated>
    <content type="html"><![CDATA[<p>５月３１日はアジャイルジャパンでした。<br>今まではなんかスーツ色が強そうで避けていたんですが、今回はじめて勇気を出して参加しました。</p>
<p><a href="http://agilejapan.org/" target="_blank" rel="external">公式ページ</a><br><a href="http://togetter.com/li/981670" target="_blank" rel="external">Togetter</a></p>
<h1 id="感想">感想</h1><ul>
<li>Awesome Joe の 基調講演面白かった<ul>
<li>戦闘機を一週間スプリントで毎スプリントリリースしてるとか、Scrumでワイン造りをしているとか。</li>
</ul>
</li>
<li>Awesome Joe ゆっくり話してくれたから英語聞き取りやすかった！</li>
<li>牛尾さん相変わらずテンション高くて面白かった。声がでかすぎてマイクの音が割れてた。</li>
<li>高橋陽太郎さん、サービス開発中止になって号泣 → 号泣する程本気で向き合ってる姿勢がすごい！</li>
<li>会場のシャッター音に苦言を呈しているかたが多かった。私は気にならない派。</li>
</ul>
<h1 id="参加したセッション">参加したセッション</h1><ul>
<li>初心者向けミニチュートリアル</li>
<li>実行会長あいさつ</li>
<li>IPA 激励メッセージ</li>
<li>基調講演１ スクラムがイノベーションを加速する 〜ソフトウェア以外にも適用されはじめたアジャイル〜</li>
<li>基調講演２ アジャイルなIoTプラットフォーム開発<ul>
<li><a href="http://www.slideshare.net/SORACOM/agile-japan-2016-iot" target="_blank" rel="external">http://www.slideshare.net/SORACOM/agile-japan-2016-iot</a></li>
</ul>
</li>
<li>D-1 請負で企画・開発・運用・拡張まで担当するアジャイルチーム<ul>
<li><a href="http://www.slideshare.net/gaoryu/agile-japan2016-d1" target="_blank" rel="external">http://www.slideshare.net/gaoryu/agile-japan2016-d1</a></li>
</ul>
</li>
<li>D-2 事業会社でのアジャイル奮闘記</li>
<li>A-3 アジャイルをもっとアジャイルに ～ 足りない何かが見つかる、アジャイルミステリー分析 ～<ul>
<li><a href="http://www.agilejapan.org/2016/image/A-3_YujiKishira_AgileJapan2016.pdf" target="_blank" rel="external">http://www.agilejapan.org/2016/image/A-3_YujiKishira_AgileJapan2016.pdf</a></li>
<li><a href="http://www.agilejapan.org/2016/image/A-3_yoshino_AgileJapan2016.pdf" target="_blank" rel="external">http://www.agilejapan.org/2016/image/A-3_yoshino_AgileJapan2016.pdf</a></li>
</ul>
</li>
<li>B-4 文化の壁をぶち壊せ！日本でも出来る本物の DevOps ジャーニー！<ul>
<li><a href="https://docs.com/ushio-tsuyoshi/8981/agilejapan2016" target="_blank" rel="external">https://docs.com/ushio-tsuyoshi/8981/agilejapan2016</a></li>
</ul>
</li>
<li>C-6 アジャイル開発における品質保証と人材活用</li>
</ul>
<h1 id="セッションごとの感想など">セッションごとの感想など</h1><h2 id="初心者向けミニチュートリアル">初心者向けミニチュートリアル</h2><p>ざっくりアジャイルを説明しようとするとやっぱこうなっちゃうよねぇという感じのセッション。<br>知ってる人が聞くと言いたいことはわかるけど、ほんとに伝えたい人に伝わるかは未知数。。。</p>
<h2 id="実行会長あいさつ">実行会長あいさつ</h2><p>道元の言葉「知るとわかるはちがう」<br><a href="http://www2j.biglobe.ne.jp/~mano/message/08.html" target="_blank" rel="external">http://www2j.biglobe.ne.jp/~mano/message/08.html</a></p>
<h2 id="IPA_激励メッセージ">IPA 激励メッセージ</h2><p>日本のScrum認定者はすくないらしい。</p>
<h2 id="基調講演１_スクラムがイノベーションを加速する_〜ソフトウェア以外にも適用されはじめたアジャイル〜">基調講演１ スクラムがイノベーションを加速する 〜ソフトウェア以外にも適用されはじめたアジャイル〜</h2><p><strong>Scrumは生産性の超兵器 - 驚くほど効果的</strong></p>
<p>と Awesome Joe こと Joe Justice さんが言ってました。</p>
<p>ソフトウェアエンジニアだけじゃなく、ハードウェアエンジニアも一緒のチームでScrumを行っているという事例など。<br>自動車や、スパークリングワイン、果ては戦闘機(<a href="http://www.scruminc.com/wp-content/uploads/2014/11/Patterns1.pdf" target="_blank" rel="external">コレ</a> の４ページ目)や法律までScrumで作っているという話。</p>
<p>固定観念からか、どうしてもScrumといえばソフトウェア開発を想像してしまっていました。<br>むしろ昔良く聞いた「組み込み系（含むハードウェア）にはアジャイルは向かないよねぇ」となんとなく思っていた考えが粉砕されました。<br>パイロットもチームに入れて、戦闘機を週一回リリースするとか <strong>空前絶後</strong> （言いたいだけ）ですね。</p>
<p>そう言うキャッチーな話とともに<br>「Scrumは毎スプリントコストを下げてValueをあげていけるから投資家はScrumが好きなんだ」<br>とか<br>「スクラムマスターの主要な仕事はチームをハッピーにすることです、チームのフラストレーションを取り除くのがスクラムマスターの仕事です」<br>など、サラッといいことも言っていましたさすがAwesome。</p>
<h2 id="基調講演２_アジャイルなIoTプラットフォーム開発">基調講演２ アジャイルなIoTプラットフォーム開発</h2><p> <a href="http://ascii.jp/elem/000/000/975/975097/" target="_blank" rel="external">あの</a>いまや<a href="https://soracom.jp/press/2016051101/" target="_blank" rel="external">飛ぶ鳥を落とす勢い</a>の玉川さんによる基調講演。</p>
<p> 基調講演の内容も良かったですが、個人的には最後に紹介されていたモジュール５個で八王子全体をカバーできるという<a href="https://www.lora-alliance.org/" target="_blank" rel="external">LoRA</a>がすごい！と思いました。</p>
<p> 玉川さんががおっしゃっていた「オープンでフェア」「ものづくりの前にリリースノートを書くのはAmazonカルチャー」はカッコ良かった。</p>
<h2 id="A-3_アジャイルをもっとアジャイルに_～_足りない何かが見つかる、アジャイルミステリー分析_～">A-3 アジャイルをもっとアジャイルに ～ 足りない何かが見つかる、アジャイルミステリー分析 ～</h2><p>岸良さんの話が聞けるということで、個人的にかなり期待していたセッション。<br>内容としては<a href="https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AB%E3%83%AB%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88" target="_blank" rel="external">CCPM</a>の手法はアジャイルプロセスとも相性がいいよ！というお話。</p>
<p>そういえばクリティカルチェーン読んでないので、今度読んでみよう。</p>
<p>岸良さんはさすがの話し上手で楽しく話を聞けました。</p>
<h2 id="B-4_文化の壁をぶち壊せ！日本でも出来る本物の_DevOps_ジャーニー！">B-4 文化の壁をぶち壊せ！日本でも出来る本物の DevOps ジャーニー！</h2><ul>
<li><a href="https://docs.com/ushio-tsuyoshi/8981/agilejapan2016" target="_blank" rel="external">https://docs.com/ushio-tsuyoshi/8981/agilejapan2016</a></li>
</ul>
<p>久しぶりの牛尾さんセッション。<br>相変わらずの開幕ハイテンションで、スピーカー割れるほどの音量で”デブオプス！！！”って叫んでました。</p>
<p>DevOpsについては<a href="http://simplearchitect.hatenablog.com/" target="_blank" rel="external">牛尾さんのブログ</a>を見てねということだったので、おそらく<a href="http://simplearchitect.hatenablog.com/entry/2016/05/24/185431" target="_blank" rel="external">この記事</a>を読めば良いのではないかと思いました。</p>
<p>今回は時間の関係上DevOpsの話少なめで、最近牛尾さんがよく言及している文化の違いについての話がメインでした。</p>
<p><strong>「日本の文化で、アジャイルを導入した場合の問題点は、その文化の違いから”うっすいカルピス”みたいになる。」</strong></p>
<p>それを避けるためには西洋文化を（部分的に）インストールのが近道であるということ。<br>ただ、すべて西洋式にする必要はなくて、アジャイル（DevOps）と日本文化のジョイント部分だけ西洋文化をインストールするといいよという話でした。<br>「Be Lazy」「エッセンシャル思考」などが、サラッと語られていましたが、その辺り＋αが「西洋文化」なんだろうなと思いました。</p>
<p>どうやってインストールするかというところについては余りフォーカスして語られなかったので、とある若者が聞いてみたいとつぶやいたりしていました。</p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">セッションでウシオさんという方が、アジャイルを導入する前に、西洋文化をインストールしろっていってたけど、じゃあそこをどうするのかって話をすごく聞きたかった。懇親会で見つけれなかったしすごく残念。<a href="https://twitter.com/hashtag/agilejapan?src=hash" target="_blank" rel="external">#agilejapan</a></p>&mdash; まっさん.do (@toyosge) <a href="https://twitter.com/toyosge/status/737647342287888384" target="_blank" rel="external">2016年5月31日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>久しぶりの牛尾さんセッションは相変わらずのハイテンション＆クオリティで素晴らしかったです。</p>
<h1 id="なんとなくのまとめ">なんとなくのまとめ</h1><p>いろいろな立場の人のいろいろな話を聞けて、現在のアジャイル開発の一つの側面みたいなものが感じられ、<br>また、今の自分のチームのどの辺がいい感じでどの辺が足りてないみたいなことを考えるヒントになったのかなと感じました。感じたような気がします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>５月３１日はアジャイルジャパンでした。<br>今まではなんかスーツ色が強そうで避けていたんですが、今回はじめて勇気を出して参加しました。</p>
<p><a href="http://agilejapan.org/" target="_blank" rel="externa]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSP認定を頂きました！]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/05/10/20160510-csp/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/05/10/20160510-csp/</id>
    <published>2016-05-09T15:00:00.000Z</published>
    <updated>2016-06-15T09:55:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/pages/images/20160510_CSP.png" alt=""></p>
<p>伊藤さん(@hageyahhoo)による、<a href="http://d.hatena.ne.jp/hageyahhoo/20150405/1428220411" target="_blank" rel="external">資格申請の仕方の記事</a>を参考にして、4/12に申請を行い、5/10 認定を頂きました。</p>
<p>途中記載不備があり、レビュアーから、「もう少し詳しくどういうことをしたか教えておくれよ。」というコメントをいただき、<br>たまたま連休中だったので、私の返答が遅れたので、「およそ3週間」というレビューの一般的な期間より、多少時間がかかってしまいました。</p>
<p>指摘された点は、SEUのうち Category-D のボランティア活動の内容があまりに淡白すぎたため、もう少し具体的にどんなボランティア活動を行って、どういった効果があったのかを書いてほしいというレビュー指摘でした。</p>
<p>頂いた指摘を修正し、再レビュー依頼をしたところ4日ほどで、レビューOKの返事を頂きました。</p>
<p>資格を撮ったからといって、何ができるようになるわけでは無いですが、少しでもスクラムのプロフェッショナルに近づけるよう頑張っていきたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/pages/images/20160510_CSP.png" alt=""></p>
<p>伊藤さん(@hageyahhoo)による、<a href="http://d.hatena.ne.jp/hageyahhoo/20150405/14282204]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="Scrum" scheme="http://yenjoji.github.io/pages/pages/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[アジャイルひよこクラブ「７つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方」に参加してきました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/04/22/20160422-agile-hiyoko-club/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/04/22/20160422-agile-hiyoko-club/</id>
    <published>2016-04-22T11:02:53.000Z</published>
    <updated>2016-04-25T07:44:35.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://agile-hiyoko-club.doorkeeper.jp/events/41580" target="_blank" rel="external">アジャイルひよこクラブ「つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方」</a>に参加してきました。</p>
<p>隔月開催のため、<a href="https://agile-hiyoko-club.doorkeeper.jp/events/38245" target="_blank" rel="external">前回</a>に引き続き2回連続の参加です。</p>
<p>今回は<a href="https://postudy.doorkeeper.jp/" target="_blank" rel="external">PO Study</a>の主催者であり、7つの習慣ボードゲーム公認ナビゲーターでもある、<br>関さんによるプロダクトオーナーとのつきあい方についてのセッションでした。</p>
<h1 id="時間が無い人向けのあらすじ">時間が無い人向けのあらすじ</h1><h2 id="付箋の使い方">付箋の使い方</h2><ul>
<li>プロアジャイラーにになるための付箋の剥がし方<ul>
<li>下に引っ張る ＞ 横に剥がす ＞＞＞＞＞ 普通に剥がす</li>
</ul>
</li>
<li>プロアジャイラーにになるための付箋の貼り方<ul>
<li>のりを下にして貼ると重ねた時の取り回しがらく＆重なった重みで落ちない</li>
</ul>
</li>
</ul>
<h2 id="７つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方">７つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方</h2><ul>
<li>7つの習慣は習慣化しないと意味ない</li>
<li>プロダクトオーナーとチームはちゃんと要望の意図を共有しないと良いものが作れない</li>
<li>コンペティティブインテリジェンス重要</li>
</ul>
<h1 id="当日の流れ">当日の流れ</h1><h2 id="自己紹介">自己紹介</h2><p>まずは自己紹介です。<br>前回は４人くらいのグループを作って、グループ単位での自己紹介でしたが、<br>今回はひとりずつ全体に向かってテンプレに沿って自己紹介です。</p>
<h2 id="７つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方-1">７つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き合い方</h2><p><a href="https://twitter.com/fullvirtue" target="_blank" rel="external">関さん</a>のセッションです。</p>
<h3 id="アイスブレイク_付箋のめくり方">アイスブレイク 付箋のめくり方</h3><p>はじめにアイスブレイクで付箋の正しい使い方のレクチャーです。</p>
<ul>
<li>剥がし方<ul>
<li>横にめくる<ul>
<li><a href="http://grapee.jp/157200" target="_blank" rel="external">ここ</a>のような剥がし方をすると、貼った時に丸まらないです。</li>
</ul>
</li>
<li>引っ張る<ul>
<li><a href="http://blogs.yahoo.co.jp/gohirano5/53832914.html" target="_blank" rel="external">ここ</a>に書いてあるとおり、付箋を平行にのりを上に持ち下に引っ張って剥がします。これぞ玄人の剥がし方だそうです。</li>
</ul>
</li>
</ul>
</li>
<li>貼り方<ul>
<li>のりを下にしてはる<ul>
<li>こうすると、重ねて貼った場合に一枚の付箋に重さが集中して落ちるという事がなくなります。</li>
<li>下に貼った付箋も上の付箋をめくると見えて便利</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="言葉の定義と意識合わせ">言葉の定義と意識合わせ</h3><p>次に、会場で話していることの認識がずれないように、<br>用語についての認識合わせということで、アジャイル開発とプロダクトマネジメントについての解説です。</p>
<h4 id="アジャイル開発について">アジャイル開発について</h4><ul>
<li>アジャイル<ul>
<li>今できないことを次にできるようにしましょう → コレ以外言っていない</li>
<li>プロジェクトマネジメント、プロダクトマネジメントが入っていない → これが原因で失敗するケースがおおい</li>
</ul>
</li>
<li>アジャイル開発導入の時失敗したこと<ul>
<li>アジャイルマニフェストの下2行が話されていないこと</li>
<li>みんな勘違いして大変なことになった（ドキュメント書かなくていいんだ！！！ とか）</li>
</ul>
</li>
</ul>
<h4 id="プロダクトマネジメントとは">プロダクトマネジメントとは</h4><ul>
<li>マネジメント対象<ul>
<li>プロダクト</li>
<li>市場</li>
<li>顧客</li>
</ul>
</li>
<li>上流と下流がある<ul>
<li>上流<ul>
<li>市場投入まで</li>
<li>SIerとかLeanなかんじのひととか</li>
</ul>
</li>
<li>下流<ul>
<li>市場投入したあと</li>
<li>メタップス、電通、博報堂とか</li>
</ul>
</li>
</ul>
</li>
<li>コンペティティブインテリジェンス<ul>
<li>意思決定するために必要な情報を集めるスキル</li>
</ul>
</li>
</ul>
<h4 id="7つの習慣">7つの習慣</h4><p>最近各所でよく話を聞く７つの習慣について、図を用いて紹介です。</p>
<ul>
<li>事前アンケート<ul>
<li>７つの習慣を読んだことがある人は結構いましたが、それを習慣化できている人は一人でした。</li>
<li>関さん曰く７つの習慣は習慣化できないと意味が無い</li>
</ul>
</li>
<li>7つの習慣について紹介<ul>
<li>1-3の習慣<ul>
<li>社会人としてできていないとまずい</li>
</ul>
</li>
<li>2-6の習慣<ul>
<li>チームで仕事するときにできていないとまずい</li>
</ul>
</li>
<li>7の習慣<ul>
<li>成功の習慣化<br><img src="/pages/images/20160422_001.JPG" alt=""><br><img src="/pages/images/20160422_002.JPG" alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="プロダクトオーナーとのつきあい方について">プロダクトオーナーとのつきあい方について</h4><h5 id="ワークショップ">ワークショップ</h5><p>ここからワークショップ形式です。</p>
<p>7つの習慣の配布資料について、配布時にはA4の紙半分に図が印刷されていて、かつ図が内側に来るように半分に折られていました。</p>
<p>これは、図を目一杯印刷してしまうと、メモを取るスペースが無くなってしまうため、あえて半分の大きさにして印刷したそうです。</p>
<p>そこで、関さんからの質問です。<br>「この配布資料を会場の皆さんだったらどう作りましたか？」付箋に書いてみてください。</p>
<p>私の答えは</p>
<ul>
<li>折らずに配る</li>
<li>縮小した図をセンタリングして印刷する<br>でした。</li>
</ul>
<h5 id="ワークショップ解説">ワークショップ解説</h5><p>このワークショップの意図は、POである関さんと、依頼を受けた我々が<br>目的を共有しないと依頼を受けた側が適切な対処ができない（コミュニケーションギャップが発生する）ということを再認識するためのものでした。</p>
<p>我々は事前に「メモを取りたいから」という要望を聞いていたので、資料の印刷方法について適切に判断できましたが、<br>もし、その意図がないまま「A4の資料をA5縮小で印刷してほしい」という依頼を受けたらどうなるか、<br>もしかしたらA4の紙にA5サイズの図を2つ印刷してしまうかもしれません。</p>
<p>POの立場としても、それを聞くチームとしても、ユーザーストーリーのテンプレートでいうところの「なぜ」の部分（＋コンペティティブインテリジェンス）をちゃんと共有しないとまずいということを再認識しました。</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/6EtUY3GixQDcBn?startSlide=29" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/trtraki/6-38860406" title="【アジャイルサムライ】6章_ユーザストーリーを集める" target="_blank">【アジャイルサムライ】6章_ユーザストーリーを集める</a> </strong> from <strong><a href="//www.slideshare.net/trtraki" target="_blank">trtraki</a></strong> __ </div></p>
<ul>
<li>話の流れは忘れてしまったけど手元にメモしてあったこと<ul>
<li>人が前に進むときにどんなもの（情報）が必要なのか、それをチームビルディング時に合意できていれば良い仕事ができる。</li>
<li>本当はどういう姿になっていれば、もっと良い仕事ができたんだっけ？</li>
<li>ちゃんと先のことを考えられるチームが必要</li>
</ul>
</li>
</ul>
<h2 id="LT_おのさん">LT おのさん</h2><ul>
<li><p>チーム14人</p>
<ul>
<li>Srrumの定義的には多すぎというが何が悪いのか？</li>
<li>コミュニケーション取れてますし、ちゃんとチームが強調して作業できてます。</li>
<li>問題ない！</li>
</ul>
</li>
<li><p>ディレクターに質問</p>
<ul>
<li>シモネタで会話できること</li>
<li>シモネタはコミュニケーションツール</li>
</ul>
</li>
</ul>
<h2 id="質問タイム">質問タイム</h2><h3 id="PMがチームに必要になると、人数が多くなりませんか">PMがチームに必要になると、人数が多くなりませんか</h3><ul>
<li>専任で用意せよというわけではなく、ロールを定義しましょうという話</li>
<li>大事なのは、PO、SM、チームだけでオッケーと言う誤解した状態でやらないこと</li>
<li>チームの外にはマネージャーとかいると思うので、チームの構成と、組織までスコープに入れた構成で考えたほうがいい</li>
</ul>
<h3 id="PMとプロダクトマネジメントを同時にやるのって難しくないですか">PMとプロダクトマネジメントを同時にやるのって難しくないですか</h3><ul>
<li>現在は無理だと想います。</li>
<li>昔はリリースの間隔が長かったことも有り、一緒にできた</li>
<li>最近はリリースサイクルが早くなった＋技術要素など複雑になった</li>
<li>自分たちのプロジェクトでは分けたほうがいいか？一緒にやったほうがいいかちゃんと考えて判断する</li>
<li>一ヶ月のプロジェクトだったら、マネジメントはチーム各自で行うなど場合によって考えたほうがいい</li>
</ul>
<h2 id="悩み相談">悩み相談</h2><h3 id="トレードオフできない">トレードオフできない</h3><ul>
<li>意思決定する情報がたりないので、みんなトレードオフの判断ができないという状況という可能性もある</li>
<li>どんな情報があったら優先順位が決められるかという話をしてみる</li>
<li><p>コンペティティブインテリジェンスを探す旅に出るのもおすすめ</p>
</li>
<li><p>どんな情報があったら決められますか？と聞いてみる。</p>
</li>
</ul>
<h3 id="主体性がないメンバーにどうやって主体性を発揮させるか">主体性がないメンバーにどうやって主体性を発揮させるか</h3><ul>
<li>主体性が与えられていない人もいるということもいるので、まずそこは確認しましょう</li>
<li><p>その場合は契約を変えないといけない</p>
</li>
<li><p>それでもできないのであれば、要員交代を要求する。もしくはそういった取り組み方だと評価があまりされないということをちゃんと伝える</p>
</li>
<li>チームに慣れていないうちは、さじ加減がわからずできない場合もあるので、やっていいところと、止まってほしいところを事前に共有しておくとよい</li>
</ul>
<h4 id="他の参加者の回答１">他の参加者の回答１</h4><ul>
<li>以前やってみてダメだったパターン<ul>
<li>こういう勉強会いったよ、こんな手法があったよと相手を刺激する<ul>
<li>そもそも興味が無いので響かない</li>
</ul>
</li>
<li>アジャイルと言わずにやってみる<ul>
<li>定着しなかった</li>
<li>言わないとやらなかった</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="他の参加者の回答２">他の参加者の回答２</h4><ul>
<li>チームメンバーが今できていないことを共有する<ul>
<li>できていないことに気づくことによって、自発的にやることもある</li>
</ul>
</li>
</ul>
<h4 id="他の参加者の回答３">他の参加者の回答３</h4><ul>
<li>ビジョンを共有する</li>
<li>自分が作ったものがどう使われているか見せる→お客さんと合わせる</li>
</ul>
<h1 id="感想">感想</h1><p>７つの習慣に学ぶ！というほどプロダクトオーナーと７つの習慣は密接に絡んでいなかった気もするが、<br>７つの習慣のエッセンスと（駆け足だったけど）プロダクトオーナーについて話を聞けたのは良かった。</p>
<p>アジャイルひよこクラブは質問とか、悩み相談にもウェイトをおいているので、メインスピーカーの話がどうしても短くなってしまうのが悩みどころ。<br>初心者の悩み相談というコミュニティのスタンスなので、この方式はいいと思うが、プロダクトオーナーの話は別の所でもう少し詳しく聞いてみたくなった。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://agile-hiyoko-club.doorkeeper.jp/events/41580" target="_blank" rel="external">アジャイルひよこクラブ「つの習慣に学ぶ！！開発者から見たプロダクトオーナーとのよい付き]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「ビブリオバトル入門―本を通して人を知る・人を通して本を知る」をよみました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/04/18/20160417-reading-bibliobattle/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/04/18/20160417-reading-bibliobattle/</id>
    <published>2016-04-18T05:44:40.000Z</published>
    <updated>2016-04-21T01:00:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4889510494" target="_blank" rel="external">ビブリオバトル入門―本を通して人を知る・人を通して本を知る</a></li>
<li>所要時間<br>2時間 (必要なところだけ拾い読みしました)</li>
<li>価格<br>¥0 (図書館で借りてきた)</li>
</ul>
<h1 id="感想">感想</h1><p>私が関わっている、とあるイベントでビブリオバトルをやってみたらどうかという企画が立ち上がりました。<br>興味があったので私もそのイベントのビブリオバトル運営に手を挙げました。</p>
<p>手を挙げて見たものの実はビブリオバトル自体やったことも無ければ、詳しくも知らないので、<br>まずは基礎知識を得ようということで安定の千代田区立図書館からこの本を借りてきました。</p>
<p>読んだ箇所は</p>
<ul>
<li>ビブリオバトルの公式ルールと、ルールの意図について</li>
<li>様々なビブリオバトルサークルの活動についてをちょっと</li>
<li>今後のビブリオバトルの広がりについてサラッと</li>
</ul>
<p>読んだ結果わかったことは</p>
<ul>
<li>ビブリオバトルのルールはしっかり決まっており、しかも厳密に守ることが求められている。<ul>
<li>発表5分という時間一つをとってもちゃんと意図があるため、ビブリオバトルと名乗る以上は勝手にアレンジしてはいけない。</li>
</ul>
</li>
<li>この本が発行された時点では活動していたサークルが結構活動休止してたりする<ul>
<li>下火になってしまったのか？</li>
</ul>
</li>
<li>でも調べてみると、そこそこビブリオバトルが行われている<ul>
<li><a href="http://www.bibliobattle.jp/calendar" target="_blank" rel="external">ビブリオバトル公式サイトカレンダー</a></li>
<li><a href="http://www.yurindo.co.jp/static/bibliobattle/" target="_blank" rel="external">ビブリオバトル有隣堂</a></li>
</ul>
</li>
</ul>
<p>ひとまず、基本的なことは知ることができたので、目的は達成できました。</p>
<p>なお、<a href="http://www.bibliobattle.jp/koushiki-ruru" target="_blank" rel="external">公式ルール</a>はビブリオバトル公式サイトにも掲載されています。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4889510494" target="_blank" rel="external">ビブリオバトル入門―本を通して人を知る・人を通]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ハンダゴテとコテ先を変えたら劇的に捗ったはなし]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/04/18/20160309-handa-kotesaki/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/04/18/20160309-handa-kotesaki/</id>
    <published>2016-04-17T15:00:00.000Z</published>
    <updated>2016-04-18T13:13:36.000Z</updated>
    <content type="html"><![CDATA[<p>先日はんだゴテと、はんだゴテのコテ先を買い換えたら劇的に作業が捗るようになったので、<br>その感動を（役に立つ人がどれくらいいるかわかりませんが）共有します。</p>
<h1 id="結論">結論</h1><p>お急ぎの方向けに結論を先に書いておきます。</p>
<p>このハンダゴテに<br><a href="http://www.amazon.co.jp/dp/B006MQD7M4/" target="_blank" rel="external">白光 ダイヤル式温度制御はんだこて FX600</a></p>
<p>このコテ先<br><a href="http://www.amazon.co.jp/dp/B004OR7UBM/" target="_blank" rel="external">白光 こて先 2C型 T18-C2</a></p>
<p>を装着してください。</p>
<p>ハンダ付けのイメージが変わります。<br>少なくとも私は変わりました。</p>
<h1 id="いままでとの違い">いままでとの違い</h1><p>今まで使っていたハンダゴテは<a href="http://www.goot.jp/handakote/ks-30r/" target="_blank" rel="external">goot KS-30R</a>と同じような10年くらい前に購入したハンダゴテでした。<br><br>ぱっと見たところ、どっちでもいいんじゃないか、どっちもハンダゴテじゃないかというのはまぁそうなんですが、<br>同じようで結構違うのでハンダゴテを比較して見ます。</p>
<ul>
<li><p>ヒーター<br>以前のハンダゴテはニクロムヒーターと呼ばれるヒーターで、コテ先があたたまるまで５分以上時間がかかりました。そのため、ちょっとハンダ付けしたいのにヒーターがあたたまるまで待つ時間が無駄でした。<br><br>その点セラミックヒーターは、１ー２分でコテ先があたたまるため、気軽にハンダ付けができて作業へのモチベーションが上がります。</p>
</li>
<li><p>温度調節機能（温度お知らせランプ）<br>ハンダは温度が高くなりすぎると、酸化して劣化してしまうらしく、適切な温度で短時間でハンダ付けを行うのがいいらしいです。<br>そこで、温度調節機能です。ダイアルで任意の温度に合わせておくと自動的にその温度まで温まったら加熱が止まり、コテに付いているLEDで温まったことを通知してくれます。<br><br>最近健康に気を使って、鉛フリーはんだを使い始めたものの、普通のハンダより融点が高くて使いにくいなぁと感じていた私にとっても、鉛フリーはんだの融点のちょい上にピンポイントで温度を設定できる温度調節はとても良い感じです。</p>
</li>
<li><p>コテ先<br>普通にハンダゴテを買うと、鉛筆の用に先が尖ったコテ先がついてきます。いままでは特に気にせずそれを使っていました。<br>基盤とピンヘッダのハンダ付けで両方にうまく熱が伝えることができない不器用な私にはハンダ付けは非常に面倒なものでした。<br><br>しかし、インターネットでススメられていた、このコテ先に変えた途端そんな私でもみるみるピンヘッダがハンダ付けできるようになりました。<br>もう、<a href="http://bullworker.detail-page.com/img/ad.jpg" target="_blank" rel="external">ブルワーカー</a>なんか比じゃないくらい簡単でした。</p>
</li>
</ul>
<p>ということで、ハンダ付けがうまくいかないと感じている紳士淑女のみなさまはコテとコテ先を変えてみてはいかがでしょうか。</p>
<p>きっと、ザクからゲルググに乗り換えたくらいの快適感を得られると想います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先日はんだゴテと、はんだゴテのコテ先を買い換えたら劇的に作業が捗るようになったので、<br>その感動を（役に立つ人がどれくらいいるかわかりませんが）共有します。</p>
<h1 id="結論">結論</h1><p>お急ぎの方向けに結論を先に書いておきます。</p>
<p>こ]]>
    </summary>
    
      <category term="IoT" scheme="http://yenjoji.github.io/pages/pages/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「エバンジェリスト養成講座 究極のプレゼンハック100 」をよみました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/04/12/20160411-reading-evangelist/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/04/12/20160411-reading-evangelist/</id>
    <published>2016-04-12T03:24:39.000Z</published>
    <updated>2016-04-20T09:27:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/100/dp/4798125091/" target="_blank" rel="external">エバンジェリスト養成講座 究極のプレゼンハック100 </a></li>
<li>所要時間<br>3時間くらい。読みやすくてさくっと読めた</li>
<li>価格<br>¥0 (図書館で借りてきた)</li>
</ul>
<h1 id="感想">感想</h1><p>最近行きつけの千代田区立図書館で、本を探していた時にたまたま目についたので借りてみました。<br>プレゼンテーションのグダグダさには定評があるので、少しでもその汚名を返上できればという一縷の望みもあり。<br>この本の続編？<a href="http://www.amazon.co.jp/dp/4798142999/" target="_blank" rel="external">新エバンジェリスト養成講座</a>が <a href="http://toyokeizai.net/articles/-/100153" target="_blank" rel="external">Amazon習慣売れ筋ランキング</a>でトップをとっていたので本当はそっちを読もうと思っていたのですが、図書館にはなかったので、まずは一作目からいってみました。</p>
<p>AmazonのKindle版の煽り文句が「プレゼンのカリスマはジョブスだけじゃない」などとかなりうさんくさいですが。内容はとてもいいものでした。</p>
<p>本の内容は、著者がプレゼンテーションを行うときにどういった考えでどういったことに気をつけているかの解説です。<br>著者が行っているプレゼンテーション講座を書籍化したものだそうですが、その触れ込みのとおり著者のプレゼンテーションを聞くようにサラッと読めてしまうものでした。</p>
<p>内容は<a href="http://www.excite.co.jp/News/reviewbook/20111003/E1317479273138.html" target="_blank" rel="external">こちら</a>によくまとまっているので、こちらを参照していただくと良いかと想います。</p>
<p>印象に残っているのは</p>
<ul>
<li>プレゼンテーションは伝われば成功</li>
<li>15分程度のプレゼンテーションでは伝えられることは一つくらい</li>
<li>プレゼンテーション初心者はフラッシュ型がおすすめ</li>
<li>顧客目線で話をする「XXをリリースしました」ではなく「XXをお使いいただけるようになりました」</li>
<li>とにかくデモが重要</li>
</ul>
<p>さくっと読めるし、まだ内容を咀嚼しきれていないので、近々再読しようと想います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/100/dp/4798125091/" target="_blank" rel="external">エバンジェリスト養成講座 究極のプレ]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「巨大ダムの“なぜ"を科学する」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/04/12/20160407-reading-dambook/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/04/12/20160407-reading-dambook/</id>
    <published>2016-04-11T15:00:00.000Z</published>
    <updated>2016-04-18T12:25:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4860591313/" target="_blank" rel="external">巨大ダムの“なぜ”を科学する</a></li>
<li>所要時間<br>6時間</li>
<li>価格<br>¥0 (図書館で借りてきた)</li>
</ul>
<h1 id="感想">感想</h1><p>趣味でサイクリングに行くことがあるのですが、山などを目指していくと意外とダムというものがあることに気づきました。<br>サイクリングの目的地や中継点にダムを設定してみるのもいいかなと思い、それならもう少しダムについて詳しくなれば楽しくなるかと思い手に取りました。</p>
<p>ちなみにダムについては以前<a href="http://www.amazon.co.jp/dp/4274503518/" target="_blank" rel="external">ダムマニア</a>を一度読み、なんとなく知識がある状態でした。</p>
<p>「巨大ダムの“なぜ”を科学する」という題名でしたが、内容は「西松建設「ダム」プロジェクトチーム (著)」ということもあって、主に巨大ダムはどうやって建築されるかという部分の解説です。<br>大きくコンクリートダムとアースダムの２つについて、ダムの建築場所の選定から、ダムの建築の工程が丁寧に解説されています。</p>
<p>ダム雑学としてはいいように思えます。</p>
<p>ただ、ところどころ、専門用語と思われる知らない用語がなんの前触れもなく使われている箇所があったりと、若干の不親切感があったのが残念でした。</p>
<p>ダムがどうやって作られるかを知りたい方にはおすすめできます。<br>ダムの味わい方が知りたい方にはちょっとおすすめしないかもしれません。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4860591313/" target="_blank" rel="external">巨大ダムの“なぜ”を科学する</a></li]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[姫路城を作ろう -準備編-]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/03/27/20160327-let-us-construct-himeji-jo_001/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/03/27/20160327-let-us-construct-himeji-jo_001/</id>
    <published>2016-03-26T15:00:00.000Z</published>
    <updated>2016-03-27T02:42:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="動機">動機</h1><p>前回の<a href="./2015/04/09/raspi-xfd/">ズゴックでのXFD</a>と<a href="./2015/07/14/mackerel-raspi-temp/">ズゴック温度計</a>から気づくとはや半年以上が経過していました。<br>当初はネタとしても、用途としても満足をしていたのものの、使っていくうちに幾つか不満が出てきました。</p>
<ol>
<li>Bambooへの問い合わせがすべてRasperryPiで動いているGroovyのコードにかかれているため、Bambooの構成が変わるたびにGroovy修正→パッケージ→再デプロイが必要でメンテナンスが面倒でした、結果的にBambooの監視は途中から止めてしまっていました。</li>
<li>Bambooのビルドのイベント以外でもLED光らせたら楽しいかなぁというイベント（プルリクエストとか）があるのに、上記の通りメンテナンスが面倒なので結局応用がきかせにくく、せっかくアイディアが思いついてもそのまま寝かせてしまっていました。</li>
<li>温度、湿度情報もMackerel以外でも使えそうなのに、RasperryPi上でコマンドを実行しないと値が取れないので使いにくくせっかくのデータが行かせていませんでした。</li>
</ol>
<p>そこで今回は、この不満を解消しつつ、</p>
<ol>
<li>Go言語なんか目につく機会が多くなったんで、ここいらでちょっと使ってみたいなぁ。何ならDockerとかHashicorpとかコード読めるようになったら嬉しい！</li>
<li>Rundeckって社内で使っている人も増えてるし、世間的にも流行ってるっぽいからちょっと使ってみたい。いやむしろ使うべき！</li>
</ol>
<p>という個人的な野望を満たすため、ズゴックのアップデートを行うことにしました。</p>
<h2 id="なんで姫路城？">なんで姫路城？</h2><p>という経緯でズゴックをアップデートしようと思い立ったものの</p>
<ol>
<li>スゴックは職場に置きっぱなしで手元になかった(そもそものうっかり！)</li>
<li>ガンダムネタは鉄板かと思っていたが、最近入社した若者の中にはガンダムを知らないというケースがあった(ジェネレーションギャップ！！！)</li>
<li>アニメより歴史的な建造物とかのほうが一般受けするんじゃないか(という下心！)</li>
<li>人型ロボットはスペースが少なくてセンサーの設置やケーブルの取り回しが大変<br>といういくつか問題と前回の反省点がありました。</li>
</ol>
<p>そんなことを考えて悶々とした日々を送っていたところ。<br>「なんか最近テレビで城の特集とかやってるし下町ロケットで仮面ライダードライブ(役だったひと)が入院中の子供に姫路城プレゼントしてたしこれはもう絶対城しかない」<br>というひらめきを得て、ズゴックから路線を変えて<a href="http://www.doyusha-model.com/list/pramodel/jj1200.html" target="_blank" rel="external">姫路城</a>をベースに新しいデバイスを作ることにしました。</p>
<h2 id="なんでGo言語">なんでGo言語</h2><p>なんか（いまになって）流行ってる風なのと、風のうわさで「Go言語いいよいいよ」みたいな話は聞くものの、具体的に何がいいのかピンとこなかったので使ったらわかるかもしれないという淡い期待を込めてGo言語を採用しました。</p>
<h2 id="なんでRundeckとかつかったの？">なんでRundeckとかつかったの？</h2><p><a href="http://www-03.ibm.com/software/products/ja/workload-scheduler" target="_blank" rel="external">IBM Tivoli Workload Scheduler</a>とか<a href="http://www.hitachi.co.jp/Prod/comp/soft1/jp1/products/list/ajs/index.html" target="_blank" rel="external">JP1 AJS</a>とか<a href="http://www.bmcsoftware.jp/it-solutions/control-m.html" target="_blank" rel="external">Controll-M</a>とかで苦しんできた過去を踏まえて、いま流行りっぽいオープンソースのジョブスケジューラの実力（の片鱗）を見てみたかったのと、「<a href="http://muranonushi.hatenablog.jp/entry/2015/12/01/200413" target="_blank" rel="external">SSHログインしたら負け</a>」というポリシーのもと、一旦作ったプロダクトの運用はSSHを使わずにできないといけないという流派の存在をしり、そのムーブメントに乗ってみようかと思ったので採用してみました。</p>
<h1 id="アーキテクチャ">アーキテクチャ</h1><p>今回のポイントとしては</p>
<ul>
<li>センサー、LEDの制御をREST API化して、Raspi本体からも、外部からも気軽に使えるようにする。</li>
<li>物理ボタンを押した際のアクションをRundeckのJOB定義にすることにより、ブラウザからボタンの振る舞いを変更できるようにする。<br>の2点です。</li>
</ul>
<p>シンプルなのであまり参考になりませんが、LED、温度センサー、物理ボタンの処理シーケンスを書いてみました。</p>
<ul>
<li>LED処理シーケンス<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/25981774371/in/dateposted-public/" title="姫路城LED操作" target="_blank" rel="external"><img src="https://farm2.staticflickr.com/1544/25981774371_e01aa74aa7.jpg" width="500" height="376" alt="姫路城LED操作"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>温湿度計処理シーケンス<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/25981774261/in/dateposted-public/" title="姫路城温湿度取得" target="_blank" rel="external"><img src="https://farm2.staticflickr.com/1584/25981774261_64c930f0ed.jpg" width="500" height="285" alt="姫路城温湿度取得"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>物理ボタン処理シーケンス<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/25775286170/in/dateposted-public/" title="姫路城ボタン" target="_blank" rel="external"><img src="https://farm2.staticflickr.com/1662/25775286170_74c25c1914.jpg" width="500" height="350" alt="姫路城ボタン"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>書いてみて再認識しましたがほんとに大したことないシーケンスですね。</li>
</ul>
<h1 id="準備">準備</h1><h2 id="材料">材料</h2><ul>
<li><a href="http://www.yodobashi.com/%E7%AB%A5%E5%8F%8B%E7%A4%BE-DOYUSHA-JOYJOY%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-1-800-%E5%A7%AB%E8%B7%AF%E5%9F%8E/pd/100000001000991908/" target="_blank" rel="external">童友社 DOYUSHA<br>JOYJOYコレクション 1/800 姫路城</a><ul>
<li>関係ないですが、ヨドバシはプラモが常に安くていいですね。</li>
</ul>
</li>
<li><a href="http://akizukidenshi.com/catalog/g/gM-09024/" target="_blank" rel="external">Ｒａｓｐｂｅｒｒｙ　Ｐｉ　２　Ｍｏｄｅｌ　Ｂ</a></li>
<li><a href="http://akizukidenshi.com/catalog/g/gI-02476/" target="_blank" rel="external">ＲＧＢフルカラーＬＥＤ　５ｍｍ４本足　ＯＳＴＡ５１３１Ａ　カソードコモン</a><ul>
<li>フルカラーLEDなら何でもいいですが、<a href="http://akizukidenshi.com/catalog/g/gI-08411/" target="_blank" rel="external">マイコン内蔵のLED</a>はPaspberryPiからの制御が難しいという話を聞いて今回は避けました。</li>
</ul>
</li>
<li><a href="http://akizukidenshi.com/catalog/g/gM-08663/" target="_blank" rel="external">温湿度センサ　モジュール　ＡＭ２３２０</a><ul>
<li><a href="http://akizukidenshi.com/catalog/g/gM-08775/" target="_blank" rel="external">違うモジュール</a>を試してみようと思いましたが、今回は個人的に実績のあるこちらのモジュールにしました</li>
</ul>
</li>
<li><a href="http://akizukidenshi.com/catalog/g/gR-25331/" target="_blank" rel="external">カーボン抵抗（炭素皮膜抵抗）　１／４Ｗ　３３０Ω</a></li>
<li><a href="http://akizukidenshi.com/catalog/g/gP-02561/" target="_blank" rel="external">タクトスイッチ（大）１０個セット</a></li>
<li><p><a href="http://akizukidenshi.com/catalog/g/gP-05294/" target="_blank" rel="external">ブレッドボード　ＢＢ－８０１</a></p>
</li>
<li><p>適当なジャンパ線</p>
</li>
<li>ハンダゴテ＋はんだ</li>
<li>私は温度計の足を直接はんだ付けしたくなかったので<a href="http://akizukidenshi.com/catalog/g/gC-05779/" target="_blank" rel="external">分割ロングピンソケット　１ｘ４２　（４２Ｐ）</a> を使いました。</li>
</ul>
<p>電子部品系は<a href="http://akizukidenshi.com/" target="_blank" rel="external">秋月電子</a>で購入し、プラモはヨドバシカメラで購入しました。</p>
<h1 id="次回">次回</h1><p>今回は、なんとなくの設計と、材料を揃えました。<br>次回は、姫路城の築城について書きたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="動機">動機</h1><p>前回の<a href="./2015/04/09/raspi-xfd/">ズゴックでのXFD</a>と<a href="./2015/07/14/mackerel-raspi-temp/">ズゴック温度計</a>から気づくとはや半年以上]]>
    </summary>
    
      <category term="IoT" scheme="http://yenjoji.github.io/pages/pages/tags/IoT/"/>
    
      <category term="Golang" scheme="http://yenjoji.github.io/pages/pages/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「ゲームにすればうまくいく」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/03/11/20160311-read-game-ni-suureba-umakuiku/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/03/11/20160311-read-game-ni-suureba-umakuiku/</id>
    <published>2016-03-10T18:00:00.000Z</published>
    <updated>2016-03-23T16:48:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B008V94CW4/" target="_blank" rel="external">ゲームにすればうまくいく</a></li>
<li>読み終わった日<br>2016/3/11</li>
<li>所要時間<br>6時間くらい？（のべ14日間）</li>
<li>購入元<br>図書館で借りてきた</li>
<li>価格<br>¥0</li>
</ul>
<h1 id="感想">感想</h1><p>ゲーミフィケーションとは、どういうことで、どのようにサービスにゲーム要素を取り込み、それによってサービスの魅力を増大させるかということについて、非常にわかりやすく書かれた本です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">「ゲーミフィケーションって、バッジ・ポイントやレベルの要素を入れればいいんでしょ」と言われることがあります。</div><div class="line">ここでいうゲームの要素はそのような表面的なことではありません。</div><div class="line">それよりもゲームの要素が、「本来のサービスの面白味」あるいは「ユーザーの利用目的」と正しくつながっているかどうかが大切なのです。</div><div class="line">ユーザーがそのサービスから得たいと考えている価値をしっかりと理解すること、それが得られるようにすることや、</div><div class="line">あるいは得られているという実感が持てるようにすることを、ゲームの要素を使って加速する、これがゲーミフィケーションの考え方です。</div></pre></td></tr></table></figure>
<p>まずは、この一文によってゲーミフィケーションの誤解と、ゲーミフィケーションについての正しい定義を提示してくれます。<br>これだけでも読んだ価値が有ります。</p>
<p>あとは、筆者の理論による、ゲーミフィケーションを支える、9つの要素からなる「g-デザインブロック」という概念について、丁寧に解説されています。</p>
<p>ゲーミフィケーションとは、コテ先の技ではなく、サービスについてよく考えて、サービス似あわせたゲーム化をしなければ成功しないと感じました。</p>
<p>内容も読みやすく、解説も論理的で丁寧でわかりやすいので、（特にサービス企画を行うような方は）一読されることをおすすめします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B008V94CW4/" target="_blank" rel="external">ゲームにすればうまくいく</a></li>
]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「佐藤可士和のクリエイティブシンキング」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/27/20160227-read-creative-thinking/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/27/20160227-read-creative-thinking/</id>
    <published>2016-02-26T16:13:14.000Z</published>
    <updated>2016-03-15T01:37:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4532490960/" target="_blank" rel="external">佐藤可士和のクリエイティブシンキング</a></li>
<li>読み終わった日<br>2016/2/27</li>
<li>所要時間<br>10時間くらい？（のべ14日間）</li>
<li>購入元<br>BookOff</li>
<li>価格<br>¥200</li>
</ul>
<h1 id="感想">感想</h1><p>佐藤可士和氏が、「クリエイティブ・シンキング」をテーマに、どのようにすればクリエイティブな思考ができるかのエッセンスをまとめた本です。</p>
<p>そこかしこにいい感じのヒントになるような言葉が散りばめられています。<br>それぞれのエッセンスを<br>”お茶の間目線”<br>など、佐藤可士和氏の言葉で綴られています。</p>
<p>私のクリエイティビティに問題があるのか、文体の相性とかだと思いますが、残念ながら私にはちょっと読みにくかったです。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/4532490960/" target="_blank" rel="external">佐藤可士和のクリエイティブシンキング</a>]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/2/26 アジャイルひよこクラブ 「今年のTryプレゼン＆現場のProblem相談＆Keep事例発表大会」に参加してきました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/26/20160226-agile-hiyoko/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/26/20160226-agile-hiyoko/</id>
    <published>2016-02-26T10:41:19.000Z</published>
    <updated>2016-02-27T08:23:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="感想">感想</h1><p>渋谷のヒカリエ31階にある株式会社medibaで開催された<a href="https://agile-hiyoko-club.doorkeeper.jp/events/38245" target="_blank" rel="external">アジャイルひよこクラブ「今年のTryプレゼン＆現場のProblem相談＆Keep事例発表大会」</a>に参加しました。</p>
<p>最近めっきり数が減った定期的に行われているアジャイル開発のコミュニティです。<br>昨年横浜道場のスタッフの永井さんとてらひでさんが登壇したのをきっかけに存在を知りました。</p>
<p>今回予定があったので、初参加してきました。</p>
<p>参加した感想としては、</p>
<ul>
<li>最近では数少ない定期的に活動しているアジャイルコミュニティであり</li>
<li>質問しやすい雰囲気からくる活発な質疑応答＆議論が行われており<br>初心者にとっては疑問をぶつけられる場であり、それなりに経験している人には質問に答えたり、質疑を聞くことにより理解をより一層深められる場でいいと感じました。</li>
</ul>
<p>デブラブでいろんな有名人に声をかけまくったので、しばらくビックタレントの公園が続くそうなので、今後も期待できそうです。</p>
<p>偶数月に開催しているそうで、次回は4月でPO Studyの関さんがメインスピーカーだそうです。</p>
<h1 id="内容">内容</h1><h2 id="イントロ">イントロ</h2><p>ちょっと遅れて到着したので、最初の説明は聞けませんでした。<br>開いている席に着席すると、まずは周りの参加者と3人から4人でグループを作って</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">私は</div><div class="line">今はXXしてます</div><div class="line">アジャイル経験はXX年です</div><div class="line"></div><div class="line">得意な言語はXXです</div><div class="line">今悩んでることはXXです</div></pre></td></tr></table></figure>
<p>のフォーマットに合わせて自己紹介をしました。</p>
<p>自己紹介後はまずLTタイムです。</p>
<h2 id="LT">LT</h2><h3 id="LT1:_たじさん_「俺がKen_Rubinから学んだこと：SM研修報告〜たじ編〜」">LT1: たじさん 「俺がKen Rubinから学んだこと：SM研修報告〜たじ編〜」</h3><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/yXJsEdUSwvxFEm" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/masayataji/certified-scrummasterlt-ver" title="Certified scrummaster研修について(LT ver.)" target="_blank">Certified scrummaster研修について(LT ver.)</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/masayataji">Masaya Taji</a></strong> </div></p>
<p>RSGT2016で基調講演を行ったKen Rubin氏による認定スクラムマスター研修に参加し（うらやまし）そこで学んだことのお話。</p>
<p>印象に残ったのは Ken Rubinが<br><strong>テストやってないとスクラムできないよ</strong><br>と言ったというところ。</p>
<p>言葉の裏にはたくさんの意図があるんだろうけど、とりあえず<a href="https://tddbc.doorkeeper.jp/events/38369" target="_blank" rel="external">TDDブートキャンプ</a>に次回は参加しようと思いました。</p>
<h3 id="LT2:_橘_周世さん_「俺がKen_Rubinから学んだこと：SM研修報告〜周生編〜」">LT2: 橘 周世さん 「俺がKen Rubinから学んだこと：SM研修報告〜周生編〜」</h3><p>同じくKen Rubinの認定スクラムマスター研修に参加し、学んだことの話。<br>橘さんは「プロダクトオーナーに求められること」という切り口での発表でした。</p>
<p>プロダクトオーナーのことがわからんから、自分でやってみたというお話。<br>その行動力と、実現できるチームがあるということがすごいと思いました。</p>
<h3 id="LT3:_出口達也さん「ペアプロはリモートでもできる」">LT3: 出口達也さん「ペアプロはリモートでもできる」</h3><p>次はリモートでもペアプロができるというお話。<br>私もその昔リモートペアプロを試したことを思い出しました。</p>
<p>以外にもその時使ったツールと似たようなツールでペアプロしていました。<br>やり方として違ったのは、ディスプレイを2つ用意し、自分の画面と相手の画面を同時に出すということでした。</p>
<p>ツールは appear.in で画面共有して、Slackでチャットしていたそうですが、私達がぶつかったのと同じく画面共有のクオリティが問題になったそうです。</p>
<p>今後はSlackが買収した画面共有サービスのScreenheroを使って見たいとおっしゃってました。</p>
<h3 id="LT4:_川鯉光起さん_「営業活動のふりかえり共有」">LT4: 川鯉光起さん 「営業活動のふりかえり共有」</h3><p>週末起業したビジネスで、苦労したところと対応したことの発表でした。</p>
<p>仮設と懸賞をショートスパンで繰り返すことで見えてくることがあるよ的な話でした。</p>
<h2 id="発表">発表</h2><h3 id="発表1:_坂本直樹「リモート開発におけるチームビルディング」">発表1: 坂本直樹「リモート開発におけるチームビルディング」</h3><p><a href="http://www.yell4u.jp/" target="_blank" rel="external">YeLL</a>という、世界初クラウド型チームビルディングサービスでリモートチーム開発を行った時のチームビルディングのお話でした。</p>
<p>YeLLではクラウドソーシングを利用して、エンジニアを集めているため<br>エンジニアが地理的に分散しているそうです（遠いところでは台湾とかっていってたような）。</p>
<p>そんな状況で、工夫している（た）ことの事例紹介でした。</p>
<ul>
<li>やっていること<ul>
<li>リモート振り返り</li>
<li><a href="https://hackpad.com/" target="_blank" rel="external">hackpad</a>というサービスを使ってKPT形式で行っている</li>
</ul>
</li>
<li><p>やったこと</p>
<ul>
<li>ストレングスファインダー</li>
<li>インタビューシート</li>
<li>ペアを組んでインタビューシート（権利の関係で社外秘）をベースに appear.inでインタビューをおこない、その後10分くらいで相手を紹介する<br>行った結果雑談が増えたて、Slackでの質問が活発になったそうです。</li>
</ul>
</li>
<li><p>顧客との対話</p>
<ul>
<li>お客さんにオフィスに来てもらってサービスを使う上での問題意識などの話を聞く、リモートメンバーはSkypeで参加する</li>
</ul>
</li>
</ul>
<h3 id="発表2:_野村_敏昭「ぼくのスクラム」">発表2: 野村 敏昭「ぼくのスクラム」</h3><p>アジャイルサムライ横浜道場で面識のある、野村さんによる社内にいる「スクラムとかよくわからんという人向けに作った資料」（の抜粋）でした。</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/KDdOesv0HRoqsn" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/toshiaki0315/ss-58775040" title="僕のスクラム" target="_blank">僕のスクラム</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/toshiaki0315">Toshiaki Nomura</a></strong> </div></p>
<p>@ebacky さんの認定スクラムマスター研修に参加した方からよく聞くのですが。ワーキングアグリーメントを最初に決めるのは定番みたいですね。</p>
<p>スプリントレビューの後にプロダクトバックログリファインメントをおこなうというのもタイミングとしてはいいかもしれないですね。</p>
<p>「ふつうのことをふつうに継続することはとてもむずかしい」はそうだなと思いました。</p>
<h3 id="発表3:_横沢_佑輔「HCDの学びから見えたアジャイルとのシナジー、そしてリーンアジャイルHCD元年へ」">発表3: 横沢 佑輔「HCDの学びから見えたアジャイルとのシナジー、そしてリーンアジャイルHCD元年へ」</h3><p>HCDというのを初めて効いたので後で調べて見ようと思いました。</p>
<h2 id="質問タイム">質問タイム</h2><h3 id="タスクをサインアップする環境を作るのはどうやりました">タスクをサインアップする環境を作るのはどうやりました</h3><ul>
<li>ホワイトボードの前でやると自発的にやります</li>
<li>動かないタスクは気を使ってあげる</li>
</ul>
<h3 id="HCDをやるのはエンジニアですか？">HCDをやるのはエンジニアですか？</h3><ul>
<li>誰でもOKです。学校では３０人中５人位しかエンジニアがいないです</li>
</ul>
<h3 id="エンジニアがユーザーインタビューするとかそういうふうにするには">エンジニアがユーザーインタビューするとかそういうふうにするには</h3><ul>
<li>自分が積極的にやること</li>
<li>結果的にエンジニアが動くようになった</li>
</ul>
<h3 id="プロダクマネージャーって採用できますか？育てたほうがいいですか？">プロダクマネージャーって採用できますか？育てたほうがいいですか？</h3><ul>
<li>ビジネスドメインを理解するのは難しいので、育てる方が早いと思う</li>
</ul>
<h3 id="タスクはチームによって違いますという話ですが、複数チームでスクラム舌ってことですか？">タスクはチームによって違いますという話ですが、複数チームでスクラム舌ってことですか？</h3><ul>
<li>いろいろなチームで、チームメンバーが仕事できることが大切</li>
<li>誰かが休んでも他の人ができる粒度が</li>
</ul>
<h3 id="ビジネスまでスコープにするおｔバックログが変わってしまうのでそこはどうか空風してますか">ビジネスまでスコープにするおｔバックログが変わってしまうのでそこはどうか空風してますか</h3><ul>
<li>ウォーターフォールでやってます</li>
<li>コンサルはアジャイルでやってるみたいです</li>
<li>ソニーとかもやってるので、できるとおもいます。  </li>
</ul>
<h3 id="朝会で３つの質問してる時に、進捗があまりないタスクは要注意という話でしたが、進捗がないのに問題ないっていう人にはどうアプローチしますか">朝会で３つの質問してる時に、進捗があまりないタスクは要注意という話でしたが、進捗がないのに問題ないっていう人にはどうアプローチしますか</h3><ul>
<li>５時間見積もりで、しばらく動いていないタスクがあったら「どうなってるか」確認する</li>
<li>見積もりを書くことによってチームが気づけるようにする</li>
</ul>
<h3 id="見積もりの付箋ってどのくらいの大きさでやってますか？">見積もりの付箋ってどのくらいの大きさでやってますか？</h3><ul>
<li><p>サブタスクに見積もりを入れてない</p>
</li>
<li><p>親タスクが終わらない</p>
<ul>
<li>→サブタスクは進んでるけど粒度がわからないので状況がわからない</li>
<li>→サブタスクも見積もったほうがいい</li>
</ul>
</li>
</ul>
<h3 id="タスクの粒度ってどれくらいですか">タスクの粒度ってどれくらいですか</h3><ul>
<li>コード書くじゃなくて、具体的にタスクに落とす</li>
<li>タスクの時間は一番デキる人で決める<br>→なんでデキる人と同じ時間でできないかと改善のきっかけになる by kiro</li>
<li>デキる人に追いつかない時に精神的にきつくならないですか<br>→ドーナツをだします<br>→ロケーションが一緒じゃないときついです</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="感想">感想</h1><p>渋谷のヒカリエ31階にある株式会社medibaで開催された<a href="https://agile-hiyoko-club.doorkeeper.jp/events/38245" target="_blank" rel="exter]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「ここらで広告コピーの本当の話をします。」を読みました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/26/20160225-reading-to-tell-the-truth-of-copy/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/26/20160225-reading-to-tell-the-truth-of-copy/</id>
    <published>2016-02-25T17:28:12.000Z</published>
    <updated>2016-04-26T06:55:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B00PCJEB86/" target="_blank" rel="external">ここらで広告コピーの本当の話をします。</a></li>
<li>読み終わった日<br>2016/2/25</li>
<li>所要時間<br>２週間</li>
<li>購入元<br>図書館で借りてきた</li>
<li>価格<br>¥0</li>
</ul>
<h1 id="感想">感想</h1><p>今年に入ってから個人的に開催している技術書じゃない本を読もうキャンペーンの一環で読んでみました。<br>広告や、マーケティングの話と言うのはいままでほとんど触れてこなかったので、新しい発見があるかなと期待して読んでみました。</p>
<p>この直前に読んだ <a href="http://www.amazon.co.jp/dp/404602836X/" target="_blank" rel="external">100円のコーラを1000円で売る方法 コミック版</a> や <a href="http://www.amazon.co.jp/dp/4492502130/" target="_blank" rel="external">ラーメン二郎にまなぶ経営学 ―大行列をつくる26（ジロー）の秘訣</a> は、マーケティングの考え方や手法を軸に、それぞれをどういった局面でどう使うかについてカタログ的に書かれていましたが、<br>この書籍はちょっと違い、どうしたら顧客（の製品）の価値を高めることができるかということについてを主題に書かれています。</p>
<p>競合優位性、ターゲット設定など、語られている手法は多くないものの、どのように考え、組み合わせれば、より価値を高められるかということが筆者の体験を元に書かれているため、非常に読み応えがありました。</p>
<p>文体も自分の好みに合っていたのか、ぐんぐん読み進められる読みやすさと、今までの自分のが上辺をなぞってるだけだったなぁと認識させてくれる内容で、おすすめできる一冊です。</p>
<p><strong><em>クライアントの要望に応えられないのは三流、クライアントの要望にしか応えられないのは二流、クライアントの要望以上を出すのが一流</em></strong></p>
<p>これは著者の先輩クリエイティブディレクターの言葉だそうですが、エンジニアにもそのまま当てはまると思います。私もはやく一流になりたいものです。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="読んだ本">読んだ本</h1><ul>
<li>題名<br><a href="http://www.amazon.co.jp/dp/B00PCJEB86/" target="_blank" rel="external">ここらで広告コピーの本当の話をします。</a]]>
    </summary>
    
      <category term="reading" scheme="http://yenjoji.github.io/pages/pages/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016/2/15 【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Java EE 7特集 に参加しました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2016/02/15/20160215-jjug-javaee7/"/>
    <id>http://yenjoji.github.io/pages/pages/2016/02/15/20160215-jjug-javaee7/</id>
    <published>2016-02-15T10:02:01.000Z</published>
    <updated>2016-03-01T02:39:57.000Z</updated>
    <content type="html"><![CDATA[<p>2016/2/15 に開催された<br><a href="http://www.java-users.jp/?p=2350" target="_blank" rel="external">【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Java EE 7特集</a><br>に参加してきました。</p>
<h1 id="感想">感想</h1><p>仕事でSpringBatchを使っていたので、JBatchとSpringBatchの差分を知りたくて参加してみました。</p>
<p>結果的には、申し訳ないですがワタシ的にはSpringでいいかなと思いました。<br>機能的にはJBatch,SpringBatchどっちを選んでも大差無いように思えましたが、</p>
<ul>
<li>JBatchは設定がXML一択</li>
<li>JavaEEを使う積極的なモチベーションがわかなかった<br>という2点で、現段階ではまだSpringの方がいいかなと思いました。</li>
</ul>
<p>久しぶりにJavaEEの話を聞いた感想としては<br>「JavaEEも仕事で使ってもいいかな」<br>と思える様になったというところでしょうか。</p>
<p>自分の JavaEE = 地雷源 というステレオタイプを改めてくれるきっかけになったのは嬉しかったです。</p>
<p>登壇者の方が、中の方だったので、Springと比べた時の長所短所など、Java全体で見たところのJavaEEという感じの話があまりなかったのは残念でした。</p>
<hr>
<p>以下、当日のメモです</p>
<h2 id="Java_EE_7徹底入門_概要説明_(猪瀬さん)">Java EE 7徹底入門 概要説明 (猪瀬さん)</h2><h3 id="書籍で目指したこと">書籍で目指したこと</h3><p>自然な日本語で実践的な機能に絞って完全に動作するサンプルを<br>→職場でJavaEE使おうと思った時に使える本にする</p>
<h3 id="出版してみて">出版してみて</h3><p>誤記が多い<br>→誤記は正誤表を確認してね。<br>→積極的にこっちを更新しているので</p>
<p>JavaEE日本語情報が増えてきた<br>→採用される候補になり訳すなった</p>
<h3 id="事件">事件</h3><p><strong>てらだよしお退職</strong></p>
<h3 id="白猫本と読んでね">白猫本と読んでね</h3><p>→スマホゲームとかぶる問題<br>→ググラビリティ低い！</p>
<h2 id="プレゼンテーション層の開発_JSF_(加藤田さん)">プレゼンテーション層の開発 JSF (加藤田さん)</h2><h3 id="JSF使ったことある人">JSF使ったことある人</h3><p>→4割→浸透してきた？</p>
<h3 id="書籍用のサンプルアプリケーション">書籍用のサンプルアプリケーション</h3><p>ナレッジシェア</p>
<h3 id="JSF_フェースレット">JSF フェースレット</h3><ul>
<li><p>XHTMLベース?！ だと?！</p>
</li>
<li><p>スクリプトレットが記述できない<br>→ロジックが強制的に分離される</p>
</li>
</ul>
<h3 id="書籍ではふれなかったこと">書籍ではふれなかったこと</h3><h4 id="JSFのより詳細なこと">JSFのより詳細なこと</h4><ul>
<li>カスタムコンポーネント<ul>
<li>独自のタグライブラリを作る</li>
</ul>
</li>
<li>イベント<ul>
<li>ValueChangeイベントとか<br>→ 値を変更してボタンを押したタイミングで発火<br>→イマイチつかえない</li>
</ul>
</li>
<li>BeanValdation<ul>
<li>グループ機能<br>→ 登録画面と変更画面でちょっと違うとかに対応</li>
</ul>
</li>
<li>EL<ul>
<li>lambda式とか<br>→EL3.0 で追加された機能とか</li>
</ul>
</li>
</ul>
<h4 id="JavaEE8">JavaEE8</h4><p>どうなるJSF2.3?</p>
<ul>
<li>WebSocket対応 → これが目玉！<ul>
<li>JSF = なるべくJavaScriptを使わないで開発しようというポリシー</li>
</ul>
</li>
<li>マルチフィールドバリデーション<ul>
<li>関連チェックができるようになる</li>
</ul>
</li>
<li>あと改善系少々。。。</li>
</ul>
<h4 id="MVC1-0">MVC1.0</h4><ul>
<li>StrutsみたいなAction機構で開発するフレームワーク<br>→ JAX-RSベース → 基本的にアノーテーションは同じ<br>→ ビューはfacelet,JSP</li>
</ul>
<h5 id="今後のプレゼンテーション">今後のプレゼンテーション</h5><ul>
<li>JSF</li>
<li>JAX-RS + Client MVC</li>
<li>MVC 1.0 + WebComponents?<br>になってくんじゃないかとおもいます。<br>→どれに行ってもコンポーネント指向に収束していく。（のか？）</li>
</ul>
<h4 id="JSF関連ライブラリ">JSF関連ライブラリ</h4><ul>
<li>コンポーネント系<br>→ 画面をリッチに<br>→ PrimeFaces</li>
<li><p>ライブラリ系<br>→ 開発を容易に<br>→ OmniFaces PrettyFaces</p>
</li>
<li><p>PrimeFaces<br>→画面系最有力</p>
</li>
<li><p>OmniFaces<br>→個人ベースだから使用する際は注意（とはこれいかに？）</p>
</li>
</ul>
<h3 id="まとめ">まとめ</h3><ul>
<li>JSFは成熟している</li>
</ul>
<h2 id="ビジネスロジック層の開発_CDI,EJB_(羽生田さん)">ビジネスロジック層の開発 CDI,EJB (羽生田さん)</h2><p>CDI, EJB 排他的な関係ではない→組み合わせて解決するのが良いとおもってる</p>
<h3 id="CDI">CDI</h3><p>POJOにスコープ定義さえあれば@Injectで好きにInjectionできる！</p>
<ul>
<li>@ConversationScoped<br>→好きにライフサイクルが定義できる</li>
</ul>
<h4 id="CDI-1">CDI</h4><ul>
<li>簡単便利</li>
<li>スコープ定義だけ覚えれば使える</li>
</ul>
<h4 id="CDI_コンテナ">CDI コンテナ</h4><ul>
<li>Weld<br>→Weldのバージョンが何かを把握していないと死ねる<br>→APサーバーのバグより前にWeldのバグを調べたほうがいいくらいの勢い</li>
</ul>
<h5 id="アクセス用API">アクセス用API</h5><ul>
<li><p>CDI</p>
<ul>
<li>CDI.current()　でとれる</li>
<li>CDI.select(MyBean.class).get(); とかできる</li>
</ul>
</li>
<li><p>CDIProvider</p>
</li>
<li><p>BeanManager</p>
<ul>
<li>Portable Extensionを担う<br>→いろいろできるけど使いすぎに注意→障害時におえなくなる？</li>
</ul>
</li>
<li><p>LifecycleEvents<br>→コンテナ周りのイベントをフックできる</p>
</li>
</ul>
<h4 id="どんな人むけ？">どんな人むけ？</h4><p>→APサーバーとかコンテナに任せておけない</p>
<p>→Weldの実装が変わったら死ねるので気をつけよう</p>
<h4 id="雑感">雑感</h4><ul>
<li>CDIコンテナの動きとか、インジェクションどの位しているのかとかを制御したい（時があるらしい）<br>→CDIビーンのライフサイクルウォッチするようなものが作りたい</li>
</ul>
<h4 id="@ConversationScoped">@ConversationScoped</h4><h3 id="CDIとトランザクション">CDIとトランザクション</h3><ul>
<li>@Transactional<ul>
<li>トランザクション境界</li>
</ul>
</li>
<li>@TransactionScoped<br>いま有効なJTAトランザクションの実行に合わせたライフサイクル<br>→トランザクションに合わせたビーンがほしい時とか</li>
</ul>
<p>(JavaEEをずっとやってきた感じでSpringと比べてどうとかそういうのはやっぱりないんだねぇ)</p>
<h2 id="バッチアプリケーションの開発_jBatch_(猪瀬さん)">バッチアプリケーションの開発 jBatch (猪瀬さん)</h2><h3 id="JBatchとは">JBatchとは</h3><p>→JSR-352<br>→SpringBatchから多くを継承<br>→SpringBatchの方が高機能<br>→SpringBatchの一般的なところを拾って標準化したもの</p>
<h3 id="Why_JBatch">Why JBatch</h3><ul>
<li>スレッドで軽量</li>
<li>ライブラリ共用できる</li>
<li>開始停止の仕組みが用意されている</li>
</ul>
<p>###ジョブとステップ<br>Jobの中にステップがある<br>→設定は <strong>XML</strong> <strong>XML</strong> <strong>XML</strong></p>
<h3 id="ジョブとステップの分離">ジョブとステップの分離</h3><ul>
<li>古くはホスト時代に遡る <strong>JCL</strong></li>
</ul>
<h3 id="ステップの種類">ステップの種類</h3><ul>
<li>チャンク型<br>→Reader/Processor/Writer形式</li>
<li>バッチレット型<br>→シンプルなやつ<br>→ SpringBatchとおなじ</li>
</ul>
<h3 id="補助機能">補助機能</h3><h4 id="ジョブリポジトリ">ジョブリポジトリ</h4><p>→Glassfishには管理画面があって、一覧で見えるとか！</p>
<h4 id="リスナ">リスナ</h4><p>→SpringBatchとおなじ</p>
<h4 id="コンテキスト">コンテキスト</h4><ul>
<li>JobContext<br>→永続化されない</li>
<li>StepContext<br>→永続化される</li>
</ul>
<h4 id="メトリック">メトリック</h4><p>→ステップの統計を取れるAPI<br>→APサーバーでも確認できる</p>
<h3 id="本に書いていない">本に書いていない</h3><ul>
<li>ステップパーティショニングという機能があるよ！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016/2/15 に開催された<br><a href="http://www.java-users.jp/?p=2350" target="_blank" rel="external">【東京】JJUGナイトセミナー　「Java EE 7徹底入門」の著者が解説！ - Ja]]>
    </summary>
    
      <category term="java" scheme="http://yenjoji.github.io/pages/pages/tags/java/"/>
    
      <category term="JJUG" scheme="http://yenjoji.github.io/pages/pages/tags/JJUG/"/>
    
  </entry>
  
</feed>