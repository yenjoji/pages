<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Rouleur]]></title>
  
  <link href="/pages/atom.xml" rel="self"/>
  <link href="http://yenjoji.github.io/pages/pages//"/>
  <updated>2015-10-26T01:17:27.000Z</updated>
  <id>http://yenjoji.github.io/pages/pages//</id>
  
  <author>
    <name><![CDATA[yenjoji]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その4 分散ストレージ設定編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/10/26/setup-stash-ha-storage-glusterfs/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/10/26/setup-stash-ha-storage-glusterfs/</id>
    <published>2015-10-26T03:00:00.000Z</published>
    <updated>2015-10-26T01:17:27.000Z</updated>
    <content type="html"><![CDATA[<p>今回もStashの高可用性を目指してクラスタを組んでいきたいと思います。<br>前回までで、サーバーと、Stashのプロセスの冗長化は一旦完了したので、今回は一番重要なデータ保存領域の冗長化を目指します。</p>
<h1 id="お知らせ">お知らせ</h1><p>今までAtlassian Stash を冗長化しようと頑張ってきましたが、つい先日なんとAtlassian Stashがなくなってしまいました。<br>今度からは生まれ変わった？ Bitbucket Server をよろしくお願いします。</p>
<p>・・・閑話休題・・・</p>
<p>それでは、Stash改めBitbucket Serverのストレージを冗長化したいと思います。</p>
<p><a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">Atlassianの公式</a>によるとストレージは GFS2 + DRBD でストレージの冗長化を行っていますが、<br>今回は個人的な興味で、GlusterFSを使って冗長構成をしてみたいと思います。</p>
<h1 id="事前準備">事前準備</h1><h2 id="VagrantにDISKを追加">VagrantにDISKを追加</h2><p>Virtualbox コンソール経由で、node01,node02 にDISKを追加します。<br>Stashのデータに使用するので、保存するデータの容量によって大きさをかんがえる必要があります。<br>今回は仮に8GBとして データ用にパーティション /dev/sdb1 を作成しました。</p>
<h1 id="GlusterFSのインストール（全ノード）">GlusterFSのインストール（全ノード）</h1><h2 id="パッケージのインストール">パッケージのインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/&#10;curl -o glusterfs.repo http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-epel.repo&#10;yum install glusterfs-server</span><br></pre></td></tr></table></figure>
<h2 id="通信ポートの開放">通信ポートの開放</h2><p>まずは、通信に必要なポートを開放します。<br>今回は実験用途なのでどこからでも通信可能に設定してしまいます。</p>
<p>/usr/lib/firewalld/services/glusterfs.xml を以下の内容で作成します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;service&#62;&#10;  &#60;short&#62;GlusterFS&#60;/short&#62;&#10;  &#60;description&#62;GlusterFS&#60;/description&#62;&#10;  &#60;port protocol=&#34;tcp&#34; port=&#34;1111&#34;/&#62;&#10;  &#60;port protocol=&#34;tcp&#34; port=&#34;24007-24100&#34;/&#62;&#10;&#9;&#60;port protocol=&#34;tcp&#34; port=&#34;49152&#34;/&#62;&#10;&#60;/service&#62;</span><br></pre></td></tr></table></figure></p>
<p>作成したファイルをもとにファイワォールの設定を変更します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=glusterfs&#10;firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<h1 id="GlusterFS_Volumeの作成">GlusterFS Volumeの作成</h1><p>次にGlusterFSで使用するディスクの準備をします。</p>
<h2 id="ファイルシステムの作成">ファイルシステムの作成</h2><p>GlusterFSは共有するボリュームのファイルシステムをXFSにする必要があります。<br>まずはデータ用のボリュームをXFSで用意します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/sdb1</span><br></pre></td></tr></table></figure>
<p>/etc/fstab の末尾にエントリを追加します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb1       /data&#9;&#9;&#9;&#9;&#9;  xfs     defaults        0 0</span><br></pre></td></tr></table></figure></p>
<p>マウントします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -a</span><br></pre></td></tr></table></figure></p>
<h2 id="GlusterFSの起動">GlusterFSの起動</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start glusterd&#10;systemctl enable glusterd</span><br></pre></td></tr></table></figure>
<h2 id="GlusterFSのノード登録">GlusterFSのノード登録</h2><ul>
<li><p>node01</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe node02</span><br></pre></td></tr></table></figure>
</li>
<li><p>node02</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe node01</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="GlusterFSのVolume作成(任意の1ノードで実行)">GlusterFSのVolume作成(任意の1ノードで実行)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/atlassian/stash</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create stash_vol replica 2 node01:/data/atlassian/stash node02:/data/atlassian/stash&#10;gluster volume start stash_vol</span><br></pre></td></tr></table></figure>
<h2 id="GlusterFSのマウント">GlusterFSのマウント</h2><h3 id="マウントポイントの作成">マウントポイントの作成</h3><p>まずマウントポイントを作成します。<br>既存のStashのデータディレクトリはあとでGlusterFS上にコピーするためリネームして退避しておきます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/atlassian/application-data/stash /var/atlassian/application-data/stash.org&#10;mkdir -p  /var/atlassian/application-data/stash&#10;chown atlstash:atlstash /var/atlassian/application-data/stash</span><br></pre></td></tr></table></figure></p>
<h3 id="fstabの修正">fstabの修正</h3><p>次に各ノードで /etc/fstab にエントリを追加します。</p>
<ul>
<li><p>node01</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node01:stash_vol        /var/atlassian/application-data/stash   glusterfs       defaults        0 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>node02</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node02:stash_vol        /var/atlassian/application-data/stash   glusterfs       defaults        0 0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ファイルシステムのマウント">ファイルシステムのマウント</h3><p>次に、両方のノードでglusterfsをマウントします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -a</span><br></pre></td></tr></table></figure></p>
<h3 id="既存データのコピー">既存データのコピー</h3><p>次に、今までのデータをどちらか一方のノードでコピーします<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rp /var/atlassian/application-data/stash.org/* /var/atlassian/application-data/stash/.</span><br></pre></td></tr></table></figure></p>
<p>これで課題だったDISKの冗長化も出来、Stash改めBitbucketServerのクラスタリングが完了しました。<br>実際の運用では、定期的なデータのバックアップは行う事はあっても、クラスタリングをすることはまれかもしれませんが、<br>クラスタリングを検討されている方の参考になれば幸いです。</p>
<p>※ このシリーズの記事はあくまで検証用途でクラスタの設定を行っているため、実際の環境では使用に耐えない可能性があります。<br>   実際にHAを構成を行う場合には十分な検証を行うことをおすすめします。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回もStashの高可用性を目指してクラスタを組んでいきたいと思います。<br>前回までで、サーバーと、Stashのプロセスの冗長化は一旦完了したので、今回は一番重要なデータ保存領域の冗長化を目指します。</p>
<h1 id="お知らせ">お知らせ</h1><p>今までA]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="GlusterFS" scheme="http://yenjoji.github.io/pages/pages/tags/GlusterFS/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thinking about INVEST]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/26/thiking-about-invest/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/26/thiking-about-invest/</id>
    <published>2015-09-26T03:00:00.000Z</published>
    <updated>2015-09-25T17:39:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="INVEST">INVEST</h1><p>Have you ever heard the acronym “INVEST”?</p>
<p>The INVEST mnemonic was created by Bill Wake and it is introduced in <a href="https://pragprog.com/titles/jtrap/the-agile-samurai" target="_blank" rel="external">The Agile Samurai(@jrasmusson 2010)</a> .</p>
<p>“INVEST” is as a reminder of the characteristics of a good quality user story,</p>
<ul>
<li>Independent<ul>
<li>The user story should be self-contained, in a way that there is no inherent dependency on another user story.</li>
</ul>
</li>
<li>Negotiable<ul>
<li>User stories, up until they are part of an iteration, can always be changed and rewritten.</li>
</ul>
</li>
<li>Valuable<ul>
<li>A u ser story must deliver value to the end user.</li>
</ul>
</li>
<li>Estimable<ul>
<li>You must always be able to estimate the size of a user story.</li>
</ul>
</li>
<li>Small<ul>
<li>User stories should not be so big as to become impossible to plan/task/prioritize with a certain level of certainty.</li>
</ul>
</li>
<li>Testable<ul>
<li>The user story or its related description must provide the necessary information to make test development possible.</li>
</ul>
</li>
</ul>
<p>quated from <a href="https://en.wikipedia.org/wiki/INVEST_(mnemonic" target="_blank" rel="external">wikipedia</a>)</p>
<p>“Valuable” is easy understand Of these six words, So everyone will care<br>But Testable,Small and Estimable are often forgotten.</p>
<p>If you noticed follow problems, It may be able to solve it by being conscious of INVEST.</p>
<ul>
<li>Story goal is difficult to understand, Because acceptance criteria is not clear.</li>
<li>Story is hard to estimate, Because the size is huge.</li>
</ul>
<h1 id="INVEST_User_Story">INVEST User Story</h1><p>Then I think about an example about the user story that is INVEST.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As a Administrator,&#10;I want search user by name so that I don&#39;t use time for find user in list.</span><br></pre></td></tr></table></figure>
<ul>
<li>Independent<ul>
<li>OK. This story is inipendent feature.</li>
</ul>
</li>
<li>Negotiable<ul>
<li>OK. This story is not specified implementation.</li>
</ul>
</li>
<li>Valuable<ul>
<li>OK. To improve Administrator’s work efficiency</li>
</ul>
</li>
<li>Estimable<ul>
<li>OK. It story may be modified 1 view (and 1 logic)</li>
</ul>
</li>
<li>Small<ul>
<li>OK. It is simple and small.</li>
</ul>
</li>
<li>Testable<ul>
<li>OK. Story is simple, (please confirm the acceptance criteria properly in PO.)</li>
</ul>
</li>
</ul>
<p>It is INVEST and good user story.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As a ramen JIRO lovers (sometimes called Jirolian),&#10;I want to know which JIRO is open now&#10;so I wants to go to Jiro as soon as I thought.</span><br></pre></td></tr></table></figure>
<p>And this user story is INVEST too.</p>
<h1 id="Conclusion">Conclusion</h1><p>INVEST is good practice for writing user story.</p>
<p>How about if you try a Story-Gathering workshop while being conscious of INVEST?</p>
<h1 id="Appendix">Appendix</h1><h1 id="INVEST_something">INVEST something</h1><p>With that said, I understood that INVEST was important in thinking about user story.<br>In, what’s the INVEST in something other than user stories can be applied?</p>
<p>I’m tried.</p>
<h2 id="JIRO">JIRO</h2><p>Ramen Jiro is of course technically ramen, but it is somewhat different from any other ramen in Japan.</p>
<p>quated from <a href="http://www.ramentokyo.com/2007/06/ramen-jiro.html" target="_blank" rel="external">http://www.ramentokyo.com/2007/06/ramen-jiro.html</a></p>
<p>Ramen Jiro is introduced in Guardian 2009 <a href="http://www.theguardian.com/lifeandstyle/2009/sep/13/best-foods-in-the-world" target="_blank" rel="external">The 50 best things to eat in the world, and where to eat them</a></p>
<p>and <a href="https://twitter.com/elonmusk/status/508617476804866048" target="_blank" rel="external">Elon Mask was visited.</a></p>
<h2 id="Is_Jiro_INVEST?">Is Jiro INVEST?</h2><ul>
<li>Independent<ul>
<li>Jiro has some unique distinction. amazing large serving, own rule, etc…</li>
<li>someone says “Jiro is not ramen, but Jiro is the Independent food”</li>
</ul>
</li>
<li>Negotiable<ul>
<li>Jiro is negotiable some toppings vegitables (yasai), Backfat (abura), garlic(nin-niku) and depth of taste (karame).</li>
<li>If you want to more and more vegitables,backfat and garlic, you shoud say “yasai, abura, nin-niku mashi-mashi”.</li>
</ul>
</li>
<li>Valuable<ul>
<li>Jiro is Cost-effective.</li>
<li>Jiro is unique.</li>
</ul>
</li>
<li>Estimable<ul>
<li>While you attend a few times, it will be so as estimated to be either the amount of how much today is eaten.</li>
<li>If, when you can not eat too much, it would be nice if I tell half noodles when presenting the meal ticket.</li>
</ul>
</li>
<li>Small<ul>
<li>Jiro’s menu have “small size” (but Jiro’s small size equals ordinaly ramens large size or extra large size.)</li>
</ul>
</li>
<li>Testable<ul>
<li>Jiro might store a total of 40. we can achieve 100% coverage. It’s testable.</li>
</ul>
</li>
</ul>
<p>Jiro isn’t completely INVEST. but Jiro is extremely unique.</p>
<h2 id="Conclusion-1">Conclusion</h2><p>Meanwhile, it is very distinctive ramen Jiro, as there is also saying, “Seeing is believing”, First, What is How about try to experience.</p>
<p>Enjoy “mashi-mashi”.</p>
<p>(日本語版)</p>
<h1 id="INVEST-1">INVEST</h1><p>INVEST という頭文字語をご存知ですか？</p>
<p>“INVEST” とは <a href="http://xp123.com/articles/invest-in-good-stories-and-smart-tasks/" target="_blank" rel="external">ビルウェイクにより考案され</a>、<a href="https://github.com/agile-samurai-ja/support/wiki" target="_blank" rel="external">アジャイルサムライ</a>でも紹介された、よくかけているユーザーストーリーに備わっている6つの要素を表します。</p>
<ul>
<li>Indipendent<ul>
<li>独立している</li>
</ul>
</li>
<li>Negotiable<ul>
<li>交渉の余地がある</li>
</ul>
</li>
<li>Valuable<ul>
<li>価値のある</li>
</ul>
</li>
<li>Estimable<ul>
<li>見積もれる</li>
</ul>
</li>
<li>Small<ul>
<li>小さい</li>
</ul>
</li>
<li>Testable<ul>
<li>テストできる</li>
</ul>
</li>
</ul>
<p>この中でもValuableはわかりやすいので、誰もが気にするのですが、<br>意外と見逃し気味なのが、Testable,Small,Estimableです。</p>
<ul>
<li>受け入れ条件が曖昧でストーリーのゴールがわかりにくい</li>
<li>ストーリーが壮大過ぎて見積もろうとしても想像が出来ない</li>
</ul>
<p>などの状況に気づいたら、INVESTを意識すると解決できるかも知れません。</p>
<h1 id="INVEST_User_Story-1">INVEST User Story</h1><p>では、INVESTなユーザーストーリーについて例を考えてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#31649;&#29702;&#32773;&#12399;&#12518;&#12540;&#12470;&#12540;&#12434;&#26908;&#32034;&#12375;&#12383;&#12356;&#12290;&#12394;&#12380;&#12394;&#12425;&#12522;&#12473;&#12488;&#12363;&#12425;&#30446;Grep&#12377;&#12427;&#12398;&#12364;&#12461;&#12484;&#12452;&#12363;&#12425;&#12384;&#12290;</span><br></pre></td></tr></table></figure>
<ul>
<li>Indipendent<ul>
<li>OK. 独立したフィーチャーです。</li>
</ul>
</li>
<li>Negotiable<ul>
<li>OK. 実現方法などはまだ交渉（カイゼン）の余地があります。</li>
</ul>
</li>
<li>Valuable<ul>
<li>OK. 管理者の作業効率が上がります。</li>
</ul>
</li>
<li>Estimable<ul>
<li>OK. 開発者が想像できるくらいのサイズです。（おそらく1画面＋1ロジックでしょう）</li>
</ul>
</li>
<li>Small<ul>
<li>OK. 十分に小さいです。</li>
</ul>
</li>
<li>Testable<ul>
<li>OK. ユーザーストーリーがシンプルなので、テストも書きやすそうです。（ただし、POと受け入れ条件は合意して億必要があります。）</li>
</ul>
</li>
</ul>
<p>このユーザーストーリーはINVESTを満たしていて、良いストーリーと言えるでしょう。</p>
<p>別の例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#12472;&#12525;&#12522;&#12450;&#12531;&#12399;&#12393;&#12398;&#24215;&#33303;&#12364;&#20170;&#21942;&#26989;&#20013;&#12394;&#12398;&#12363;&#30693;&#12426;&#12383;&#12356;&#12290;&#12394;&#12380;&#12394;&#12425;&#12289;&#24605;&#12356;&#31435;&#12387;&#12383;&#12381;&#12398;&#12479;&#12452;&#12511;&#12531;&#12464;&#12391;&#12521;&#12540;&#12513;&#12531;&#20108;&#37070;&#12408;&#34892;&#12365;&#12383;&#12356;&#12363;&#12425;&#12384;&#12290;</span><br></pre></td></tr></table></figure>
<p>また、このストーリーもINVESTを満たしていて良いストーリーといえるのでは無いでしょうか。</p>
<h1 id="Conclusion-2">Conclusion</h1><p>このようにINVESTを意識することで、ユーザーストーリーがより良くなります。</p>
<p>ユーザーストーリーワークショップなどを行う際には<br>INVESTを意識しながらストーリーを抽出してみたらいかがでしょうか。</p>
<h1 id="Appendix-1">Appendix</h1><h1 id="INVEST_something-1">INVEST something</h1><p>ということで、ユーザーストーリーを考える上でINVESTが重要な事はわかりました。<br>では、今回は少々趣向を変えて、ユーザーストーリーではなく、身近なものにINVESTが適用できるか考えてみました。</p>
<h2 id="jiro">jiro</h2><p>ラーメン二郎とは、</p>
<p>Guardian 2009 <a href="http://www.theguardian.com/lifeandstyle/2009/sep/13/best-foods-in-the-world" target="_blank" rel="external">The 50 best things to eat in the world, and where to eat them</a></p>
<p>で紹介され、</p>
<p><a href="http://mogumogunews.com/2015/04/topic_10702/" target="_blank" rel="external">http://mogumogunews.com/2015/04/topic_10702/</a></p>
<p>あの、<a href="https://twitter.com/elonmusk/status/508617476804866048" target="_blank" rel="external">イーロン・マスクも訪れた</a>ラーメン店です。</p>
<p><a href="http://japan.cnet.com/news/offtopic/35053480/" target="_blank" rel="external">http://japan.cnet.com/news/offtopic/35053480/</a></p>
<h2 id="Is_JIRO_INVEST?">Is JIRO INVEST?</h2><ul>
<li>I<ul>
<li>二郎はラーメンではなく、二郎という食べ物だと言われることもあるほど独自性が高く、一種独特の文化があると言えるでしょう。</li>
</ul>
</li>
<li>N<ul>
<li>二郎非常に柔軟な調整が可能です。代表的なものは 麺、野菜、背脂、にんにくの量や、味の濃さです。たとえば、野菜と背脂とにんにくをとても多くしたい場合は「野菜、アブラ、ニンニク マシマシ」と店主に伝えることにより、おそらくあなたの希望の結果が得られるでしょう。</li>
</ul>
</li>
<li>V<ul>
<li>二郎には圧倒的なオリジナリティがあります。これにまさる価値は無いでしょう。</li>
</ul>
</li>
<li>E<ul>
<li>何回か二郎に通うと、自分のコンディションに応じて何を増やして何を減らすかが見積もれる様になります。体調が悪くあまり食べられない場合は、食券を提示する際に、麺半分などと伝えればいいでしょう</li>
</ul>
</li>
<li>S<ul>
<li>二郎にもスモールサイズはありますが、これには注意が必要です。二郎のスモールサイズは、一般的な店舗の大盛りか、それ以上に値します。慣れるまではスモールサイズもしくは（もしあれば）ソレより小さいプチサイズにするのが良いでしょう。</li>
</ul>
</li>
<li>T<ul>
<li>二郎は総店舗数が40店舗弱（内休業中が2店舗？）であるため、カバレッジ100％を達成することも可能であるため、テスタブルと言えるでしょう。また、非常に量が多いため、自分に対する判断力を試されるため、自分自身に対するテストと考えることも出来ます。</li>
</ul>
</li>
</ul>
<p>そんな、非常に特徴的なラーメン二郎ですが、百聞は一見にしかずということわざもあるように、まずは体験してみるのはいかがでしょうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="INVEST">INVEST</h1><p>Have you ever heard the acronym “INVEST”?</p>
<p>The INVEST mnemonic was created by Bill Wake and it is introd]]>
    </summary>
    
      <category term="agile" scheme="http://yenjoji.github.io/pages/pages/tags/agile/"/>
    
      <category term="jiro" scheme="http://yenjoji.github.io/pages/pages/tags/jiro/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その3 HAリソースセットアップ編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/20/setup-stash-ha-resource/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/20/setup-stash-ha-resource/</id>
    <published>2015-09-20T03:00:00.000Z</published>
    <updated>2015-10-06T07:40:12.000Z</updated>
    <content type="html"><![CDATA[<p>今回も引き続きStashの高可用性(HA)クラスタを組むべく進めていきたいと思います。</p>
<p>前回 <a href="http://yenjoji.github.io/pages/2015/09/15/setup-stash-ha/">ATLASSIAN STASHの耐障害性を高めよう その２ HAセットアップ編</a>はHAクラスタをくんだものの、<br>IPアドレスの設定のみで終わってしまい、全くStashの可用性が高まらないまま終わってしまいました。</p>
<p>このままでは表題に偽りありと言われても反論出来ないので、今回こそは、Stashの可用性を高めていきたいと思います。</p>
<p>前回は、ノードが切り替わる際にIPアドレスが自動的にアクティブノードに付与されるように設定を行いました。<br>ただ、アクティブノードにIPアドレスが付与されるだけでは、Stashにアクセス出来ません。</p>
<p>というわけで今回は、ノードの切り替わり時に自動的にStashが起動する様にします。</p>
<h1 id="前提条件">前提条件</h1><ul>
<li>前回までの設定が終わっている</li>
<li>Stashが各ノードにインストール済み＆初期設定済み</li>
<li>Stashの自動起動がOFFになっている</li>
<li>StashのデータベースはStash以外のサーバーのものを使っている</li>
</ul>
<p>ここまでの設定が終わっている前提で進めていきます。<br>Stashはインストーラーを利用しても、tar.gzを利用しても問題ありません。</p>
<p>なお、今回のStashはインストーラーを利用してセットアップしました。</p>
<h1 id="リソース制御スクリプトの追加">リソース制御スクリプトの追加</h1><p>今回クラスタの制御に使用しているPacemakerは、一般的なクラスタリソースの制御スクリプトが最初から用意されています。<br>また、クラスタリソース制御スクリプトが用意されていない場合には、Pacemakerの指定する形式に沿った自作のスクリプトを所定のディレクトリに配置することにより、制御対象のクラスタリソースを追加することが出来ます。</p>
<p>Atlassian Stashも残念ながらPacemakerにスクリプトを用意されるほどにはメジャーになっていないようなので、自作のスクリプトを配置する必要があります。</p>
<p>このスクリプトを一から自作するとなかなか大変なのですが、Atlassian社がサンプルで用意しているリソース制御スクリプトがあるので、今回はそれを拝借します。</p>
<p>CentOS 7.1 + Pacemaker 1.1 の構成では /usr/lib/ocf/resource.d/ 以下に自作スクリプトを配置することによりクラスタリソースが追加されます。</p>
<p>ということで、<a href="https://bitbucket.org/atlassian/stash-ha-example/src/master/vagrant/scripts/heartbeat-stash?fileviewer=file-view-default" target="_blank" rel="external">このファイル</a>を各ノードの /usr/lib/ocf/resource.d/heartbeat に配置します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/ocf/resource.d/heartbeat&#10;curl -o stash https://bitbucket.org/atlassian/stash-ha-example/raw/1397712da2b11ab4894c91446009aacae94fcf3d/vagrant/scripts/heartbeat-stash&#10;chmod 755 /usr/lib/ocf/resource.d/heartbeat/stash</span><br></pre></td></tr></table></figure>
<p>リソースが定義されているかの確認をします。 pcs resource list コマンドの結果に ocf:heartbeat:stash が含まれていればOKです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs resource list&#10;--&#20013;&#30053;--&#10;ocf:heartbeat:slapd - Manages a Stand-alone LDAP Daemon (slapd) instance&#10;ocf:heartbeat:stash - Manages a Stash instance&#10;ocf:heartbeat:symlink - Manages a symbolic link&#10;ocf:heartbeat:tomcat - Manages a Tomcat servlet environment instance&#10;--&#20197;&#19979;&#30053;--</span><br></pre></td></tr></table></figure>
<h1 id="Stashリソースの定義">Stashリソースの定義</h1><p>リソースを定義する準備が整いましたので、クラスタにリソースを追加します。<br>下記コマンドを実行して、stashのリソースを定義します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource create stash_res ocf:heartbeat:stash params stash_user=atlstash stash_home=/var/atlassian/application-data/stash stash_inst=/opt/atlassian/stash/3.11.3 op monitor interval=15s op start timeout=240s</span><br></pre></td></tr></table></figure></p>
<p>次にstashが単一のノードでしか起動しないように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource meta stash_res migration-threshold=1</span><br></pre></td></tr></table></figure></p>
<p>最後に、stashのプロセスと、VIPが同時に同じノードで起動するように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs constraint colocation add stash_vip with stash_res INFINITY</span><br></pre></td></tr></table></figure></p>
<p>リソースを定義した後、クラスタの状態を確認しこのようにstash_vipとstash_resが同じノード上でStartedになっていればOKです。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 10:07:15 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure></p>
<h1 id="ノード切り替えの確認">ノード切り替えの確認</h1><p>それでは、設定が出来たのでノード障害時に自動的に切り替わるか確認したいと思います。</p>
<p>まず現状を確認します。<br>諸事情で、node02がアクティブになっています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 11:03:59 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/enabled&#10;  pacemaker: active/enabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>では、ここでnode02の電源をOFFします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Sun Sep 20 11:08:36 2015&#9;&#9;Last change: Sun Sep 20 09:32:39 2015 by root via cibadmin on node01&#10;Stack: corosync&#10;Current DC: node01 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 2 resources configured&#10;&#10;Online: [ node01 ]&#10;OFFLINE: [ node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10; stash_res&#9;(ocf::heartbeat:stash):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Offline&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>しばらく後にクラスタの状態を確認したところ無事にnode01に切り替わっていることが確認出来ました。</p>
<h1 id="さいごに">さいごに</h1><p>今回で、ようやくStashが切り替わる様になりました。これで可用性が高まって枕を高くして眠れるかと思いましたが、実はまだ設定が足りません。<br>なんと、Stashはハードディスク上にもデータを保存しているのです。</p>
<p>というわけで次回はディスクを冗長化して、こんどこそ真のStashの耐障害性向上を成し遂げたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回も引き続きStashの高可用性(HA)クラスタを組むべく進めていきたいと思います。</p>
<p>前回 <a href="http://yenjoji.github.io/pages/2015/09/15/setup-stash-ha/">ATLASSIAN STASH]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その2 HAセットアップ編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/15/setup-stash-ha/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/15/setup-stash-ha/</id>
    <published>2015-09-15T03:10:00.000Z</published>
    <updated>2015-09-27T15:38:35.000Z</updated>
    <content type="html"><![CDATA[<p>今回は <a href="http://yenjoji.github.io/pages/2015/09/08/stash-ha-101/">前回 「Atlassian Stashの耐障害性を高めよう その１ プランニング編」</a> の続きとして、<br>HAクラスタのセットアップを行いたいと思います。</p>
<p>手順は<a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Reference/" target="_blank" rel="external">redhat向けのHIGH AVAILABILITY ADD-ON リファレンス</a> を参考に行っていきます</p>
<h1 id="今回の構成">今回の構成</h1><p>今回は、LinuxのHAクラスタミドルウェアの定番であるPacemakerを使用してクラスタを構成します。</p>
<table>
<thead>
<tr>
<th>ソフトウェア</th>
<th>バージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS</td>
<td>7.1</td>
</tr>
<tr>
<td>Pacemaker</td>
<td>1.1.12</td>
</tr>
<tr>
<td>Corosync</td>
<td>2.3.4</td>
</tr>
<tr>
<td>pcs</td>
<td>0.9.137</td>
</tr>
</tbody>
</table>
<p>ノード設定<br>|ホスト名|IP|備考|<br>|—|—|—|<br>|node01|192,168.33.21|Stash node #1|<br>|node02|192,168.33.22|Stash node #2|<br>|stash|192,168.33.101|Stash VIP|</p>
<h1 id="事前準備">事前準備</h1><p>クラスタ構成の際にお互いのノード名を解決出来ないとイケないので、 /etc/hosts にホストを追加しておきます。</p>
<p>/etc/hosts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.33.21 node01&#10;192.168.33.22 node02</span><br></pre></td></tr></table></figure></p>
<p>次にクラスタの通信に使用するポートを開放します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=high-availability&#10;firewall-cmd --add-service=high-availability</span><br></pre></td></tr></table></figure></p>
<h1 id="ソフトウェアのインストール">ソフトウェアのインストール</h1><p>それでは、必要なソフトウェアをインストールしていきます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install pcs fence-agents-all</span><br></pre></td></tr></table></figure></p>
<p>コマンドを両方のノードで実行します。<br>これだけでHAクラスタに必要なソフト一式がインストールされます。</p>
<p>インストールが無事完了したら、クラスタの構成を行うコマンドのデーモンである pcsd を起動します。<br><br><br>また、再起動時に自動的に起動するように設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start pcsd&#10;systemctl enable pcsd</span><br></pre></td></tr></table></figure></p>
<h1 id="クラスタの構築">クラスタの構築</h1><p>次に、node01,node02をメンバーとして、HAクラスタを構築します。</p>
<h2 id="hacluster_ユーザーのパスワードを設定">hacluster ユーザーのパスワードを設定</h2><p>ここでは、マニュアルの推奨に従って、両ノードともに同じパスワードを設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd hacluster</span><br></pre></td></tr></table></figure></p>
<p>これも両ノードで実行します。</p>
<h2 id="クラスタノードの認証">クラスタノードの認証</h2><p>クラスタノード間の認証設定をします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster auth node01 node02 -u hacluster -p hacluster</span><br></pre></td></tr></table></figure></p>
<h2 id="クラスタの作成">クラスタの作成</h2><p>クラスタを作成します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster setup --start --name stash node01 node02</span><br></pre></td></tr></table></figure></p>
<h2 id="クラスタ状態の確認">クラスタ状態の確認</h2><p>作成したクラスタの状況を確認します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster status</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cluster Status:&#10; Last updated: Mon Sep 14 09:46:54 2015&#9;&#9;Last change: Mon Sep 14 09:42:40 2015 by hacluster via crmd on node02&#10; Stack: corosync&#10; Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10; 2 nodes and 0 resources configured&#10; Online: [ node01 node02 ]&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online</span><br></pre></td></tr></table></figure>
<p>両ノードがOnlineとなっていればOKです。</p>
<h2 id="STONITH_の無効化">STONITH の無効化</h2><p>ここで、/var/log/messages を確認すると。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sep 14 11:16:14 localhost pengine[4158]: error: Resource start-up disabled since no STONITH resources&#10;have been defined&#10;Sep 14 11:16:14 localhost pengine[4158]: error: Either configure some or disable STONITH with the ston&#10;ith-enabled option&#10;Sep 14 11:16:14 localhost pengine[4158]: error: NOTE: Clusters with shared data need STONITH to ensure&#10; data integrity</span><br></pre></td></tr></table></figure>
<p>といったエラーが発生しています。</p>
<p>この<a href="http://kan3aa.hatenablog.com/entry/2015/06/05/135150" target="_blank" rel="external">ページ</a>によると</p>
<p>STONITHと呼ばれるノードが不安定になった場合、自動的に再起動を行う機能を実現するためのリソースが無いためエラーとなってしまっているようです。<br><br>現時点ではSTONITHを使用しないため、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs property set stonith-enabled=false</span><br></pre></td></tr></table></figure></p>
<p>を実行し、機能を無効化します。</p>
<h1 id="リソースの作成">リソースの作成</h1><p>クラスタの設定が終わったところで、次にリソースを設定します。<br>クラスタでのリソースとは特にクラスタノード間で共有するリソースのことを指します。例えばアクティブノードが使用する仮想IPなどです。</p>
<p>今回は、ユーザーがアクセスする際に指定する、サービス用の仮想IPをリソースとして追加します。</p>
<p>どちらかのノードでコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs resource create stash_vip IPaddr2 ip=192.168.33.101 cidr_netmask=24 op monitor interval=6s</span><br></pre></td></tr></table></figure></p>
<p>これで、6秒ごとに死活確認を行うIPアドレスの共有リソースが設定されました。<br>アクティブノードに 192.168.33.101 のIPエイリアスが設定される様になります。</p>
<h1 id="ノード切り替えのテスト">ノード切り替えのテスト</h1><p>サービス用の仮想IPが割り当てられることが確認出来ました。</p>
<h2 id="アクティブノードの障害">アクティブノードの障害</h2><p>アクティブノードの障害時に正常に切り替わるか確認してみましょう。</p>
<p>Active : node01<br>Standby: node02</p>
<p>の状態で、node01の電源をOFFしてみます。</p>
<p>実施前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:14:31 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure></p>
<p>２ノードともオンラインで、stash_vip は node01に割り当てられています。</p>
<p>ここで node01 の電源をOFFにします</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:18:31 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node02 ]&#10;OFFLINE: [ node01 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Offline&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/enabled&#10;  pacemaker: active/enabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>正常に node02 にIPが切り替わりました。<br>この間pingを192.168.33.101宛に行っていましたが、途切れる事なくノードが切り替わりました。</p>
<h2 id="スタンバイノードの追加">スタンバイノードの追加</h2><p>では、次に稼働中のクラスタに、node01を追加します。</p>
<p>node01を起動し、node01でクラスタを起動します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster start</span><br></pre></td></tr></table></figure></p>
<p>正常に node01がクラスタに参加しました、ただアクティブノードはnode02のままです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:24:38 2015&#9;&#9;Last change: Mon Sep 14 11:51:35 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node02&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<h2 id="アクティブノードの手動切替">アクティブノードの手動切替</h2><p>最後に、アクティブノードを切り替えます。<br>片系ずつ切り替えながらメンテナンスする際に威力を発揮しそうです。</p>
<p>アクティブノードをスタンバイ状態にし、強制的にきりかえます。<br>アクティブノード上で下記のコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster standby</span><br></pre></td></tr></table></figure></p>
<p>正常にノードが切り替わり、node01がアクティブになりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:44:33 2015&#9;&#9;Last change: Mon Sep 14 12:44:24 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Node node02: standby&#10;Online: [ node01 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>ただ、このままですと node01に障害が発生した場合でもnode02に切り替わらないので、node02のスタンバイ状態を解除します。<br>スタンバイ状態のノードで以下のコマンドを実行します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs cluster unstandby</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs status&#10;Cluster name: stash&#10;Last updated: Mon Sep 14 12:46:29 2015&#9;&#9;Last change: Mon Sep 14 12:46:27 2015 by root via crm_attribute on node02&#10;Stack: corosync&#10;Current DC: node02 (version 1.1.13-a14efad) - partition with quorum&#10;2 nodes and 1 resource configured&#10;&#10;Online: [ node01 node02 ]&#10;&#10;Full list of resources:&#10;&#10; stash_vip&#9;(ocf::heartbeat:IPaddr2):&#9;Started node01&#10;&#10;PCSD Status:&#10;  node01: Online&#10;  node02: Online&#10;&#10;Daemon Status:&#10;  corosync: active/disabled&#10;  pacemaker: active/disabled&#10;  pcsd: active/enabled</span><br></pre></td></tr></table></figure>
<p>node02がアクティブになりました。</p>
<h1 id="今回はここまで">今回はここまで</h1><p>これでひと通りのクラスタ切り替えの動作の確認が出来ました。<br>しかしながら、IPの切り替えだけではStashの冗長化は出来ません。<br>次回は、ストレージの冗長化を設定しStashの冗長化を完成させたいと思います。</p>
<p>参考資料：<br><a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Reference/" target="_blank" rel="external">RED HAT ENTERPRISE LINUX 7 向け HIGH AVAILABILITY ADD-ON のリファレンスドキュメント</a><br>リファレンスなので、ひと通り情報は乗っているが、ステップバイステップで構築の手順となっていなく、コマンド例ももう一声ほしいところ。<br>総じて、読み解くのに読者の頑張りが必要なドキュメント。。。</p>
<p><a href="http://kan3aa.hatenablog.com/entry/2015/06/05/135150" target="_blank" rel="external">CentOS7.1でPacemaker+corosyncによるクラスタを構成する（Part.1）</a><br>CentOS7 + Pacemaker でのクラスタ構築からVIP設定までが非常に丁寧にステップバイステップで解説されています。<br>最終的には、このエントリもほぼ似たような感じになってしまいました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今回は <a href="http://yenjoji.github.io/pages/2015/09/08/stash-ha-101/">前回 「Atlassian Stashの耐障害性を高めよう その１ プランニング編」</a> の続きとして、<br>HAクラスタのセッ]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Stashの耐障害性を高めよう その1 プランニング編]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/08/stash-ha-101/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/08/stash-ha-101/</id>
    <published>2015-09-08T03:10:00.000Z</published>
    <updated>2015-09-19T13:08:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="はじめに">はじめに</h1><p>私の所属しているプロジェクトではAtlassian Stash （Git）でソースコードを管理しています。<br><br>普段何気なく使用しているGitですが、もはや手放すことが難しい存在です。</p>
<p>そんな中、ふと「もしもStashのデータが消失したら。」と言う事態を想像してみました。<br><br>Gitは分散バージョン管理なので、各々のローカルのGitリポジトリをかき集めれば必要なものは復旧できそうです。</p>
<p>どうやらソースコードの消失などの最悪の事態は発生しないことはわかりましたが、<br><br>Stashを使用していればサーバーの冗長構成は必要ないでしょうか。</p>
<p><a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">Atlassian</a>のドキュメントによると、Stashに障害が発生した場合、復旧作業をおこなっている間、下記の様な状況になります。</p>
<ul>
<li><p>できること</p>
<ul>
<li>開発者<ul>
<li>コードのコミット</li>
<li>ブランチの作成</li>
<li>ブランチの切り替え</li>
<li>過去のコミットと差分確認</li>
<li>…</li>
<li>Stashを経由せずに他の開発者のリポジトリからフェッチする</li>
</ul>
</li>
</ul>
</li>
<li><p>できないこと</p>
<ul>
<li>開発者<ul>
<li>リポジトリのクローン</li>
<li>セントラルリポジトリ（Stash）からのフェッチ</li>
<li>セントラルリポジトリ（Stash）へのプッシュ</li>
<li>Stash UI へのアクセス （プルリクエストの操作など）</li>
</ul>
</li>
<li>CI/CDサーバー<ul>
<li>リポジトリのクローン</li>
<li>変更点の取得</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>作業は続行不可能では無いですが、チーム開発を進めていく上でかなりの制限となってしまいそうです。</p>
<p>というわけで、転ばぬ先の杖ということでStashの冗長化に挑戦してみたいと思います。</p>
<p>Stash冗長化について調べてみたところ、本家Atlassianに<a href="https://confluence.atlassian.com/stash/high-availability-for-stash-437915322.html" target="_blank" rel="external">冗長化についてのドキュメント</a>が用意されていました。<br></p>
<h1 id="冗長構成のパターン">冗長構成のパターン</h1><p>Atlassianのドキュメントによると、冗長構成には以下の様なパターンがあるようです</p>
<table>
<thead>
<tr>
<th>構成</th>
<th>復旧時間</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Single node</td>
<td>hours-days</td>
<td>単一ノード</td>
</tr>
<tr>
<td>Cold Standby</td>
<td>2-10 min</td>
<td>サーバーはActive StandByともに起動させておくが、StashはActive側のみ起動しておく構成。Active側が障害となった場合StandBy側のStashを起動させ、切り替える。</td>
</tr>
<tr>
<td>Warm Standby</td>
<td>0-30 Sec</td>
<td>Active Standby 双方にStashを起動させておき、Active側が障害となった場合切り替える</td>
</tr>
<tr>
<td>Active-Active</td>
<td>&lt;5 Sec</td>
<td>マルチマスタ＆負荷分散構成 ただし Stash Data Center が必要</td>
</tr>
</tbody>
</table>
<p>この構成の内、Active-Active構成をするためには Stash Data Centerを使う必要があるらしく、<br>予算的に厳しい様な予感がするので今回は見送ることとします。</p>
<p>また、Warm StandBy 構成 はStashがメモリ上にロック情報などを持っているため、現時点でこの構成は取れないそうです。</p>
<p>そうすると、コストとメリットのバランスを考えた場合Cold Standby構成を取るのが良いようです。<br><br>（Atlassianのドキュメントもこの構成でクラスタを組んでいます。）</p>
<p>図で表すと、下記の様になります。おおむねAtlassianのドキュメント通りですが、データベースのみ、他のAtlassianプロダクトと共有することを考えて、Stashとは別のサーバーとしています。</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21266389192/in/dateposted-public/" title="atlassian_stash_cluster_network_diagram" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/710/21266389192_c7ff5dfa6d.jpg" width="407" height="500" alt="atlassian_stash_cluster_network_diagram"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>細かいソフトウェアのバージョンなどはもう少し調べてみてから決定していきたいと思います。</p>
<p>というわけで、だいたいの構成の目処がついたところで、今回はここまでとしたいと思います。</p>
<p>次回は実際のクラスターの構築を行ってみたいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="はじめに">はじめに</h1><p>私の所属しているプロジェクトではAtlassian Stash （Git）でソースコードを管理しています。<br><br>普段何気なく使用しているGitですが、もはや手放すことが難しい存在です。</p>
<p>そんな中、ふと「も]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Pacemaker" scheme="http://yenjoji.github.io/pages/pages/tags/Pacemaker/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian製品のアドバンテージ「Application Link」]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/09/05/about-application-link/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/09/05/about-application-link/</id>
    <published>2015-09-05T03:00:00.000Z</published>
    <updated>2015-09-27T15:31:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Application_Linkとは">Application Linkとは</h1><p>アプリケーションリンクとは、Atlassian製品にデフォルトで含まれている、Jira, Confluence, Stash, FishEye, Crucible, Bambooの各製品を相互に連携させるための機能です。<br>アプリケーションリンクを設定すると、リンクさせた製品同士が相互に情報をやりとりしたり、お互いの機能を利用することが出来ます。<br>例えば、JiraとConfluenceをリンクさせた場合、JiraのチケットをConfluenceのマクロを利用してリンクさせたり、<br>Confluenceで任意の文字列を選択した状態で右クリックからJiraのチケットを作成するなど、お互いの利便性を向上させることが出来る機能です。</p>
<p>Atlassian以外の製品でも、CIツールと、リポジトリ管理ツールの連携や、課題管理ツールとCIツールの連携などが用意されている場合もありますが、<br>違うプロダクトを連携させる場合とくらべてAtlassianのアプリケーションリンクはより密接な連携ができるというメリットがあります。<br>また、設定も簡単にできるため、「サクッと連携できると思っていたけのに意外とハマった。」ということが起こらない点もメリットといえると思います。</p>
<h1 id="Bamboo_+_Stash_をリンクすると">Bamboo + Stash をリンクすると</h1><p>では、具体的にはどうなるのでしょうか。<br><a href="https://confluence.atlassian.com/bamboo/integrating-bamboo-with-atlassian-applications-289276942.html" target="_blank" rel="external">Bambooの公式ドキュメント</a> によると、<br>リンクをすることにより以下のことができるようになります。</p>
<ol>
<li>Stashのリポジトリに新しいコードがpushされると自動的にビルドを実行させることが出来ます。（Stash以外のリポジトリの場合はBambooが定期的に更新を確認する必要があります）</li>
<li>Stashの指定したリポジトリに新しいブランチが作成された場合、Bambooが自動的にそれを検知し、ブランチのビルドプランを作成します。<br>また、ブランチが削除された場合はBamboo上のブランチに対するビルドプランを自動的に削除することも可能です。</li>
<li>Bambooのビルド結果から、そのビルドに含まれているコミットの変更差分確認画面へダイレクトにジャンプ出来ます。</li>
<li>Bambooのビルドに含まれているStashのコミットのリストをBambooのビルド結果から確認出来ます。</li>
<li>コミットやプルリクエストに対するビルド結果をStash側で確認することが出来ます。</li>
</ol>
<h2 id="ブランチの自動作成">ブランチの自動作成</h2><p>アプリケーションリンクの機能は業務でも使用していますが、今回はその中でも便利だと感じているブランチの自動作成機能を紹介します。</p>
<ul>
<li>Bambooのビルドプラン設定からブランチの自動作成設定が出来ます、すべてのブランチを作成することもできますし、正規表現にマッチするブランチだけを自動作成することも出来ます。<br>GitFlowで開発している場合に、featureブランチのみ自動作成するという設定も可能です。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21758626085/in/dateposted-public/" title="20150904_0936_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/649/21758626085_e53647b3c9.jpg" width="500" height="360" alt="20150904_0936_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Stashで（もしくはGitコマンド経由で）ブランチを作成すると。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21571764779/in/dateposted-public/" title="20150904_0939_ブランチの作成_-_Stash_01" target="_blank" rel="external"><img src="https://farm6.staticflickr.com/5717/21571764779_daed59fe99.jpg" width="500" height="359" alt="20150904_0939_ブランチの作成_-_Stash_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Bambooが自動的にブランチをビルドプランに追加してくれます。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21746980562/in/dateposted-public/" title="20150904_0948_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/648/21746980562_c50df04b23.jpg" width="500" height="360" alt="20150904_0948_myproject_-_myplan__Edit_plan_configuration_-_Atlassian_Bamboo_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>ビルド対象のリポジトリが少ないうちは、Bambooの管理画面から手動でブランチを追加する作業も苦になりませんが、<br>リポジトリが増えてくるに連れて徐々に便利さが実感できるようになってきます。</p>
<h1 id="その他の製品のApplication_Linkについて">その他の製品のApplication Linkについて</h1><p>さて、こんなに便利なApplicationLinkですが、今回例に上げたBambooとStashの組み合わせ以外にも様々な組み合わせが存在します。<br>ApplicationLinkを設定することでどんなメリットがあるかは下記リンク先のドキュメントをご参照ください。</p>
<p>Stash<br><a href="https://confluence.atlassian.com/stash/integrating-stash-with-atlassian-applications-414812190.html" target="_blank" rel="external">https://confluence.atlassian.com/stash/integrating-stash-with-atlassian-applications-414812190.html</a></p>
<p>Jira+Confluence<br><a href="https://confluence.atlassian.com/doc/use-jira-and-confluence-together-427623543.html" target="_blank" rel="external">https://confluence.atlassian.com/doc/use-jira-and-confluence-together-427623543.html</a></p>
<p>Bamboo+Confluence<br><a href="https://confluence.atlassian.com/bamboo/integrating-bamboo-with-confluence-289276944.html" target="_blank" rel="external">https://confluence.atlassian.com/bamboo/integrating-bamboo-with-confluence-289276944.html</a></p>
<p>RedmineなどのAtlassian製品以外のツールでも、CIサーバーや、リポジトリ管理ツールなどとの連携は可能ですが、<br>簡単で設定でハマりにくいという点でAtlassian製品ツールが完結させられるというメリットは大きいです。</p>
<p>もし、Atlassian製品をお使いなら、非常に便利ですので、是非アプリケーションリンクを活用してみてください。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Application_Linkとは">Application Linkとは</h1><p>アプリケーションリンクとは、Atlassian製品にデフォルトで含まれている、Jira, Confluence, Stash, FishEye, Crucible, Bam]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="Stash" scheme="http://yenjoji.github.io/pages/pages/tags/Stash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Bamboo + Crowd 後編：Crowdとの連携]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/08/12/integrated-crowd-with-bamboo/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/08/12/integrated-crowd-with-bamboo/</id>
    <published>2015-08-12T03:00:00.000Z</published>
    <updated>2015-09-27T15:35:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="BambooとCrowdの連携">BambooとCrowdの連携</h1><p>今回は前回の続きとして、BambooとCrowdを連携させて、<br>ユーザーをCrowdで一元管理できるようにしたいと思います。</p>
<p>前回同様、基本的には<a href="https://confluence.atlassian.com/display/CROWD/Integrating+Crowd+with+Atlassian+Bamboo" target="_blank" rel="external">公式の手順</a> に沿ってすすめていきます。</p>
<p>全体的な流れは</p>
<ol>
<li>Crowdにユーザーとグループ、Bambooとの連携設定を行う</li>
<li>Bamboo側でCrowdへの接続設定を行う</li>
<li>Bambooのユーザー認証をCrowdに切り替える</li>
</ol>
<p>です。</p>
<h1 id="Crowd設定">Crowd設定</h1><p>まずはCrowd側にBamboo用のユーザーの作成と、連携のための設定を行います。</p>
<p>Crowdに以下のユーザーを作成してBambooと連携します。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Group</th>
<th>Bambooのロール</th>
</tr>
</thead>
<tbody>
<tr>
<td>bamboo</td>
<td>bamboo-admin</td>
<td>管理者</td>
</tr>
<tr>
<td>bamboo-user</td>
<td>bamboo-user</td>
<td>一般ユーザー</td>
</tr>
</tbody>
</table>
<h2 id="ユーザーの追加">ユーザーの追加</h2><p>Bamboo用にユーザーを追加します。</p>
<ul>
<li>Top画面から「Users」タブをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857718703/in/dateposted-public/" title="0810_1111_Atlassian_Crowd_-_Administration_console" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/348/19857718703_95f9644a40.jpg" width="500" height="344" alt="0810_1111_Atlassian_Crowd_-_Administration_console"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Add User」リンクをクリックし、ユーザー登録画面にて必要な情報を入力し「Create」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20484923911/in/dateposted-public/" title="0810_1118_Atlassian_Crowd_-_Users" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/398/20484923911_e250a52b18.jpg" width="500" height="344" alt="0810_1118_Atlassian_Crowd_-_Users"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザーも追加します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290542940/in/dateposted-public/" title="0810_1511_Atlassian_Crowd_-_Add_user" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/403/20290542940_11d5c7b99d.jpg" width="500" height="344" alt="0810_1511_Atlassian_Crowd_-_Add_user"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="グループの作成">グループの作成</h2><p>Bambooでユーザーのロール制御を行うため、ロールに対応したグループを作成します。</p>
<ul>
<li>「Groups」をクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20469901562/in/dateposted-public/" title="0810_1512_Atlassian_Crowd_-_Groups" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/304/20469901562_baf6196f36.jpg" width="500" height="344" alt="0810_1512_Atlassian_Crowd_-_Groups"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Add Group」リンクをクリックし、グループ登録画面にて必要な情報を入力し「Create」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20478653185/in/dateposted-public/" title="0810_1513_Atlassian_Crowd_-_Add_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/561/20478653185_ded6662813.jpg" width="500" height="344" alt="0810_1513_Atlassian_Crowd_-_Add_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザー用グループも作成します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20291988679/in/dateposted-public/" title="0810_1514_Atlassian_Crowd_-_Add_group" target="_blank" rel="external"><img src="https://farm4.staticflickr.com/3731/20291988679_7901418bdd.jpg" width="500" height="344" alt="0810_1514_Atlassian_Crowd_-_Add_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="グループへユーザーを登録">グループへユーザーを登録</h2><p>作成したグループへユーザーを登録します。<br>管理者にしたいユーザーは bamboo-admin グループへ。<br>一般ユーザーにしたいユーザーは bamboo-user グループへ登録します。</p>
<ul>
<li>「Groups」をクリック、「bamboo-admin」リンクをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19855985444/in/dateposted-public/" title="0810_1943_Atlassian_Crowd_-_Groups" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/481/19855985444_abe141bf77.jpg" width="500" height="344" alt="0810_1943_Atlassian_Crowd_-_Groups"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Direct members」タブをクリックし「Add Users」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857716853/in/dateposted-public/" title="0810_1944_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/284/19857716853_931929b751.jpg" width="500" height="344" alt="0810_1944_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>「Search」ボタンをクリックすると、ユーザーが表示されるので、管理者にしたいユーザーにチェックをし、「Add Selected Users」ボタンをクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290607838/in/dateposted-public/" title="0810_1945_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/340/20290607838_576329772c.jpg" width="500" height="344" alt="0810_1945_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>同様に一般ユーザーも一般ユーザー用のグループへ登録します</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857716413/in/dateposted-public/" title="0810_1949_Atlassian_Crowd_-_View_group" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/325/19857716413_3b98a7619f.jpg" width="500" height="344" alt="0810_1949_Atlassian_Crowd_-_View_group"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h2 id="アプリケーションの作成">アプリケーションの作成</h2><p>Crowdで作成したユーザーとBambooを関連付けるため、アプリケーションを登録します。</p>
<ul>
<li>「Application」-&gt; Add application」をクリック</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290542470/in/dateposted-public/" title="0810_1659_Atlassian_Crowd_-_Applications" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/442/20290542470_d6fabcea94.jpg" width="500" height="344" alt="0810_1659_Atlassian_Crowd_-_Applications"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>必要な情報を入力し「Next」をクリック</li>
</ul>
<table>
<thead>
<tr>
<th>項目</th>
<th>設定値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Apprication type</td>
<td>Bamboo</td>
</tr>
<tr>
<td>Name</td>
<td>Bamboo</td>
</tr>
<tr>
<td>Password</td>
<td>任意のパスワード</td>
</tr>
</tbody>
</table>
<p>ここで設定するパスワードはBambooとCrowdが連携する際の認証に使用します</p>
<ul>
<li>BambooとCrowdの通信設定を入力し「Next」をクリック<br>URLにユーザーがアクセスするURLを、Remote IP AddressにBambooサーバーとCrowdサーバーが通信する際のBambooサーバーのIPアドレスを設定します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20484923151/in/dateposted-public/" title="0810_1702_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/262/20484923151_130eb04853.jpg" width="500" height="344" alt="0810_1702_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>ユーザーディレクトリの選択<br>Bambooの認証で使用するユーザーが存在する、ユーザーディレクトリを選択します。<br>今回では、先ほどの手順でユーザーを作成した際に指定したディレクトリを選択します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19857717813/in/dateposted-public/" title="0810_1703_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm4.staticflickr.com/3744/19857717813_8e426830fd.jpg" width="500" height="344" alt="0810_1703_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>グループの選択<br>Bambooで認証に使用するグループを追加します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20452412876/in/dateposted-public/" title="0810_1708_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/309/20452412876_487acf451f.jpg" width="500" height="344" alt="0810_1708_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>登録内容の確認<br>登録内容を確認し登録します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290608388/in/dateposted-public/" title="0810_1709_Atlassian_Crowd_-_Add_application" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/339/20290608388_26006ce9f9.jpg" width="500" height="344" alt="0810_1709_Atlassian_Crowd_-_Add_application"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h1 id="Bamboo_の設定">Bamboo の設定</h1><h2 id="Crowdとの通信設定">Crowdとの通信設定</h2><ul>
<li>crowd.properties の編集<br>{BAMBOO_ROOT:/opt/atlassian/bamboo}/atlassian-bamboo/WEB-INF/classes/crowd.properties を編集します。</li>
</ul>
<p>マニュアルには以下の４点を変更せよと書いてありますが、session.validationintervalはデフォルトの２分で問題ないためそのままにします。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>application.name</td>
<td>bamboo</td>
</tr>
<tr>
<td>application.password</td>
<td>{CrowdのApplication設定で設定したパスワード}</td>
</tr>
<tr>
<td>crowd.server.url</td>
<td><a href="http://127.0.0.1:8095/crowd/services/" target="_blank" rel="external">http://127.0.0.1:8095/crowd/services/</a></td>
</tr>
<tr>
<td>session.validationinterval</td>
<td>2</td>
</tr>
</tbody>
</table>
<ul>
<li>Bambooの認証システムのCrowdへの切り替え<ul>
<li>atlassian-user.xml の編集<br>{BAMBOO_ROOT:/opt/atlassian/bamboo}/atlassian-bamboo/WEB-INF/classes/atlassian-user.xml を編集します。</li>
</ul>
</li>
</ul>
<p>Crowd用の設定がコメントアウトされているので、コメントを外します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!--&#60;crowd key=&#34;crowd&#34; name=&#34;Crowd Repository&#34;/&#62;--&#62;&#10;&#8595;&#10;&#60;crowd key=&#34;crowd&#34; name=&#34;Crowd Repository&#34;/&#62;</span><br></pre></td></tr></table></figure>
<h2 id="ユーザーディレクトリの設定">ユーザーディレクトリの設定</h2><ul>
<li>Bambooに管理者でログインし 「右上の歯車マーク &gt; Overview」をクリック</li>
<li><p>「Bamboo administration」画面が表示されるので 「Security」グループの「User repositories」をクリック</p>
</li>
<li><p>Server URL, Application Nameを確認、 Application PasswordにCrowdに設定したパスワードを入力します。</p>
</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/20290541630/in/dateposted-public/" title="0810_1934_User_repositories_-_Atlassian_Bamboo" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/480/20290541630_fdb19ac328.jpg" width="500" height="344" alt="0810_1934_User_repositories_-_Atlassian_Bamboo"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>これでめでたくBambooの認証をCrowdに統合することが出来ました。</p>
<p>連携しているサービスがBambooだけですとそれほどメリットが感じられないかも知れませんが、 ここで上げたBamboo以外、Jira、Confluence、StashなどのAtlassianの製品を導入していくにつれてユーザー管理コストの軽減効果が実感できるものと考えております。</p>
<p>また、ユーザーの追加・削除漏れなどのセキュリティリスクの軽減にもつながりますので、Atlassian製品導入の際には合わせてCrowdの導入もご検討ください。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="BambooとCrowdの連携">BambooとCrowdの連携</h1><p>今回は前回の続きとして、BambooとCrowdを連携させて、<br>ユーザーをCrowdで一元管理できるようにしたいと思います。</p>
<p>前回同様、基本的には<a href="]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="CI" scheme="http://yenjoji.github.io/pages/pages/tags/CI/"/>
    
      <category term="Crowd" scheme="http://yenjoji.github.io/pages/pages/tags/Crowd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atlassian Bamboo + Crowd 前編：Bambooの導入]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/08/04/installing-atlassian-bamboo/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/08/04/installing-atlassian-bamboo/</id>
    <published>2015-08-04T03:00:00.000Z</published>
    <updated>2015-09-27T15:34:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Bambooとは">Bambooとは</h1><p>Atlassian社製のCI（継続的インテグレーション）/CD（継続的デリバリー）を実現するソフトウェアであり、同様のソフトウェアにはJenkinsやCircleCI、TravisCIなどが存在します。</p>
<p>今回は、そんなBambooをセットアップし、ユーザー管理を以前紹介したCrowdに統合する方法をご紹介したいと思います。</p>
<p>これにより、システム管理者、運用者の負荷を軽減してくれるBamboo。それ自体の管理負荷を下げて、より生産的で楽しいことに注力できるようにしたいと思います。</p>
<p>今回は、前編として、Bambooのインストール方法をご紹介させて頂きます。</p>
<h1 id="Bamboo_の_インストール">Bamboo の インストール</h1><p>基本的には公式手順にのとって進めていきます。</p>
<h2 id="前提条件">前提条件</h2><h3 id="システム環境">システム環境</h3><ul>
<li>OS   : CentOS 7.0</li>
<li>Java : Oracle JDK 8u51</li>
<li>DB   : 5.5.40-MariaDB</li>
</ul>
<h3 id="Bamboo配置先">Bamboo配置先</h3><ul>
<li>インストール先 : /opt/atlassian/bamboo</li>
<li>データディレクトリ : /var/atlassian/application-data/bamboo</li>
</ul>
<h2 id="インストール">インストール</h2><h3 id="最新版のダウンロード">最新版のダウンロード</h3><ul>
<li>公式サイトより最新版をダウンロードします。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-5.9.3.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="展開と配置">展開と配置</h3><p>ダウンロードしたBambooのアーカイブを展開し、配置します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf atlassian-bamboo-5.9.3.tar.gz&#10;mv atlassian-bamboo-5.9.3 /opt/atlassian/&#10;ln -s /opt/atlassian/atlassian-bamboo-5.9.3 /opt/atlassian/bamboo</span><br></pre></td></tr></table></figure>
<h3 id="bambooの初期設定">bambooの初期設定</h3><ul>
<li>Bambooデータパスの設定</li>
</ul>
<p>マニュアルに記載のある通り<br>/opt/atlassian/bamboo/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties<br>を以下の様に修正します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bamboo.home=/var/atlassian/application-data/bamboo</span><br></pre></td></tr></table></figure>
<ul>
<li>Bambooメモリ設定の変更<br>/opt/atlassian/bamboo/bin/setenv.sh のメモリ設定を任意の値に変更します。<br>最大1GB程度にしておけばひとまず問題ないと思われます。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM_MINIMUM_MEMORY=&#34;512m&#34;&#10;JVM_MAXIMUM_MEMORY=&#34;1024m&#34;</span><br></pre></td></tr></table></figure>
<h3 id="データベースの準備">データベースの準備</h3><p>次にデータ保存先であるデータベースを準備します。<br>今回はBambooのデータ保存先としてcrowdインストール編で用意したMySQL(MariaDB)を使用します。</p>
<ul>
<li>データベースの作成</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> bamboo <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_bin;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ユーザーを作成し権限を付与</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> bamboo.* <span class="keyword">TO</span> <span class="string">'bamboouser'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'bamboopass'</span>;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>DBドライバの配置</li>
</ul>
<p>Mysqlのドライバを予めBamboo配下に配置しておきます。</p>
<p>/opt/atlassian/bamboo/lib</p>
<p>以下に ドライバのjarファイルを配置しておきます。</p>
<h3 id="起動">起動</h3><p>ひとまず起動します</p>
<h2 id="初期設定">初期設定</h2><p><a href="http://{bambooインストールIP}:8085/" target="_blank" rel="external">http://{bambooインストールIP}:8085/</a> にアクセスすると、<br>初期設定画面が表示されるので、画面に従って初期設定を行います。</p>
<ul>
<li>ライセンスキーの入力<br>事前に用意してあればそのライセンスキーを入力します。<br>評価用であればAtlassian公式サイトよりトライアルキーが取得出来ますので、それを入力します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520972128/in/dateposted-public/" title="Bamboo_setup_wizard_-_Atlassian_Bamboo_1006" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/675/21520972128_3400b65db1.jpg" width="500" height="335" alt="Bamboo_setup_wizard_-_Atlassian_Bamboo_1006"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>Bambooディレクトリ設定<br>通常であれば変更の必要がないため、そのままContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21708803895/in/dateposted-public/" title="General_configuration_-_Atlassian_Bamboo_1008" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/632/21708803895_6e621099ac.jpg" width="500" height="335" alt="General_configuration_-_Atlassian_Bamboo_1008"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データベースの選択<br>Bambooのデータを保存するデータベースを選択します。<br>今回はMySQLに保存するため、MySQLを選択しContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21086099034/in/dateposted-public/" title="Choose_a_database_configuration_-_Atlassian_Bamboo_1443" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/670/21086099034_5a003519a7.jpg" width="500" height="328" alt="Choose_a_database_configuration_-_Atlassian_Bamboo_1443"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データベース接続パラメータの設定<br>データベースの準備で作成したデータベースへの接続パラメータを入力しContinueします。<br>Continueを押すと、データベースの初期設定が始まります。<br>しばらく時間がかかるので、根気よく待ちましょう。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21521013788/in/dateposted-public/" title="Choose_how_you_wish_Bamboo_to_connect_to_your_database_-_Atlassian_Bamboo_1449" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/579/21521013788_2813a91496.jpg" width="500" height="335" alt="Choose_how_you_wish_Bamboo_to_connect_to_your_database_-_Atlassian_Bamboo_1449"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>データ移行<br>今回は新規インストールですので、「Createa new Bamboo home」を選択しContinueします。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520969818/in/dateposted-public/" title="Select_starting_data_for_Bamboo_-_Atlassian_Bamboo_1537" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/658/21520969818_909f6fe436.jpg" width="500" height="334" alt="Select_starting_data_for_Bamboo_-_Atlassian_Bamboo_1537"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>管理ユーザーの作成<br>任意のIDとパスワードで管理ユーザーを作成します。</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/21520969468/in/dateposted-public/" title="Set_up_administrator_user_-_Atlassian_Bamboo_1538" target="_blank" rel="external"><img src="https://farm1.staticflickr.com/779/21520969468_47458f8415.jpg" width="500" height="327" alt="Set_up_administrator_user_-_Atlassian_Bamboo_1538"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>以上で、Bambooのインストールは完了です。<br>次回は、以前インストールしたCrowdとBambooを連携させて、ユーザー管理をCrowdに統合したいと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Bambooとは">Bambooとは</h1><p>Atlassian社製のCI（継続的インテグレーション）/CD（継続的デリバリー）を実現するソフトウェアであり、同様のソフトウェアにはJenkinsやCircleCI、TravisCIなどが存在します。</p>
]]>
    </summary>
    
      <category term="Atlassian" scheme="http://yenjoji.github.io/pages/pages/tags/Atlassian/"/>
    
      <category term="Bamboo" scheme="http://yenjoji.github.io/pages/pages/tags/Bamboo/"/>
    
      <category term="CI" scheme="http://yenjoji.github.io/pages/pages/tags/CI/"/>
    
      <category term="Crowd" scheme="http://yenjoji.github.io/pages/pages/tags/Crowd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Play! Scalaを Macで始める]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/07/23/getting-start-play-with-idea/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/07/23/getting-start-play-with-idea/</id>
    <published>2015-07-23T12:23:11.000Z</published>
    <updated>2015-08-11T07:09:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Play!_Scalaを_Macで始める">Play! Scalaを Macで始める</h1><p>久しぶりにPlay!に触ったら昔とだいぶ違ったのでメモ。</p>
<h1 id="今回の目標">今回の目標</h1><ol>
<li>Play!をインストール</li>
<li>プロジェクトのスケルトンを作成</li>
<li>IntellijIDEAで開発スタートする準備をする<br>ところまでが目標。</li>
</ol>
<h1 id="Play!のインストール">Play!のインストール</h1><p>しばらくぶりにPlay!にさわろうと思ったら、playコマンドがなくなっていて、今はtypesafe-activatorにその役目を譲っているらしいので、typesafe-activatorをインストールします。<br>typesafe-activatorとその開発元のTypesafe社は <a href="http://osdn.jp/magazine/13/08/15/150000" target="_blank" rel="external">http://osdn.jp/magazine/13/08/15/150000</a> <a href="http://osdn.jp/magazine/11/05/13/0340257" target="_blank" rel="external">http://osdn.jp/magazine/11/05/13/0340257</a> この辺りをご参照ください。<br>(私の所属している会社も最近パートナーの末席に仲間入りしました。 <a href="https://www.typesafe.com/partners/systemintegrator-partners#community" target="_blank" rel="external">https://www.typesafe.com/partners/systemintegrator-partners#community</a> )</p>
<p>typesafe-activatorはhomebrewでインストールできるので、おもむろにbrewコマンドでインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install typesafe-activator                                                                                                                          *[feature/merge]&#10;==&#62; Downloading https://homebrew.bintray.com/bottles/typesafe-activator-1.3.3.mavericks.bottle.tar.gz&#10;######################################################################## 100.0%&#10;==&#62; Pouring typesafe-activator-1.3.3.mavericks.bottle.tar.gz&#10;&#127866;  /usr/local/Cellar/typesafe-activator/1.3.3: 4 files, 1.2M</span><br></pre></td></tr></table></figure>
<h1 id="プロジェクトのスケルトンを作成">プロジェクトのスケルトンを作成</h1><h2 id="プロジェクトの作成">プロジェクトの作成</h2><p>playコマンドの代わりにactivatorコマンドを使用してスケルトンを作成します。<br>いくつか質問されるので順次答えます。</p>
<ol>
<li>テンプレートは 6 の play-scala</li>
<li>アプリケーション名は任意のものを指定</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ activator new&#10;&#10;Fetching the latest list of templates...&#10;&#10;Browse the list of templates: http://typesafe.com/activator/templates&#10;Choose from these featured templates or enter a template name:&#10;  1) minimal-akka-java-seed&#10;  2) minimal-akka-scala-seed&#10;  3) minimal-java&#10;  4) minimal-scala&#10;  5) play-java&#10;  6) play-scala&#10;(hit tab to see a list of all templates)&#10;&#62; 6&#10;Enter a name for your application (just press enter for &#39;play-scala&#39;)&#10;&#62; your-project-name&#10;OK, application &#34;your-project-name&#34; is being created using the &#34;play-scala&#34; template.&#10;&#10;To run &#34;your-project-name&#34; from the command line, &#34;cd your-project-name&#34; then:&#10;/Users/enjoji/projects/your-project-name/activator run&#10;&#10;To run the test for &#34;your-project-name&#34; from the command line, &#34;cd your-project-name&#34; then:&#10;/Users/enjoji/projects/your-project-name/activator test&#10;&#10;To run the Activator UI for &#34;your-project-name&#34; from the command line, &#34;cd your-project-name&#34; then:&#10;/Users/enjoji/projects/your-project-name/activator ui</span><br></pre></td></tr></table></figure>
<h2 id="動作確認">動作確認</h2><p>プロジェクトが出来たので試しに起動してみます。<br>プロジェクトのディレクトリに移動し、 activator run を実行しエラーなく起動すればOKです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ activator run&#10;Getting org.scala-sbt sbt 0.13.8 ...&#10;downloading https://repo1.maven.org/maven2/org/scala-lang/scala-compiler/2.10.4/scala-compiler-2.10.4.jar</span><br></pre></td></tr></table></figure>
<p>どうやらJava8じゃないと起動しない模様</p>
<h2 id="IntelliJで使う">IntelliJで使う</h2><h3 id="Intellij_Install">Intellij Install</h3><ul>
<li><p>まずは IntalliJ IDEA をインストールします。</p>
</li>
<li><p>次に必要なプラグインをインストールします</p>
<ul>
<li>Plugin<ul>
<li>SBT</li>
<li>Scala<br>プラグインをインストール</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ソースのインポート">ソースのインポート</h3><p>ソースコードをIDEAプロジェクトとしてインポートします。</p>
<ol>
<li>メニューを File&gt;New&gt;Project from Existing Source とたどります。</li>
<li>ソースルートを選択</li>
<li>Import project from external model</li>
<li>SBTを選択</li>
<li>Project SDK に Java8 を選択し Finish</li>
</ol>
<p>以上で、Play＋ScalaのスケルトンプロジェクトができてIDEAでの開発準備が整いました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Play!_Scalaを_Macで始める">Play! Scalaを Macで始める</h1><p>久しぶりにPlay!に触ったら昔とだいぶ違ったのでメモ。</p>
<h1 id="今回の目標">今回の目標</h1><ol>
<li>Play!をインストール</l]]>
    </summary>
    
      <category term="IntellijIDEA" scheme="http://yenjoji.github.io/pages/pages/tags/IntellijIDEA/"/>
    
      <category term="Play" scheme="http://yenjoji.github.io/pages/pages/tags/Play/"/>
    
      <category term="Scala" scheme="http://yenjoji.github.io/pages/pages/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mackerel + Raspberry Pi で 職場環境をモニタリング]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/07/14/mackerel-raspi-temp/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/07/14/mackerel-raspi-temp/</id>
    <published>2015-07-14T12:49:44.000Z</published>
    <updated>2015-08-11T06:02:36.000Z</updated>
    <content type="html"><![CDATA[<p>Mackerel + Raspberry Pi で 職場環境をモニタリング</p>
<p>皆さんMackerelをご存知ですか？</p>
<p><a href="https://mackerel.io" target="_blank" rel="external">Mackerel</a> とは はてな社が提供しているサーバー監視のサービスで、<br>サーバーにエージェントと言われるモジュールを設置するだけで、サーバーの状況がブラウザからグラフィカルに確認できるサービスです。</p>
<p>また、監視ルールを設定しておくことにより、サーバーが特定の状態（CPU使用率90%以上など）になった場合アラートを通知したり<br>無料プランでも一部制限はありますが、サーバー5台まで監視可能など、お手軽、便利、太っ腹なサービスです。</p>
<p>今回は、そんな本来はサーバー監視のサービスであるMackerelを本来の用途以外に使ってみようと思います。</p>
<h1 id="突然ですが、夏ですね">突然ですが、夏ですね</h1><p>だんだん気候も夏めいて来た今日このごろ、やはり気になるのはオフィスの環境。<br>健康を害するような環境で仕事をしないためにも、暑さで仕事の効率が落ちないためにも職場環境には気を使いたいところです。</p>
<p>というわけで、今回は職場（でなくてもいいですが）の温度と湿度を計測したいと思います。</p>
<h1 id="温度・湿度を測定する">温度・湿度を測定する</h1><p>では、実際に監視システムを構築していきたいと思います。</p>
<h2 id="今回使うもの">今回使うもの</h2><ul>
<li>Raspberry pi 2 Type B</li>
<li>温湿度センサー<ul>
<li>今回はAM2320 <a href="http://akizukidenshi.com/catalog/g/gM-08663/" target="_blank" rel="external">http://akizukidenshi.com/catalog/g/gM-08663/</a> を使用しました。</li>
</ul>
</li>
<li>Raspberry pi と 温度センサー接続用のブレッドボードやジャンパ線<ul>
<li>温度センサーとRaspberry Pi をつなぐための線を必要な分用意します。</li>
</ul>
</li>
<li>以前に使用したズゴック（オプション）</li>
</ul>
<h2 id="ハードウェアの準備">ハードウェアの準備</h2><h3 id="Raspberry_Pi_と_AM2320_を接続する">Raspberry Pi と AM2320 を接続する</h3><p>この実体配線図のようにAM2320をRaspberry Pi と接続します。<br>AM2320は型番のシルク印刷を表に見た場合、<br>左から</p>
<ul>
<li>VDD &lt;-&gt; Pin #2 5V</li>
<li>SDA &lt;-&gt; Pin #3 SDA</li>
<li>GND &lt;-&gt; Pin #20 等 GND</li>
<li>SCL &lt;-&gt; Pin #5 SCL<br>と接続します。</li>
</ul>
<p><a href="https://www.flickr.com/photos/130999506@N07/17211140511" title="raspi_am2320 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7695/17211140511_d168850efd_z.jpg" width="640" height="479" alt="raspi_am2320"></a></p>
<h2 id="ソフトウエアの準備">ソフトウエアの準備</h2><h3 id="Raspberry_Pi_で_I2C_を使えるようにする">Raspberry Pi で I2C を使えるようにする</h3><p>今回使用する AM2320 という温湿度計モジュールは I2C インターフェース経由でデータを取得します。<br>RaspberryPIは初期状態ではI2Cが有効になっていないため、<br>こちらのページ <a href="https://blog.ymyzk.com/2015/02/enable-raspberry-pi-i2c/" target="_blank" rel="external">https://blog.ymyzk.com/2015/02/enable-raspberry-pi-i2c/</a> を参考にし、I2Cを有効にします。</p>
<h3 id="AM2320からデータを取得するプログラムを用意する">AM2320からデータを取得するプログラムを用意する</h3><p>こちらのコード <a href="https://github.com/takagi/am2321" target="_blank" rel="external">https://github.com/takagi/am2321</a> をベースにし、出力をMackerelに対応させたコードがこちらです。</p>
<div class=""><br>  <script src="https://gist.github.com/yenjoji/40d135519a0741d3718b.js"></script><br></div>

<p>これをRaspberryPI上でコンパイルし、パスの通った場所に配置します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://gist.githubusercontent.com/yenjoji/40d135519a0741d3718b/raw/5c7835651a539f16f3446108e15aa482f6c2111f/am2321.c&#10;&#10;gcc -lm -o am2321 am2321.c&#10;&#10;chmod a+x am2321&#10;mv am2321 /usr/local/bin</span><br></pre></td></tr></table></figure>
<h1 id="Mackerelとの連携">Mackerelとの連携</h1><h2 id="Mackerelに登録してオーガニゼーションを作成する">Mackerelに登録してオーガニゼーションを作成する</h2><p><a href="http://help-ja.mackerel.io/entry/getting-started" target="_blank" rel="external">http://help-ja.mackerel.io/entry/getting-started</a><br>の手順にそって、オーガニゼーションを作成します。</p>
<h2 id="maeckrel-agent_をインストールする">maeckrel-agent をインストールする</h2><p>パッケージをダウンロードし、インストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO http://file.mackerel.io/agent/deb/mackerel-agent_latest.all.deb&#10;sudo dpkg -i mackerel-agent_latest.all.deb</span><br></pre></td></tr></table></figure>
<h2 id="ARM_版バイナリに実行ファイルを置き換える">ARM 版バイナリに実行ファイルを置き換える</h2><p>通常ならば、パッケージをインストールすれば完了ですが、<br>RasperryPiはもともとMackerelが想定しているCPUとアーキテクチャが違うためかそのままではうまく起動しません。<br>そのため、RaspberryPiのCPUにあったアーキテクチャのMackerelの実行ファイルで上書きします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://github.com/mackerelio/mackerel-agent/releases/download/v0.17.1/mackerel-agent_linux_arm.tar.gz&#10;tar xf mackerel-agent_linux_arm.tar.gz&#10;&#10;sudo mv /usr/local/bin/mackerel-agent /usr/local/bin/mackerel-agent.org&#10;sudo mv mackerel-agent_linux_arm/mackerel-agent /usr/local/bin/mackerel-agent</span><br></pre></td></tr></table></figure>
<h2 id="maeckrel-agentの設定">maeckrel-agentの設定</h2><p>インストールが完了したので、設定をしていきます。</p>
<p>設定ファイルに apiKeyとカスタムメトリクスの設定を追加します。<br>/etc/mackerel-agent/mackerel-agent.conf に オーガニゼーションの画面に表示されているAPIKEYと<br>以下のカスタムメトリクスの設定を追加してください。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Get room status&#10;[plugin.metrics.temperature]&#10;command = &#34;/usr/local/bin/am2321 -m&#34;</span><br></pre></td></tr></table></figure>
<h2 id="mackerel-agent_起動">mackerel-agent 起動</h2><p>以上で設定がひと通り完了しましたので、エージェントを起動します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mackerel-agent start</span><br></pre></td></tr></table></figure>
<p>これで、先ほど作成したオーガニゼーションに自動的にホストが追加され、<br>mackerelのデフォルトの監視項目と、温湿度計のデータが記録されていくようになります。</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19282373940/in/dateposted-public/" title="mackerel-room" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/281/19282373940_5b6feac8f1.jpg" width="500" height="333" alt="mackerel-room"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<h1 id="アラートの設定">アラートの設定</h1><p>無事に温度と湿度の記録が始まりました。<br>しかしながらこれだけでは、職場が危機な状況になっても気づくことが出来ません。</p>
<p>ということで、職場の労働環境を監視する尺度として、不快指数を使って職場環境をモニタリングしたいと思います。</p>
<p>実は先程のMackerelカスタムメトリクス取得プログラムには、温度、湿度以外に不快指数も取得できるようにしてあります。<br>なので、手順通りに設定した場合は、すでにカスタムメトリクス上に不快指数が記録されていると思います。</p>
<p>wikipediaによると、日本人は不快指数が77を超えた辺りから一部の方々が不快を覚え始め、80を超えるとみんなが不快感を感じるそうなので、<br>この値を超えた場合に通知が来るように設定したいと思います。</p>
<ol>
<li>Macerel管理画面から Monitor メニューをクリックし、監視ルールを追加ボタンをクリックします。<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19282339528/in/dateposted-public/" title="mackerel-monitor_001" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/519/19282339528_2010ee2383.jpg" width="500" height="263" alt="mackerel-monitor_001"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>ポップアップしたウィンドウに監視条件を入力し作成ボタンをクリックします。<br>今回は不快指数(custom.room.1.discomfortindex)を選択し、77でWarning、80でCriticalとなるように設定します。<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19463574002/in/dateposted-public/" title="mackerel-monitor_002" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/451/19463574002_2b9f7c24ee.jpg" width="500" height="263" alt="mackerel-monitor_002"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>作成した関し条件が一覧に表示されていれば成功です。<br>これで不快指数がしきい値を超えるた際にメール通知がされるようになりました。また、チャットなどメール以外の通知方法も用意されています。（私はHipChatにも通知しています。）<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19463581282/in/dateposted-public/" title="momongar-discomfortindex" target="_blank" rel="external"><img src="https://c2.staticflickr.com/4/3912/19463581282_0628d1a7f6.jpg" width="500" height="260" alt="momongar-discomfortindex"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
</ol>
<h1 id="ズゴックと連携する">ズゴックと連携する</h1><p>以前作成した、ズゴックXFDですが、<br>チームのみんながちゃんとテストが通ることを確認してからソースコードをPushするため、ほぼ活躍する機会がありません。<br>このままだと <strong>ただ職場にガンプラをおいている人になってしまう</strong> ので、<br>ズゴックの存在意義を上げるべく温度計を連携させたいと思います。</p>
<h2 id="温度計の実装">温度計の実装</h2><ol>
<li>ドリルで大まかな穴を開けた後、ニッパーで穴をつなぎ<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/18849417353/in/dateposted-public/" title="DSC_0093" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/546/18849417353_1ec27ef32a.jpg" width="500" height="281" alt="DSC_0093"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>カッターで凹凸を整えます<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/18849429613/in/dateposted-public/" title="DSC_0094" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/432/18849429613_180dececaf.jpg" width="500" height="281" alt="DSC_0094"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>温度計を開けた穴にはめ込み、配線を足経由で踵から外部に引き出せば完成です。<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19443993586/in/dateposted-public/" title="DSC_0101" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/294/19443993586_0f60c72627.jpg" width="281" height="500" alt="DSC_0101"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
<li>組み立てるとこんなかんじになります。<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/18849420843/in/dateposted-public/" title="DSC_0108" target="_blank" rel="external"><img src="https://c2.staticflickr.com/4/3707/18849420843_3bd5471118.jpg" width="500" height="281" alt="DSC_0108"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br><a data-flickr-embed="true" href="https://www.flickr.com/photos/130999506@N07/19443991026/in/dateposted-public/" title="DSC_0105" target="_blank" rel="external"><img src="https://c1.staticflickr.com/1/488/19443991026_6681b756d0.jpg" width="281" height="500" alt="DSC_0105"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></li>
</ol>
<h1 id="結果">結果</h1><p>晴れてズゴックに温度計が付き、職場の状況をモニタリングすることが可能になりました。</p>
<p>これで、自分の居室の不快指数を計測し放題です。<br>計測したところで、特に快適になったりはしないのは残念ですが、<br>計測データを元に現場のリーダーに職場環境のカイゼンをお願いする材料くらいにはなるはずです。</p>
<p>ただ、残念ながら、温度計を付けてもズゴック見た目に変化がないので、<br>相変わらず傍から見るとガンダム好きな人にしか見えないという点は今後の課題とします。</p>
<p>みなさんもMackerelと様々なセンサーを組み合わせて遊んでみるのはいかがでしょうか？</p>
<h1 id="参考URL">参考URL</h1><h2 id="Raspberry_Pi_の_I2C_を有効化する方法_(2015年版)">Raspberry Pi の I2C を有効化する方法 (2015年版)</h2><p><a href="https://blog.ymyzk.com/2015/02/enable-raspberry-pi-i2c/" target="_blank" rel="external">https://blog.ymyzk.com/2015/02/enable-raspberry-pi-i2c/</a></p>
<h2 id="Raspberry_Pi_で湿度センサ_AM2321_を使う">Raspberry Pi で湿度センサ AM2321 を使う</h2><p><a href="http://technology-memo.seesaa.net/article/404719464.html" target="_blank" rel="external">http://technology-memo.seesaa.net/article/404719464.html</a></p>
<h2 id="Mackerelについて">Mackerelについて</h2><p><a href="http://qiita.com/ariarijp/items/838628e121b051524309" target="_blank" rel="external">http://qiita.com/ariarijp/items/838628e121b051524309</a></p>
<h2 id="不快指数">不快指数</h2><p><a href="https://ja.wikipedia.org/wiki/%E4%B8%8D%E5%BF%AB%E6%8C%87%E6%95%B0" target="_blank" rel="external">https://ja.wikipedia.org/wiki/%E4%B8%8D%E5%BF%AB%E6%8C%87%E6%95%B0</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mackerel + Raspberry Pi で 職場環境をモニタリング</p>
<p>皆さんMackerelをご存知ですか？</p>
<p><a href="https://mackerel.io" target="_blank" rel="external">Mack]]>
    </summary>
    
      <category term="IoT" scheme="http://yenjoji.github.io/pages/pages/tags/IoT/"/>
    
      <category term="Mackerel" scheme="http://yenjoji.github.io/pages/pages/tags/Mackerel/"/>
    
      <category term="RasperryPi" scheme="http://yenjoji.github.io/pages/pages/tags/RasperryPi/"/>
    
      <category term="ネタ" scheme="http://yenjoji.github.io/pages/pages/tags/%E3%83%8D%E3%82%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015/6/21 Agilesamurai Basecamp ふりかえり & TDD でお話させていただきました。]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/06/22/20150621-spoken-at-asbc-tdd/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/06/22/20150621-spoken-at-asbc-tdd/</id>
    <published>2015-06-21T16:03:35.000Z</published>
    <updated>2015-06-22T00:59:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://agilesamurai-basecamp.doorkeeper.jp/events/25071" target="_blank" rel="external">Agile Samurai Basecamp 2015.06 ふりかえり&amp;TDD</a><br>の事例紹介セッションでお話をさせていただきました。</p>
<p>柴田さん (@hsbt)、末吉さん(@sue445) という豪華すぎるメンツに気後れしつつも無事に？発表出来ました。<br>基本一発ネタですが、スライドをアップしました。</p>
<h2 id="事例紹介_「安心してください。テスト書いてます」">事例紹介 「安心してください。テスト書いてます」</h2><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/ibHSt7blkudEEl" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/YasutoEnjoji/20150621-asbc-pub" title="20150621 Agilesamrai Basecamp TDD事例紹介" target="_blank">20150621 Agilesamrai Basecamp TDD事例紹介</a> </strong> from <strong><a href="//www.slideshare.net/YasutoEnjoji" target="_blank">Yasuto Enjoji</a></strong> </div></p>
<h2 id="QA">QA</h2><p>質疑応答で質問されたことを覚えている範囲で。</p>
<h3 id="良いテストコードを書くにはどうしたらいいか">良いテストコードを書くにはどうしたらいいか</h3><ul>
<li>（直接の回答では無いですが）実際にコードレビューとかしている時に感じた事は<ul>
<li>プロダクトコードの意図が汲み取れる様なテストだと嬉しいです。</li>
<li>単にカバレッジ等を稼ぐために量産した意図のわからないテストは嬉しくないです。</li>
</ul>
</li>
</ul>
<h3 id="Red_Green_Refactor_を守った場合と守らなかった場合で定量的な差はあるのか">Red Green Refactor を守った場合と守らなかった場合で定量的な差はあるのか</h3><ul>
<li>私達の現場では定量的に計測していないため、わかりません。</li>
</ul>
<h3 id="TDD導入するときに、既存チームからの暖簾分けする際のメンバーはどういう基準で選びましたか？">TDD導入するときに、既存チームからの暖簾分けする際のメンバーはどういう基準で選びましたか？</h3><ul>
<li>これが正解というのはないですが、私達のケースでは生きのいい技術が好きな若者を投入しました。<ul>
<li>自分からどんどんテストを書いて、周りを巻き込んでテストを書くという流れを作ってもらおうという意図でした。</li>
<li>チームメンバーもテストを書くことについては肯定的だったので、リズムを作ればうまくいくと考えてました。</li>
</ul>
</li>
</ul>
<h3 id="要求を満たしているかをTDDで担保するにはどうしたら良いか">要求を満たしているかをTDDで担保するにはどうしたら良いか</h3><ul>
<li>要求を満たしているかどうかはUnitテストでは担保できない（しにくい）と考えています。<ul>
<li>私の現場では、手動で行う結合テスト（受け入れテスト）が開発フロー上義務付けられているので、そこで担保できるようにしています。</li>
</ul>
</li>
</ul>
<p> 同じ現場で働いている @setoazusa さんからのキラーパスをうっかり受けてしまったことから始まった今回の登壇でしたが、<br> 豪華登壇者と並ばせていただくなど、本当に貴重な体験をさせていただきました。<br> こんな場を設けてくださったスタッフの皆様、超きれいな眺めのイイ会場を提供してくださったリクルートジョブズ様<br> 拙い話を最後まで聞いてくださった参加者の方々に感謝致します。<br> 有難う御座いました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://agilesamurai-basecamp.doorkeeper.jp/events/25071" target="_blank" rel="external">Agile Samurai Basecamp 2015.06 ふりかえり&am]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi で XFD]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/04/09/raspi-xfd/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/04/09/raspi-xfd/</id>
    <published>2015-04-09T10:41:39.000Z</published>
    <updated>2015-08-11T06:02:51.000Z</updated>
    <content type="html"><![CDATA[<p>突然ですがXFDをご存知ですか?</p>
<h1 id="XFDとは">XFDとは</h1><p>オブジェクト倶楽部 <a href="http://objectclub.jp/community/xfd/" target="_blank" rel="external">http://objectclub.jp/community/xfd/</a> によると</p>
<blockquote>
<p>プロジェクトステータスやメトリクスは、目に見えにくい。見えないからこそ難しい。そんな悩みを解決してくれるのが、XFD(eXtreme Feedback Device)です。目に見えて、楽しい、ユニークな装置。目に付いて、絶対見落とさないような装置を指します。安上がりならなおよろし。</p>
</blockquote>
<p>とのことです。</p>
<p>例えばCIによるビルドエラーに連動したパトランプ <a href="http://gitgear.com/xfd/" target="_blank" rel="external">http://gitgear.com/xfd/</a> など、<br>そのままだと気づきにくいイベントを気づきやすくするデバイスを指すようです。</p>
<h1 id="今回すること">今回すること</h1><p>今回はそんなXFDをRaspberry Piを利用して作成してみたいと思います。<br>なお、今回はAtlassian の CIサーバー Atlassian Bamboo を対象としますが、ビルド結果取得の部分だけ替えればJenkinsなどにも対応可能です。</p>
<h1 id="用意するもの">用意するもの</h1><ul>
<li><p>Raspberry Pi  x  1<br>今買うなら Raspberry Pi 2 Type B がお得だと思われます。</p>
</li>
<li><p>赤色LED x 1<br>色はお好みで。<br>今回はビルド失敗のエラー感を出すため 3mm径の赤色高輝度LEDとしました。</p>
</li>
<li><p>330Ω抵抗 x 1<br>LEDが壊れないよう基本に則って抵抗を使用します。</p>
</li>
<li><p>ブレットボード x 1</p>
</li>
<li>配線用ジャンパワイヤ　適量<br>その他配線用の機材を適宜用意します。</li>
</ul>
<h1 id="回路">回路</h1><p>上記のパーツを組み込むとこのようになります。</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/17095952411" title="DSC_0078 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm9.staticflickr.com/8793/17095952411_ae117f0b1c.jpg" width="500" height="281" alt="DSC_0078"></a></p>
<p>一応実体配線図も作ってみました</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/16892826597" title="raspi-XFD by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7680/16892826597_7816819f87.jpg" width="500" height="381" alt="raspi-XFD"></a></p>
<h1 id="プログラム">プログラム</h1><p>例えば以下のようにREST APIでBambooのビルド結果を取得します。<br>なお、今回はBamboo上に複数ブランチが登録されていることを前提としているため、ブランチがないと動きません。</p>
<script src="https://gist.github.com/yenjoji/f29553357d3a28566e7e.js"></script>

<h1 id="結果">結果</h1><p>これで、Bambooの指定したブランチがビルドエラーになった際には、<br>接続されたLEDが点灯するようになりました。</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/16474189394" title="DSC_0079 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7685/16474189394_33deca6d01.jpg" width="500" height="281" alt="DSC_0079"></a></p>
<p>しかし、ちょっとこれでは寂しいので、ひと手間加えたいと思います。</p>
<p>最近はだいぶJOJOや、仮面ライダーに押されているとはいえ、エンジニアといえばガンダムです。</p>
<p>という訳で、ちょっとガンダムを足してみました。</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/16909072210" title="DSC_0080 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7591/16909072210_ce02bdcf1f.jpg" width="500" height="281" alt="DSC_0080"></a></p>
<p>ドリルでモノアイ部分に穴を開けてLEDを装着し</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/17145119535" title="DSC_0097 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7694/17145119535_53d2a4681f.jpg" width="500" height="281" alt="DSC_0097"></a></p>
<p>なるべく目立たないように配線をします。</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/16522691594" title="DSC_0098 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm9.staticflickr.com/8722/16522691594_c661070703.jpg" width="500" height="281" alt="DSC_0098"></a></p>
<p>最近のプラモはよく出来ていて、関節可動部分が多くいので<br>昔のプラモのように脚部の中がスカスカでなかったのは誤算でした。</p>
<p>今回はちょっと妥協してこのくらいにしておきますが、機会があればもう少し綺麗に配線をしたいと思います。</p>
<h1 id="動作例">動作例</h1><p>さて、再度どうなるか試してみます。</p>
<p>万が一Bambooでのビルドが失敗した場合には</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/17110199341" title="bamboo_build_failed by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm9.staticflickr.com/8776/17110199341_93663d3018.jpg" width="500" height="331" alt="bamboo_build_failed"></a></p>
<p>光ります。</p>
<p><a href="https://www.flickr.com/photos/130999506@N07/16474189674" title="DSC_0084 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7626/16474189674_5dce3d4052.jpg" width="500" height="281" alt="DSC_0084"></a></p>
<p>これでだいぶ危機感が増しました。<br>ジムがやられる前になんとしてもビルドエラーを修正しなければなりません！！</p>
<h1 id="まとめ">まとめ</h1><p>Raspberry Piが発売されたことによって、ネットワークを利用した電子工作が簡単にできるようになりました。</p>
<p>電子工作初心者でも簡単に作れるオリジナルのXFDでプロジェクトを活性化して行きましょう！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>突然ですがXFDをご存知ですか?</p>
<h1 id="XFDとは">XFDとは</h1><p>オブジェクト倶楽部 <a href="http://objectclub.jp/community/xfd/" target="_blank" rel="external">h]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="IoT" scheme="http://yenjoji.github.io/pages/pages/tags/IoT/"/>
    
      <category term="RasperryPi" scheme="http://yenjoji.github.io/pages/pages/tags/RasperryPi/"/>
    
      <category term="ネタ" scheme="http://yenjoji.github.io/pages/pages/tags/%E3%83%8D%E3%82%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015/2/2 英語学習勉強会「英語のセッションを聴く」実践編 に参加してきました。]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2015/02/03/2015-2-2-mpp/"/>
    <id>http://yenjoji.github.io/pages/pages/2015/02/03/2015-2-2-mpp/</id>
    <published>2015-02-02T18:35:00.000Z</published>
    <updated>2015-04-09T11:18:07.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/130999506@N07/16427800351" title="AXON_ACTIVE by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7453/16427800351_48b521e76e_m.jpg" alt="AXON_ACTIVE"></a></p>
<p>牛尾さん(<a href="https://twitter.com/sandayuu" target="_blank" rel="external">https://twitter.com/sandayuu</a>)主催の、 Majide Perapera Project(<a href="http://mpp-group.doorkeeper.jp/" target="_blank" rel="external">http://mpp-group.doorkeeper.jp/</a>)の勉強会</p>
<p><strong>英語学習勉強会「英語のセッションを聴く」実践編</strong><br><a href="http://mpp-group.doorkeeper.jp/events/20267" target="_blank" rel="external">http://mpp-group.doorkeeper.jp/events/20267</a>に参加してきました。</p>
<p>オフショア開発の実践者であり、<br>牛尾さんをして「ガチアジャイルの実践者」と言わしめる程のMarkusさんの貴重な話を聞け、<br>更には、自分の質問も聞いてもらった上に、自分の理解力のなさを棚に上げた「Could you summarize it, please.」などという無茶なお願いにも<br>「もう、十分要約してあるんだけどなぁ」<br>とか言いつつも非常に丁寧に答えてもらえ、超実践的な英語の勉強にもなる大変有意義な勉強会でした。</p>
<h2 id="タイムテーブル">タイムテーブル</h2><p>19:30 - 19:45 Introduction<br> 19:45 - 20:30 My experience with IT outsourcing<br> 20:30 - 20:45 Team discussion<br> 20:45 - 21:30 Ask Mr. Markus</p>
<p>勉強会はこのような流れでした。（ただし、時間はなんとなくです。）</p>
<h3 id="1-_My_experience_with_IT_outsourcing">1. My experience with IT outsourcing</h3><p>まずは、ベトナムでのオフショア開発を実践されている<br> AXON ACTIVE 社(<a href="http://www.axonactive.vn/" target="_blank" rel="external">http://www.axonactive.vn/</a>)の<br> CEO Markus Baur さんによるオフショア開発の勘所と落とし穴に関するセッションです。</p>
<p>すべて英語のセッションだったため、けっこうな頻度で聞き取れないところがあったのが残念でしたが、それでも随所にためになるエッセンスが散りばめられていて非常に参考になりました。</p>
<ul>
<li>文化の違いを認識しなければならない<ul>
<li>インド人？のYesはYesじゃないとか</li>
</ul>
</li>
<li>アクセシビリティ<ul>
<li>オフショア先にいつでもすぐに飛んでいける距離感がとっても大切</li>
<li>時差は4時間ぐらいまでがいい</li>
</ul>
</li>
<li><p>Project型ではなくDedicated Team でないと難しい</p>
</li>
<li><p>短いスパンで頻繁な評価を</p>
</li>
<li>重厚なドキュメントを作らず、最低限のテキストで素早く結果を見る</li>
<li>チームサイズは 5-10 人 で7人くらいがいい</li>
<li><p>要求をまとめる人は一人にするべき</p>
</li>
<li><p>何を置いてもオフショアチームと直接会うべき</p>
<ul>
<li>最低限年に4回は現地にいくべき</li>
<li>現地で、一緒に話、ご飯を食べ、お酒を飲みましょう</li>
<li>お互いに歩み寄って、近い間柄になるべきです</li>
</ul>
</li>
</ul>
<h3 id="2-_Team_discussion">2. Team discussion</h3><p>次に、Markusさんの話を受けて、セッションの内容のチーム内での共有と<br> Markusさんに聞いてみたい質問をまとめるディスカッションタイムです。</p>
<p>質問のルールとして、チームディスカッションは日本語でOK、<br> 英語への翻訳もチームメンバーの力を借りてOKですが、</p>
<p>実際の質問は質問する人が、英語でMarkusさんに質問をするというルールでした。</p>
<h3 id="3-_Ask_Mr-Markus_(コーナー名は勝手につけました)">3. Ask Mr.Markus (コーナー名は勝手につけました)</h3><p>チームディスカッションの結果を元に、Markusさんを囲んで全員で座り、<br> Markusさんへ質問をぶつけて答えてもらおうのコーナーでした。<br> 当初は全員質問するのかなぁと思っていましたが、</p>
<p>個々の質問に対するMarkusさんの対応が丁寧、個々の話題が意外と盛り上がったこともあり、結局7,8件くらいの質問に答えてもらったところでタイムアップでした。</p>
<p>私は、ベトナムでは、けっこう転職が激しいという話も聞いたので、</p>
<p>「アジャイル開発において、チームメンバーが頻繁に入れ替わるのはよく無いと言われていますが、その問題にどう対応しますか？」<br> という質問を<br> 「Turn over of members is problem of Agile development. how do you<br>avoid risk.」<br> という英語で質問しました。<br> 回答は。<br> 1.<br>開発者に権限を与えて（強制的に働かせたりせず）自己組織化して働いてもらうこと。</p>
<ol>
<li>職場環境を整えて、（託児所を用意したりして）環境を良くすること<br>という回答を頂きました。</li>
</ol>
<p>ただ、そうは言っても文化の違いがあったりするので<br> （ベトナムは65％でOKとしてしまうらしいとか。）<br> 締めるべきところは締めてやっていかなければとも感じました。</p>
<h2 id="感想">感想</h2><p>オフショアバリバリやってる人の話をちょっと聞いてみようかなぁと<br>軽い気持ちで申し込んで。</p>
<p><blockquote class="twitter-tweet" lang="ja"><p>ちなみにさっきのフル英語講演ですよ :)</p>&mdash; TsuyoshiUshio (@sandayuu) <a href="https://twitter.com/sandayuu/status/561903951813963776" target="_blank" rel="external">2015, 2月 1</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>申し込んだ後にこのツイートに気づき、全編英語にビビりまくり</p>
<p>一瞬参加やめようかと思ったりもしましたが、参加して良かったと感じました。</p>
<p>一緒にディスカッションした方が、Markusさんの話を聞いて言った<br> 「これって日本でもおなじだよね」</p>
<p>といっていた言葉を聞いて、本質的なところは文化をこえるってことかなぁと一人感動したりしてました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.flickr.com/photos/130999506@N07/16427800351" title="AXON_ACTIVE by Yasuto Enjoji, on Flickr" target="_blank" rel="ex]]>
    </summary>
    
      <category term="community" scheme="http://yenjoji.github.io/pages/pages/tags/community/"/>
    
      <category term="english" scheme="http://yenjoji.github.io/pages/pages/tags/english/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scrum  Alliance Regional Gathering Tokyo 2013 （１日目）に参加してきました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2013/01/24/sgt2013-day1/"/>
    <id>http://yenjoji.github.io/pages/pages/2013/01/24/sgt2013-day1/</id>
    <published>2013-01-24T05:23:22.000Z</published>
    <updated>2015-04-09T16:23:36.000Z</updated>
    <content type="html"><![CDATA[<p>1/14,15 の２日間にわたって開催された Scrum Alliance Regional Gathering Tokyo 2013 に参加してきましたのでその模様の一部をご紹介させていただきたいと思います。</p>
<p>開催概要、タイムテーブルなど</p>
<p><ul><br>    <li>公式のWeb<br><a href="http://scrumgatheringtokyo.org/2013/" target="_blank" rel="external"> http://scrumgatheringtokyo.org/2013/</a></li><br>    <li>一日目のtogetter<br><a href="http://togetter.com/li/439941" target="_blank" rel="external">http://togetter.com/li/439941</a></li><br></ul></p>
<p></p><h2>Agile Management – Learning From Software Development どのようにチームを導き、成長していくのか</h2><p></p>
<p></p><h3>Jurgen Appelo (ユルゲン・アペロ)氏</h3><br>セッションのはじめは<a title="アジャイルコミュニティで影響力のある人々" href="http://www.infoq.com/jp/news/2012/04/agile-influential-people" target="_blank">アジャイルコミュニティで最も影響力のある人々</a> の第６位の Jurgen Appelo氏によるセッションでした。<p></p>
<p>セッションの冒頭での「世界の半数の人は自分の仕事が嫌いなのに、ローン返済のためなどのために仕事をやめない」という話が印象的でした。</p>
<p>では、そのハッピーじゃない人たちがハッピーにになるための手段の一つがアジャイルであり、アジャイルに仕事をすることによって士気が上がって、ハッピーになっている事例があるということでした。</p>
<p>アジャイルと言っても手段や適応する局面はたくさんあるらしく、<br>その中で紹介されていた手法のうち、<a title="Beyond Budgeting" href="http://d.hatena.ne.jp/wayaguchi/20120315/1331798274" target="_blank">Beyond Budgeting </a>という<br>脱予算経営、財務にアジリティを持たせるという手法は全く聞いたことがなく新鮮でした。</p>
<p>また、みんなが楽しく仕事をするためにマネージメントが重要。<br>ただ、重要なのは「マネージメント」であり、「マネージャ」ではない、<br>マネージメントは一人に任せるのにはあまりにも重要すぎるのでみんなで責任を持ってやろう！</p>
<p><a href="http://www.management30.com/" target="_blank" rel="external">Management3.0</a>にはみんなの仕事を楽しくさせるヒントが詰まっているようです。</p>
<p>セッションを通して、マネージャとマネージメントをなんとなく混同していたことに気づいたことと、質疑応答であった「スキルセットではなくマインドセットで人を雇う」という一言が印象的でした。</p>
<p>話の随所にいろいろなヒントが詰まっている素晴らしいセッションでした。</p>
<p></p><h2>Buy or Build: where did your agile come from 日本文化とアジャイル/スクラム</h2><p></p>
<p></p><h3>James O. Coplien (ジム・コプリエン)氏</h3><br>２セッション目は、認定スクラムマスターの認定をしている組織のイベントでの壮大な認定資格を否定するというとても野心的なセッションでした。<p></p>
<p>スクラム認定を受けることによって何かができるようになるわけではなくて、<br>継続的にカイゼンを繰り返していくことに価値がある。</p>
<p>セッションの中で印象に残ったキーワードがいくつかありました。</p>
<ul>
<li>Scrumとは統制された失敗</li>
<li>Scrumとはプラクティスではない。考えることだ</li>
<li>Scrumとはどれくらい出来ていないかを見せる診断ツール</li>
<li>Scrumに正解はない、正解がないのがScrum<br>ここからも、実践の大切さを感じることが出来ました。</li>
</ul>
<p>Cope氏のセッションからは<br>「やってみて、失敗して、学んで、カイゼンすればいいんだ」<br>と勇気づけられた気がしました。</p>
<p></p><h2>スクラム組織導入入門</h2><p></p>
<p></p><h3>NECビッグローブ株式会社 安西剛氏</h3><p></p>
<p></p><h3>株式会社NTTデータ 柴山洋徳氏</h3><p></p>
<p></p><h3>株式会社バンダイナムコスタジオ 松元健氏</h3><p></p>
<p></p><h3>ヤフー株式会社 小野澤興平氏</h3><br>午後の1コマ目は、すでにScrumを実践している各社の実践者の方からの、いかにして組織にScrumを導入したかという体験談を聞ける貴重なセッションでした。<p></p>
<p>4社4様の状況に応じて違ったアプローチでScrumの導入をして行っているのが印象的でした。<br>「コンテキスト重要」と言ったところでしょうか。</p>
<p>そんな中でも</p>
<ul>
<li>小さな成功を積み重ねる</li>
<li>とにかく結果を出す</li>
<li>スクラムは目的ではなく手段</li>
<li>個人ではなくチームの成長を<br>などの点は共通していたように感じました。<br><h2>[OpenJam] 「ビジネスモデルYOU」ワークショップ</h2><br><h3>@take3000</h3><br>次は、オープンスペースでのOpenJam @take3000 さんによるビジネスモデルYOUのワークショップでした。</li>
</ul>
<p>仮面ライダーネタなどを盛り込みつつ楽しいプレゼンテーションと、為になるワークのセットでした。</p>
<p>実際自分自身のパーソナルキャンパスを書いてみましたが、<br>自分自身のスキルや、周りとの関係を見直すいいツールだと感じられました。</p>
<p>時間が限られていたのでそこからの発展、これから自分としてどうしていきたいかまではかき上げることができなかったのが残念でした。</p>
<p>テンプレートは<a href="http://businessmodelyou.com/" target="_blank" rel="external">こちら</a>にユーザー登録をするとダウンロードできるようになります。</p>
<p></p><h2>スクラムの実践現場でのよいやり方を形式知にしよう！～ パターンマイニングワークショップ</h2><p></p>
<p></p><h3>鷲崎弘宜氏</h3><br><a href="http://www.slideshare.net/hironoriwashizaki/pattern-miningscrum-gatheringtokyo20130115" target="_blank">スライド</a>にある手順に従って5人程度のグループで実際にパターンをかき上げてみようというワークショップでした。<p></p>
<p>グループメンバーの経験に基づいてパターンを書いてみると、適切に抽象化してみると実はみんな同じようなことを経験していたことがわかりました。<br>その時、適切なパターン出会っていたらどうなっていたのか。など興味はつきませんでした。</p>
<p>「暗黙知を形式知に」よく聞くキーワードですが、それに対するアプローチとしてパターン化は有用だと感じました。</p>
<p></p><h2>最後に</h2><br>この素晴らしいイベントを計画＆運営してくださったスタッフの皆様に感謝いたします。<br>おかげで非常に濃密な時間を過ごすことが出来ました。<!--:--><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1/14,15 の２日間にわたって開催された Scrum Alliance Regional Gathering Tokyo 2013 に参加してきましたのでその模様の一部をご紹介させていただきたいと思います。</p>
<p>開催概要、タイムテーブルなど</p>
<p><u]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="Scrum" scheme="http://yenjoji.github.io/pages/pages/tags/Scrum/"/>
    
      <category term="community" scheme="http://yenjoji.github.io/pages/pages/tags/community/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[svnsyncでリモートリポジトリをコピーする]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/10/18/svnsync/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/10/18/svnsync/</id>
    <published>2012-10-18T03:00:00.000Z</published>
    <updated>2015-04-09T16:23:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="リポジトリを同期する">リポジトリを同期する</h1><h2 id="同期用のリポジトリを作成">同期用のリポジトリを作成</h2><pre><code>svnadmin <span class="operator"><span class="keyword">create</span> <span class="keyword">sync</span></span>
</code></pre><h2 id="同期用のリポジトリを初期化">同期用のリポジトリを初期化</h2><pre><code>svnsync init <span class="symbol">file:</span>/<span class="regexp">//dest</span><span class="regexp">/sync https:/</span><span class="regexp">/dest.example.com/svn</span><span class="regexp">/</span>
</code></pre><p>もし</p>
<pre><code>svnsync: E165006: Repository <span class="keyword">has</span> <span class="keyword">not</span> been enabled <span class="keyword">to</span> accept revision propchanges;
ask the administrator <span class="keyword">to</span> <span class="keyword">create</span> a pre-revprop-change hook
</code></pre><p>とか言われたら /dest/sync/hooks/pre-revprop-change<br>ファイルを空でもいいので作成する windows<br>の場合は/dest/sync/hooks/pre-revprop-change.bat</p>
<h2 id="同期を実行">同期を実行</h2><pre><code>svnsync sync <span class="keyword">file</span>:<span class="comment">///dest/sync</span>
</code></pre><p>全リビジョンをコピーするので時間がかかります。</p>
<p>元ネタ：<br><a href="http://www.asahi-net.or.jp/~iu9m-tcym/svndoc/svn_svnsync.html" target="_blank" rel="external">http://www.asahi-net.or.jp/~iu9m-tcym/svndoc/svn_svnsync.html</a></p>
<h3 id="万が一同期中にセッションが切れて">万が一同期中にセッションが切れて</h3><pre><code>svnsync: E000022: Couldn't <span class="keyword">get</span> lock <span class="function_start"><span class="keyword">on</span></span> destination repos <span class="keyword">after</span> <span class="number">10</span> attempts
</code></pre><p>とか出るようになったら。</p>
<pre><code>svn propdel --revprop -r0 <span class="string">svn:</span>sync-lock <span class="string">file:</span><span class="comment">///dest/sync</span>
</code></pre><p>を実行すると再度syncできるようになる。</p>
<p>元ネタ：<br><a href="http://stackoverflow.com/questions/4077601/svnsync-couldnt-get-lock-on-destination-repos" target="_blank" rel="external">http://stackoverflow.com/questions/4077601/svnsync-couldnt-get-lock-on-destination-repos</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="リポジトリを同期する">リポジトリを同期する</h1><h2 id="同期用のリポジトリを作成">同期用のリポジトリを作成</h2><pre><code>svnadmin <span class="operator"><span class="keyword">c]]>
    </summary>
    
      <category term="SVN" scheme="http://yenjoji.github.io/pages/pages/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[フクロモモンガ温度記録システムにカメラをつけました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/07/07/2012-07-30-momongar/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/07/07/2012-07-30-momongar/</id>
    <published>2012-07-06T15:00:00.000Z</published>
    <updated>2015-04-09T11:18:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/130999506@N07/16462770824" title="momongar002 by Yasuto Enjoji, on Flickr" target="_blank" rel="external"><img src="https://farm8.staticflickr.com/7693/16462770824_755cc89792.jpg" width="500" height="375" alt="momongar002"></a></p>
<p>前回のコラムより、順調にフクロモモンガ温度記録システムを運用しています。</p>
<p>日々の温度の変化がわかるようになり、もし寒すぎたり暑すぎたりした場合は<br>メールで通知が送られてくるので、非常に安心なフクロモモンガライフを送ることができています。</p>

<p>人間因果なもので、温度関連の心配がなくなると、次なる欲望が頭をもたげて来ました。</p>
<h2>フクロモモンガは夜行性です</h2>

<p>ご存知の方もいらっしゃるかもしれませんが、フクロモモンガは夜行性です。</p>
<p>日中のほとんどは巣であるポーチに入って寝ています。<br>全く活動しないわけではなく、ケージに覆いをかけてちょっと暗くしておいてあげると多少は活動します、<br>がなんといっても彼（彼女）の活動のメインは私達が就寝してからの深夜帯です。</p>

<ul><br><li>夜間どんなふうに遊んでいるんだろうか</li><br><li>餌の食べ具合はどうだろうか。</li><br></ul>

<p>考え出したらきりがありません。</p>
<h2>ということで暗視カメラを付けました</h2>

<p>気になるなら見える化してしまえばいい。ということで暗視カメラについて調べてみました。<br>そうするとどうでしょう、意外と安く売っていることがわかりました。</p>

<p>それならと、早速カメラ<a href="http://www.amazon.co.jp/gp/product/B002EBBBCE" target="_blank" rel="external">赤外線WEBカメラ(130万画素) DC-NCR13U</a>をAmazonで購入しました。<br>このカメラと、Linux上で動作する動体検知機能付きカメラ制御プログラムの<a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome" target="_blank" rel="external">motion</a> 組み合わせて撮影したのが冒頭の画像です。</p>

<p>バッチリ餌を食べる姿が撮影されていて大満足です。<br>これで更に私のフクロモモンガライフが充実することうけあいです！</p>

<p>みなさんも、カメラを付けて充実したモモンガライフを送りませんか？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.flickr.com/photos/130999506@N07/16462770824" title="momongar002 by Yasuto Enjoji, on Flickr" target="_blank" rel="ex]]>
    </summary>
    
      <category term="IoT" scheme="http://yenjoji.github.io/pages/pages/tags/IoT/"/>
    
      <category term="momongar" scheme="http://yenjoji.github.io/pages/pages/tags/momongar/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[アジャイルサムライ読書会　横浜道場　特別編 First に参加しました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/04/28/first/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/04/28/first/</id>
    <published>2012-04-28T14:32:00.000Z</published>
    <updated>2015-04-09T16:22:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="アジャイルサムライ読書会_横浜道場_特別編_First_に参加しました">アジャイルサムライ読書会　横浜道場　特別編 First に参加しました</h1><p>アジャイルサムライ読書会　横浜道場　特別編 First に参加してきました。</p>
<p><a href="http://kokucheese.com/event/index/33220/" target="_blank" rel="external">募集ページ</a></p>
<p>今回は、いつもと趣向を変えてワークショップ＆LT大会でした。</p>
<p>詳しい内容は @shinyaa31<br>さんの<a href="http://d.hatena.ne.jp/absj31/20120426/1335497910" target="_blank" rel="external">レポート</a><br>を参照していただくとして。</p>
<p>参加した感想を。</p>
<h1 id="ワークショップ_「THE_SPECIFICATION_EXERCISE」_@tsuyok_さん">ワークショップ 「THE SPECIFICATION EXERCISE」 @tsuyok さん</h1><p>１テーブル４人から５人で１つのプロジェクトとし、開発チームと設計チームに分かれて、設計担当が別室でみた図形を文章だけの設計書で開発チームに伝えて、開発チームが設計書の記述に沿ってその図形を書くというものでした。</p>
<p>私は開発チーム役を担当したのですが、文章だけでコミュニケーションを行うことの難しさを味わうことができた楽しいワークショップでした。</p>
<h2 id="第１セット">第１セット</h2><h3 id="反省点">反省点</h3><ul>
<li>１２分の制限時間のうちの９分間を設計の作成に費やしてしまった。<ul>
<li>実装フェイズからプロジェクトに参画したものの上流の遅れでやることなくてぼーっとしているしかない。というどこかで聞いたことのあるようなどこか懐かしい状況になりました。</li>
</ul>
</li>
<li>結果実装の時間が足りなくて完成しなかった<ul>
<li>プロジェクトが燃え上がりました。</li>
</ul>
</li>
<li>設計担当が、わかりやすいように作戦をたててくれていたものの、そもそも作戦が文字だけではうまく伝わらなかった。<ul>
<li>ex.<br>A4の紙を９つに区切って、意思疎通のしやすさを狙ったものの指示書には９個に区切るとしか書いていなかったため、格子状にすればいいのか縦に９個にすればいいのかなど迷ってしまった。</li>
</ul>
</li>
</ul>
<h3 id="良かったこと">良かったこと</h3><ul>
<li>時間がなかった割にはそこそこなものがかけた</li>
<li>９マスに区切ったりという設計側の取り組みは理解の助けるのに効果があった</li>
</ul>
<h2 id="第２セット">第２セット</h2><p>第１セットの反省を生かして、</p>
<ul>
<li>設計チームはこまめに伝える。</li>
<li>共通認識を作るため、最初に前提となる考えを伝える</li>
</ul>
<p>などを気にしながらワークを行いました。</p>
<h3 id="反省点-1">反省点</h3><ul>
<li>設計チームが常に走りまわっていたため、開発チームからのフィードバックが伝わりにくかった。</li>
</ul>
<h3 id="良かった店">良かった店</h3><ul>
<li>設計チームが設計を少しづつ何回も伝えるようにした<ul>
<li>開発チームのアイドルタイムが少なくなり、作業も早くなった。</li>
</ul>
</li>
<li>前提となる考えを始めに伝えた<ul>
<li>第１セットよりは曖昧さがなくなった</li>
</ul>
</li>
</ul>
<h3 id="意外な気づき">意外な気づき</h3><ul>
<li>図形の形を伝えるのに「レッドリボン軍のマークのような」という表現があった<ul>
<li>砂時計を９０度傾けて・・・といった感じの表現よりはるかにわかりやすく、これはデザインパターンかっ！と、勝手にテンションが上がってしまいました。</li>
</ul>
</li>
</ul>
<h1 id="LT大会">LT大会</h1><h2 id="「もしも日露戦争で満州軍総参謀長_児玉源太郎閣下がインセプションデッキを作ったら」@dproject21_さん">「もしも日露戦争で満州軍総参謀長 児玉源太郎閣下がインセプションデッキを作ったら」@dproject21 さん</h2><ul>
<li>戦争とは国家プロジェクトだだったらインセプションデッキがあってもいいんじゃないかという考えのもとにインセプションデッキ作ってみましたとのこと。</li>
<li>非常に良くできたインセプションデッキでした。</li>
</ul>
<h2 id="「周囲に賛同者がいなくてもアジャイルな自分を感じられる！_-ポモドーロテクニック-_（仮）」_@hyokota_さん">「周囲に賛同者がいなくてもアジャイルな自分を感じられる！ -ポモドーロテクニック- （仮）」 @hyokota さん</h2><ul>
<li>最近良く耳にする食べ物じゃない方のポモドーロテクニックについてのお話でした。</li>
<li>メリット<ul>
<li>見える化できる</li>
<li>集中できる</li>
<li>見積もりできるようになる</li>
</ul>
</li>
<li>でも今までのムダが浮き彫りになってキツイよ！</li>
</ul>
<h2 id="「レガシーコード改善はじめました」_@setoazusa_さん">「レガシーコード改善はじめました」 @setoazusa さん</h2><ul>
<li>ちょっとスタッフ業で中座していたら終わってしまっていました。。残念。。。</li>
</ul>
<h2 id="「アジャイルな指揮者と音楽づくり」_@terahide27_さん">「アジャイルな指揮者と音楽づくり」 @terahide27 さん</h2><ul>
<li>デジタル音楽＝ｍｉｄｉ の方はおっさん！！！</li>
<li>理想的な指揮者は何もしない<ul>
<li>カッコイイ！</li>
</ul>
</li>
</ul>
<h2 id="「ジョジョで分かる頭じゃなく精神で理解するアジャイル」_@joker1007_さん">「ジョジョで分かる頭じゃなく精神で理解するアジャイル」 @joker1007 さん</h2><ul>
<li>JOJO=アジャイル！</li>
</ul>
<h1 id="ビアバッシュ">ビアバッシュ</h1><p>ビアバッシュで話していた内容で覚えていることなど。。</p>
<ul>
<li><p>JOJOは３部〜５部を押さえればまずは大丈夫。</p>
<ul>
<li>特に３部と５部は重要！</li>
</ul>
</li>
<li><p>Railsって簡単って言うけどインストールで勉強会一回終わってしまった。</p>
<ul>
<li>それGrailsならアーカイブ一個落として展開すればで済むよ！</li>
</ul>
</li>
</ul>
<p>いつもと趣向が違う特別編でしたが、非常に楽しく有意義なワークショップ＆LTでした。<br>講師＆LT発表者の皆様、参加者の皆様。ありがとうございました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="アジャイルサムライ読書会_横浜道場_特別編_First_に参加しました">アジャイルサムライ読書会　横浜道場　特別編 First に参加しました</h1><p>アジャイルサムライ読書会　横浜道場　特別編 First に参加してきました。</p>
<p><a hre]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="community" scheme="http://yenjoji.github.io/pages/pages/tags/community/"/>
    
      <category term="横浜道場" scheme="http://yenjoji.github.io/pages/pages/tags/%E6%A8%AA%E6%B5%9C%E9%81%93%E5%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Agile Japan 再演】アジャイルな開発からアジャイルな組織へ に参加しました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/04/25/agile-japan/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/04/25/agile-japan/</id>
    <published>2012-04-24T16:52:00.000Z</published>
    <updated>2015-04-09T16:22:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/tumblr_m2zqefKjNe1qiaely.jpg" alt=""></p>
<p>アジャイルジャパン2012で大盛況だったとの噂の「アジャイルな開発からアジャイルな組織へ」の再演に参加しました。</p>
<p><a href="http://partake.in/events/9fbe063e-e087-4dad-898d-4425c093edfd" target="_blank" rel="external">告知ページ</a></p>
<p>公演の内容は <a href="http://togetter.com/li/292250" target="_blank" rel="external">Togetter</a> 及び<br><a href="http://www.slideshare.net/Ryuzee/agileagile-aj21-b2" target="_blank" rel="external">Slideshare</a></p>
<p><strong><a href="http://www.slideshare.net/Ryuzee/agileagile-aj21-b2" title="Agileな開発からAgileな組織へ #aj21 #b2" target="_blank" rel="external">Agileな開発からAgileな組織へ #aj21<br>#b2</a></strong></p>
<p>View more <a href="http://www.slideshare.net/" target="_blank" rel="external">presentations</a> from <a href="http://www.slideshare.net/Ryuzee" target="_blank" rel="external">Ryuzee<br>YOSHIBA</a></p>
<p>などを確認していただければ雰囲気を感じていただけるかと思います。</p>
<p>公演内容は、時に痛快で、時に気づきがあり、時にいいパンチをもらうような楽しい公演でした。</p>
<p>印象に残っているところを</p>
<h2 id="変化に対応しないといけない">変化に対応しないといけない</h2><ul>
<li>ビジネスを取り巻く環境が変わっている<ul>
<li>不安定な場所をものすごいスピード競争している</li>
<li>意思決定を早くする必要がある。</li>
<li>考えてても偉くない</li>
<li>やったほうが偉い</li>
</ul>
</li>
<li>ビジネスモデルの賞味期限が短くなっている</li>
</ul>
<h2 id="改善するかしないかが肝心である。">改善するかしないかが肝心である。</h2><ul>
<li>Scrumなどの方法論は無駄をなくそうという話！</li>
</ul>
<h2 id="価値を高めないものはすべてムダ！">価値を高めないものはすべてムダ！</h2><ul>
<li><p>求められる以上の品質もムダ</p>
</li>
<li><p>システムの64%は使われていないという調査結果がある</p>
<ul>
<li>顧客でさえも本当に必要なものがわからない</li>
<li>頻繁に軌道修正をしなければいけない</li>
</ul>
</li>
</ul>
<h2 id="早く失敗することも重要">早く失敗することも重要</h2><h2 id="アジャイルはリスクマネジメント">アジャイルはリスクマネジメント</h2><ul>
<li>頻繁にリリースして、確認することによってリスクを最小化する。</li>
<li>WFは最後にしか確認できないのが厳しい。</li>
</ul>
<h2 id="短いスパンで改善していく">短いスパンで改善していく</h2><ul>
<li>ふりかえりを行って、継続的に改善していく</li>
<li>ふりかえりしたあとにちゃんとTRYが実行されるようにする</li>
</ul>
<h2 id="チームはばらしてしまうとせっかくの改善が無駄になる">チームはばらしてしまうとせっかくの改善が無駄になる</h2><ul>
<li>無理をしてでもチームを維持するべき</li>
</ul>
<h2 id="態度重要">態度重要</h2><ul>
<li>アジャイルはハラをくくってやるかどうかだ！</li>
</ul>
<h1 id="感想">感想</h1><p>今の自分のハラのくくり方はまだまだ甘いなと思いました。<br>次回はハラをくくってアジャイルをやっている人に挙手できるように精進します。</p>
<p>勧められたので、この本を買ってみました。<br><a href="http://www.amazon.co.jp/dp/4478460019/" target="_blank" rel="external">トヨタ生産方式―脱規模の経営をめざして</a></p>
<p>有意義な公演をしてくださった @ryuzee<br>さん、参加してくださった皆様ありがとうございました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://media.tumblr.com/tumblr_m2zqefKjNe1qiaely.jpg" alt=""></p>
<p>アジャイルジャパン2012で大盛況だったとの噂の「アジャイルな開発からアジャイルな組織へ」の再演に参加しました。</]]>
    </summary>
    
      <category term="Agile" scheme="http://yenjoji.github.io/pages/pages/tags/Agile/"/>
    
      <category term="community" scheme="http://yenjoji.github.io/pages/pages/tags/community/"/>
    
      <category term="横浜道場" scheme="http://yenjoji.github.io/pages/pages/tags/%E6%A8%AA%E6%B5%9C%E9%81%93%E5%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[状況打開力を叩き上げる　TOCfE ブートキャンプに参加してきました]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/04/22/tocfe/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/04/22/tocfe/</id>
    <published>2012-04-22T14:51:34.000Z</published>
    <updated>2015-04-09T16:24:12.000Z</updated>
    <content type="html"><![CDATA[<p>4/21 にOracle青山センターで開催された<br>TOCfEブートキャンプに参加してきました。</p>
<p><a href="http://kokucheese.com/event/index/30962/" target="_blank" rel="external">こくちーずの募集ページ</a></p>
<p>TOCfEってどういうものなの？という話は<br><a href="http://tocforeducation.org/" target="_blank" rel="external">教育のためのTOC日本支部コミュニティ</a>のページを見ていただくと詳しく書いて有ります。</p>
<h1 id="参加の動機">参加の動機</h1><p>去年の夏くらいからTOCという言葉をよく耳にするようになっていて、ちょっと気になっていたところに、スタッフの一人にこんなイベントがあるよという話を聞き、どんなものかというのを体験したくて参加しました。</p>
<h1 id="参加前">参加前</h1><p>事前準備として参考書籍として「<a href="http://www.amazon.co.jp/dp/4478420408/" target="_blank" rel="external">ザ・ゴール</a>」「<a href="http://www.amazon.co.jp/dp/4478420416/" target="_blank" rel="external">ザ・ゴール２</a>」の２冊を購入して読みました。</p>
<p>閉鎖寸前の工場がTOCの手法を取り入れて劇的に改善していくというストーリ仕立ての本はとても面白く、何年ぶりかに本を読んでいて降りる駅を通り過ぎるどころか終点まで気づかないという経験をしてしまいました。</p>
<p>ただ時間が足りなく「ザ・ゴール２」を４分の１読んだくらいでブートキャンプ当日を迎えてしまいました。</p>
<p>当日の題材であるクラウドを含むTOCfEのツールは「ザ・ゴール２」で紹介されていたため、読みきってから参加したほうが良かったなと思いましたがあとの祭りでした。</p>
<h1 id="当日のざっくりとした流れ">当日のざっくりとした流れ</h1><p>一日かけて、TOCfEのツールであるクラウドのワークショップを行いました。</p>
<ul>
<li>午前から午後１</li>
</ul>
<p>午前中から午後の途中までは参加者個々が自分の抱えている問題についてクラウドを作成しました。</p>
<p>はじめにスタッフの方からどうやってクラウドを作成していくかという説明があり、その後実際に自分でつくってみるという過程をステップを細かく分けて行っていくという進め方でした。</p>
<p>例えば午後１終了時点でのクラウドはこんな感じ。（あくまで例で実際のものではないです。）<br><img src="http://media.tumblr.com/tumblr_m2vxzsou4Y1qiaely.jpg" alt="自分が作ったクラウドのうち無難な方"></p>
<ul>
<li>午後２</li>
</ul>
<p>その後、３人でグループを作り、その中の一人のクラウドについて解決に向けて３人で協力して考えるという内容でした。</p>
<p>私の入ったグループ（@riskrisk<br>さん、主婦！の女性、私）は自分も共感できる内容だったので、ぜひとも解決策を導き出すところまで行きたかったのですが、結局時間が足りずに終わってしまったのが残念でした。</p>
<ul>
<li>懇親会</li>
</ul>
<p>その後そのままの会場でビアバッシュ形式での懇親会になりました。</p>
<p>やはり移動がないのは楽で非常にありがたかったです。<br>準備してくださったスタッフの方や、会場を提供してくださるOracle社の対応に非常に感謝しなければいけないなと思いました。</p>
<p>懇親会になってもTOCfEにまつわるアカデミックなトークができたり、</p>
<p>@yumzou<br>さんがクラウドを書いて、クラウドが出来上がって行く様をライブ観戦できたり。</p>
<p>誰かがクラウドを考えて書いていくさまを見るのは非常に興味深く勉強になりました。</p>
<p>某氏のエグい題材に対してのクラウド（酔と題材の重さ故か未完成）が始まったりと、非常にエキサイティングな懇親会でした。</p>
<h1 id="感想">感想</h1><p>参加する前は、</p>
<ul>
<li><p>募集ページの「家庭のことから仕事のことまで何でも解決できますよ！」との謳い文句（一部脚色があります。）に半信半疑で、</p>
</li>
<li><p>一日かけて「クラウド」というツールのワークショップで時間が持つんだろうか</p>
</li>
</ul>
<p>などとちょっと斜に構えていた所があったのですが、この両方共見事にいい意味で裏切られました。</p>
<p>家庭の問題から、仕事の問題まで実に多岐に渡るクラウドが作成されてかつ活発な議論がかわされていましたし、私のチームでは結局時間が足りなくなるハメになり、TOCfEの深さ、スタッフの深慮に、脱毛する思いでした。</p>
<p>今回はクラウドというツールを使って、今までなんとなく考えて結論を出していた（と思っていた）問題について再度ちゃんと考えることによって、たくさんの新しい気づきを得ることができました。</p>
<p>参加者もどこかで見たことがある方も多かったですが、主婦の方など普段の勉強会ではまずお会いしない方ともお話ができて非常に貴重な体験ができました。</p>
<p>スタッフの方々、会場を提供してくださったOracle社さん<br>ありがとうございました。</p>
<p>TOCfEって本当に素晴らしいですね！ #ステマ</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>4/21 にOracle青山センターで開催された<br>TOCfEブートキャンプに参加してきました。</p>
<p><a href="http://kokucheese.com/event/index/30962/" target="_blank" rel="externa]]>
    </summary>
    
      <category term="TOCfE" scheme="http://yenjoji.github.io/pages/pages/tags/TOCfE/"/>
    
      <category term="community" scheme="http://yenjoji.github.io/pages/pages/tags/community/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[S2JDBCで一部の処理だけ別トランザクションにしたい場合の注意点]]></title>
    <link href="http://yenjoji.github.io/pages/pages/2012/04/15/s2jdbc/"/>
    <id>http://yenjoji.github.io/pages/pages/2012/04/15/s2jdbc/</id>
    <published>2012-04-15T13:10:40.000Z</published>
    <updated>2015-04-09T16:23:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="どんなシチュエーションで使うのか">どんなシチュエーションで使うのか</h1><ul>
<li>バッチ処理でログをDBに書き込んでいるケースなどでログは残したいけど、失敗した場合にトランザクションはロールバックしたいとか。</li>
</ul>
<h1 id="どうすればできるのか">どうすればできるのか</h1><ul>
<li>別トランザクションにしたいメソッドまたはクラスに<br>@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)<br>アノテーションをつければOK</li>
</ul>
<h1 id="注意点">注意点</h1><p>私の環境では、メソッドにこのアノテーションをつけた場合に<br><strong>メソッドがpublicでないと</strong> トランザクション境界にならなかった！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="どんなシチュエーションで使うのか">どんなシチュエーションで使うのか</h1><ul>
<li>バッチ処理でログをDBに書き込んでいるケースなどでログは残したいけど、失敗した場合にトランザクションはロールバックしたいとか。</li>
</ul>
<h1 id="ど]]>
    </summary>
    
      <category term="S2JDBC" scheme="http://yenjoji.github.io/pages/pages/tags/S2JDBC/"/>
    
      <category term="program" scheme="http://yenjoji.github.io/pages/pages/tags/program/"/>
    
  </entry>
  
</feed>